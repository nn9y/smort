(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_2 () String)
(declare-fun seed0_sigmaStar_3 () String)
(declare-fun seed1_x () String)
(assert (and (str.in_re (str.substr z_random1_2 0 (str.len seed0_sigmaStar_3)) (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar )))) (and (not (= (str.in_re (str.substr z_random0_2 (str.len seed0_sigmaStar_3) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "B" (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "C" "A") (str.len seed0_sigmaStar_3)) (str.len (str.++ "C" "A")))))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random0_1 (str.len seed0_sigmaStar_3) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random1_1 (str.indexof z_random1_1 (str.++ "B" "C") (str.len seed0_sigmaStar_3)) (str.len (str.++ "B" "C"))))) (re.* re.allchar ) (re.++ re.allchar  re.allchar ) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random0_3 (str.len seed0_sigmaStar_3) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.++ "C" "C"))) (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ))) (str.in_re (str.substr z_random1_2 (str.indexof z_random1_2 seed1_x (str.len seed0_sigmaStar_3)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_0 (str.len seed0_sigmaStar_3) (str.len (str.++ "B" "C")))) (re.* re.allchar ) (str.to_re (str.++ "C" "A")) (re.* re.allchar ))))))))
(check-sat)
(exit)