(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random0_6 String)
(declare-const z_random1_0 String)
(declare-fun seed0_x () String)
(declare-fun seed1_x () String)
(assert (and (and (not (= (str.in_re (str.substr z_random0_0 0 (str.indexof z_random0_0 (str.++ "A" "A") (str.len seed0_x))) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.++ "C" (str.substr z_random0_2 0 (str.indexof z_random0_2 seed1_x (str.len (str.++ "A" "B"))))))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random1_0 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (re.inter re.allchar  (str.to_re "")) (re.* re.allchar ))))) (not (= (str.in_re seed0_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "B" "C"))) (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ))) (str.in_re (str.substr z_random0_6 0 (str.indexof z_random0_6 seed1_x (str.len seed0_x))) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (re.++ (str.to_re (str.++ "C" (str.++ "B" "C"))) re.allchar ) (re.* re.allchar )))))) (and (not (= (str.in_re (str.substr z_random0_3 (str.len seed0_x) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "A" "C") (str.len seed0_x)) (str.len (str.++ "A" "C")))) (re.* re.allchar ) (str.to_re (str.substr z_random0_0 (str.len seed0_x) (str.len (str.++ "A" "A")))) (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random0_5 (str.len seed0_x) (str.len (str.++ "A" "A"))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random0_6 (str.len seed0_x) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "B" (str.substr z_random0_1 (str.len seed0_x) (str.len (str.++ "A" "A")))))) (re.* re.allchar ))) (str.in_re (str.substr z_random0_4 (str.len seed0_x) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "C" (str.++ "C" "C")))) (re.* re.allchar ))))))))
(check-sat)
(exit)