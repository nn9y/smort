(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random0_6 String)
(declare-const z_random0_7 String)
(declare-const z_random0_8 String)
(declare-const z_random0_9 String)
(declare-const z_random0_10 String)
(declare-const z_random0_11 String)
(declare-const z_random0_12 String)
(declare-const z_random0_13 String)
(declare-const z_random0_14 String)
(declare-const z_random0_15 String)
(declare-const z_random0_16 String)
(declare-const z_random0_17 String)
(declare-const z_random0_18 String)
(declare-const z_random0_19 String)
(declare-const z_random0_20 String)
(declare-const z_random0_21 String)
(declare-const z_random0_22 String)
(declare-const z_random0_23 String)
(declare-const z_random0_24 String)
(declare-const z_random0_25 String)
(declare-const z_random0_26 String)
(declare-const z_random0_27 String)
(declare-const z_random0_28 String)
(declare-const z_random0_29 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-fun seed0_x () String)
(declare-fun seed1_x () String)
(assert (and (and (not (= (str.in_re (str.substr z_random1_3 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.substr z_random0_22 0 (str.indexof z_random0_22 seed1_x (str.len (str.++ "A" "C")))))) (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ))) (str.in_re (str.substr z_random0_18 0 (str.indexof z_random0_18 (str.++ "B" "B") (str.len seed0_x))) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_26 0 (str.indexof z_random0_26 (str.++ "B" "B") (str.len (str.++ "A" "A"))))) (re.* re.allchar ) (str.to_re (str.substr z_random0_23 0 (str.indexof z_random0_23 seed1_x (str.len (str.++ "C" "A"))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_1 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_2 0 (str.len (str.++ "A" "A")))) (re.* re.allchar ) (str.to_re (str.substr z_random0_28 0 (str.indexof z_random0_28 (str.++ "B" "B") (str.len (str.++ "C" "A"))))) (re.* re.allchar ))) (str.in_re (str.substr z_random1_0 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "A" (str.substr z_random0_29 0 (str.indexof z_random0_29 (str.++ "B" "B") (str.len (str.++ "C" "A")))))) (re.* re.allchar )))))) (and (not (= (str.in_re (str.substr z_random0_24 (str.len seed0_x) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_27 (str.len seed0_x) (str.len (str.++ "C" "B")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "B" "B") (str.len seed0_x)) (str.len (str.++ "B" "B")))) (re.* re.allchar ))) (str.in_re (str.substr z_random0_22 (str.len (str.++ "A" "C")) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random1_2 (str.indexof z_random1_2 (str.++ "B" "B") (str.len (str.++ "A" "A"))) (str.len (str.++ "B" "B"))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_1 (str.indexof z_random1_1 seed1_x (str.len seed0_x)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "B" (str.substr z_random0_28 (str.len (str.++ "C" "A")) (str.len (str.++ "B" "B")))))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (re.++ (str.to_re (str.++ "B" (str.substr z_random1_3 (str.indexof z_random1_3 (str.++ "B" "B") (str.len seed0_x)) (str.len (str.++ "B" "B"))))) re.allchar ) (re.* re.allchar ))))))))
(check-sat)
(exit)