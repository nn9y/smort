(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-const z_random1_5 String)
(declare-const z_random1_6 String)
(declare-const z_random1_7 String)
(declare-const z_random1_8 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_2 () String)
(declare-fun seed0_sigmaStar_5 () String)
(declare-fun seed0_sigmaStar_8 () String)
(declare-fun seed0_x_4 () String)
(declare-fun seed0_epsilon () String)
(declare-fun seed0_sigmaStar_10 () String)
(declare-fun seed0_sigmaStar_12 () String)
(declare-fun seed0_literal_13 () String)
(declare-fun seed0_x_14 () String)
(declare-fun seed0_literal_15 () String)
(declare-fun seed0_x_16 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed1_x () String)
(assert (and (and (= seed0_epsilon "") (or (= seed0_x_4 seed0_epsilon) (= (str.substr z_random1_6 0 (str.len seed0_x_4)) (str.substr z_random0_0 0 (str.indexof z_random0_0 seed1_x (str.len seed0_sigmaStar_0))))) (= seed0_x_9 (str.replace (str.substr z_random1_7 0 (str.len seed0_x_4)) "\u{2f}\u{2e}\u{28}\u{5c}\u{64}\u{2b}\u{29}\u{2e}\u{2f}" "\u{5f}\u{24}\u{31}\u{2e}")) (= seed0_literal_13 "\u{20}\u{20}\u{20}\u{20}") (= seed0_x_14 (str.++ (str.substr z_random1_1 0 (str.len seed0_literal_13)) (str.substr z_random1_8 0 (str.len seed0_sigmaStar_12)))) (= seed0_literal_15 "\u{2e}\u{73}\u{63}\u{6f}\u{72}\u{65}\u{2e}\u{5f}\u{63}\u{68}\u{69}\u{6c}\u{64}\u{72}\u{65}\u{6e}\u{20}\u{3d}\u{20}\u{73}\u{63}\u{6f}\u{72}\u{65}\u{5f}\u{63}\u{68}\u{69}\u{6c}\u{64}\u{72}\u{65}\u{6e}\u{3b}\u{5c}\u{6e}") (= (str.substr z_random1_2 0 (str.len seed0_x_16)) (str.++ (str.substr z_random1_0 0 (str.len seed0_x_14)) (str.substr z_random1_5 0 (str.len seed0_literal_15)))) (str.in_re seed0_x_16 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (and (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" "A")) (re.* re.allchar ) (str.to_re (str.++ "B" "C")) (re.* re.allchar ))) (str.in_re (str.substr z_random1_7 (str.indexof z_random1_7 seed1_x (str.len seed0_x_4)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "A" (str.substr z_random1_1 (str.indexof z_random1_1 (str.++ "B" "C") (str.len seed0_literal_13)) (str.len (str.++ "B" "C")))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_6 (str.indexof z_random1_6 seed1_x (str.len seed0_x_4)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_8 (str.indexof z_random1_8 (str.++ "A" "A") (str.len seed0_sigmaStar_12)) (str.len (str.++ "A" "A")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_4 (str.indexof z_random1_4 (str.++ "A" "B") (str.len seed0_literal_15)) (str.len (str.++ "A" "B")))) (re.* re.allchar ))) (str.in_re (str.substr z_random1_3 (str.indexof z_random1_3 seed1_x (str.len seed0_sigmaStar_12)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "A" "B"))) (re.* re.allchar ))))))))
(check-sat)
(exit)