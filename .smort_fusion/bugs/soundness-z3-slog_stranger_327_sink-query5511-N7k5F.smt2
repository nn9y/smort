(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random1_0 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_4 () String)
(declare-fun seed0_sigmaStar_9 () String)
(declare-fun seed0_x_8 () String)
(declare-fun seed0_literal_3 () String)
(declare-fun seed0_literal_6 () String)
(declare-fun seed0_literal_5 () String)
(declare-fun seed0_literal_10 () String)
(declare-fun seed0_x_11 () String)
(declare-fun seed0_x_12 () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random0_2 0 (str.indexof z_random0_2 (str.++ "B" "C") (str.len seed0_literal_3))) "\u{77}\u{64}\u{69}\u{72}") (= seed0_literal_6 "\u{2f}") (= seed0_literal_5 "\u{2f}") (or (= seed0_x_8 seed0_literal_3) (= seed0_x_8 seed0_literal_6) (= seed0_x_8 seed0_literal_5)) (= seed0_literal_10 "\u{2f}") (= seed0_x_11 (str.++ seed0_x_8 (str.substr z_random0_4 0 (str.indexof z_random0_4 seed1_x (str.len seed0_literal_10))))) (= (str.substr z_random0_0 0 (str.indexof z_random0_0 (str.++ "A" "C") (str.len seed0_x_12))) (str.++ (str.substr z_random1_0 0 (str.len seed0_x_11)) seed0_sigmaStar_9)) (str.in_re seed0_x_12 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar ))))) (and (not (= (str.in_re (str.substr z_random1_0 (str.indexof z_random1_0 seed1_x (str.len seed0_x_11)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_0 (str.len seed0_x_12) (str.len (str.++ "A" "C")))) (re.* re.allchar ) (str.to_re (str.++ "B" "C")) (re.* re.allchar ))) (str.in_re (str.substr z_random0_4 (str.len seed0_literal_10) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random0_2 (str.len seed0_literal_3) (str.len (str.++ "B" "C"))))) (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "C" (str.++ "A" "B")))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random0_1 (str.len seed0_literal_10) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "A" (str.++ "A" "B")))) (re.* re.allchar ))))))))
(check-sat)
(exit)