(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_2 () String)
(declare-fun seed0_sigmaStar_5 () String)
(declare-fun seed0_sigmaStar_8 () String)
(declare-fun seed0_x_4 () String)
(declare-fun seed0_epsilon () String)
(declare-fun seed0_sigmaStar_10 () String)
(declare-fun seed0_sigmaStar_12 () String)
(declare-fun seed0_literal_13 () String)
(declare-fun seed0_x_14 () String)
(declare-fun seed0_literal_15 () String)
(declare-fun seed0_x_16 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed1_x () String)
(assert (and (and (= seed0_epsilon "") (or (= seed0_x_4 seed0_epsilon) (= seed0_x_4 seed0_sigmaStar_0)) (= (str.substr z_random1_3 0 (str.len seed0_x_9)) (str.replace seed0_x_4 "\u{2f}\u{2e}\u{28}\u{5c}\u{64}\u{2b}\u{29}\u{2e}\u{2f}" "\u{5f}\u{24}\u{31}\u{2e}")) (= (str.substr z_random0_3 0 (str.indexof z_random0_3 seed1_x (str.len seed0_literal_13))) "\u{20}\u{20}\u{20}\u{20}") (= (str.substr z_random1_0 0 (str.len seed0_x_14)) (str.++ (str.substr z_random1_1 0 (str.len seed0_literal_13)) (str.substr z_random0_2 0 (str.indexof z_random0_2 seed1_x (str.len seed0_sigmaStar_12))))) (= seed0_literal_15 "\u{2e}\u{73}\u{63}\u{6f}\u{72}\u{65}\u{20}\u{3d}\u{20}\u{6e}\u{65}\u{77}\u{20}\u{4f}\u{62}\u{6a}\u{65}\u{63}\u{74}\u{28}\u{29}\u{3b}\u{5c}\u{6e}") (= (str.substr z_random1_2 0 (str.len seed0_x_16)) (str.++ seed0_x_14 (str.substr z_random0_0 0 (str.indexof z_random0_0 (str.++ "C" "A") (str.len seed0_literal_15))))) (str.in_re seed0_x_16 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random0_3 (str.len seed0_literal_13) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random1_3 (str.indexof z_random1_3 (str.++ "C" "A") (str.len seed0_x_9)) (str.len (str.++ "C" "A"))))) (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ))) (str.in_re (str.substr z_random1_2 (str.indexof z_random1_2 seed1_x (str.len seed0_x_16)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random1_1 (str.indexof z_random1_1 (str.++ "A" "B") (str.len seed0_literal_13)) (str.len (str.++ "A" "B"))))) (re.* re.allchar )))))))
(check-sat)
(exit)