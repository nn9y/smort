(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random0_6 String)
(declare-const z_random0_7 String)
(declare-const z_random0_8 String)
(declare-const z_random0_9 String)
(declare-const z_random0_10 String)
(declare-const z_random0_11 String)
(declare-const z_random0_12 String)
(declare-const z_random0_13 String)
(declare-const z_random0_14 String)
(declare-const z_random0_15 String)
(declare-const z_random0_16 String)
(declare-const z_random0_17 String)
(declare-const z_random0_18 String)
(declare-const z_random0_19 String)
(declare-const z_random0_20 String)
(declare-const z_random0_21 String)
(declare-const z_random0_22 String)
(declare-const z_random0_23 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-const z_random1_5 String)
(declare-const z_random1_6 String)
(declare-const z_random1_7 String)
(declare-const z_random1_8 String)
(declare-const z_random1_9 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_literal_1 () String)
(declare-fun seed0_x_2 () String)
(declare-fun seed0_literal_3 () String)
(declare-fun seed0_x_4 () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random1_1 0 (str.len seed0_literal_1)) "\u{3c}\u{74}\u{64}\u{3e}") (= (str.substr z_random1_3 0 (str.len seed0_x_2)) (str.++ (str.substr z_random1_8 0 (str.len seed0_literal_1)) (str.substr z_random0_23 0 (str.indexof z_random0_23 seed1_x (str.len seed0_sigmaStar_0))))) (= (str.substr z_random1_5 0 (str.len seed0_literal_3)) "\u{3c}\u{2f}\u{74}\u{64}\u{3e}") (= (str.substr z_random1_9 0 (str.len seed0_x_4)) (str.++ (str.substr z_random1_6 0 (str.len seed0_x_2)) (str.substr z_random1_7 0 (str.len seed0_literal_3)))) (str.in_re (str.substr z_random1_2 0 (str.len seed0_x_4)) (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (and (not (= (str.in_re (str.substr z_random0_15 (str.len seed0_literal_3) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.substr z_random0_18 (str.len seed0_literal_1) (str.len (str.++ "C" "B"))))) (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ))) (str.in_re (str.substr z_random1_9 (str.indexof z_random1_9 seed1_x (str.len seed0_x_4)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "C" (str.substr z_random0_22 (str.len seed0_x_4) (str.len (str.++ "B" "A")))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_4 (str.indexof z_random1_4 seed1_x (str.len seed0_literal_3)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "C" (str.substr z_random0_20 (str.len seed0_literal_3) (str.len (str.++ "B" "A")))))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random1_8 (str.indexof z_random1_8 seed1_x (str.len seed0_literal_1)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.substr z_random1_6 (str.indexof z_random1_6 (str.++ "C" "B") (str.len seed0_x_2)) (str.len (str.++ "C" "B"))))) (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ))))))))
(check-sat)
(exit)