(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random0_6 String)
(declare-const z_random0_7 String)
(declare-const z_random0_8 String)
(declare-const z_random0_9 String)
(declare-const z_random0_10 String)
(declare-const z_random0_11 String)
(declare-const z_random0_12 String)
(declare-const z_random0_13 String)
(declare-const z_random0_14 String)
(declare-const z_random0_15 String)
(declare-const z_random0_16 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-const z_random1_5 String)
(declare-const z_random1_6 String)
(declare-const z_random1_7 String)
(declare-const z_random1_8 String)
(declare-const z_random1_9 String)
(declare-const z_random1_10 String)
(declare-const z_random1_11 String)
(declare-const z_random1_12 String)
(declare-const z_random1_13 String)
(declare-const z_random1_14 String)
(declare-fun seed0_x () String)
(declare-fun seed1_x () String)
(assert (and (not (= (str.in_re (str.substr z_random1_10 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_9 0 (str.len (str.++ "A" "B")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_13 0 (str.len (str.++ "C" "C")))) (re.* re.allchar ))) (str.in_re (str.substr z_random1_14 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random1_11 0 (str.len (str.++ "C" "C"))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_14 (str.indexof z_random1_14 seed1_x (str.len seed0_x)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_13 (str.indexof z_random1_13 (str.++ "B" "C") (str.len (str.++ "C" "C"))) (str.len (str.++ "B" "C")))) (re.* re.allchar ) (str.to_re (str.substr z_random0_16 (str.len seed0_x) (str.len (str.++ "C" "C")))) (re.* re.allchar ))) (str.in_re (str.substr z_random1_7 (str.indexof z_random1_7 seed1_x (str.len seed0_x)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random1_11 (str.indexof z_random1_11 (str.++ "C" "C") (str.len (str.++ "C" "C"))) (str.len (str.++ "C" "C"))))) (re.* re.allchar )))))))
(check-sat)
(exit)