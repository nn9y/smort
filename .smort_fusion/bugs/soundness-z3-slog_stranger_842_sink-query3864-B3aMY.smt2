(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-fun seed0_sigmaStar_4 () String)
(declare-fun seed0_sigmaStar_6 () String)
(declare-fun seed0_sigmaStar_7 () String)
(declare-fun seed0_literal_8 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed0_literal_5 () String)
(declare-fun seed0_x_10 () String)
(declare-fun seed1_x () String)
(assert (and (and (= seed0_literal_8 "\u{2f}") (= seed0_x_9 (str.++ (str.substr z_random0_1 0 (str.indexof z_random0_1 (str.++ "C" "B") (str.len seed0_sigmaStar_6))) (str.substr z_random1_1 0 (str.len seed0_literal_8)))) (= seed0_literal_5 "") (= (str.substr z_random1_0 0 (str.len seed0_x_10)) (str.++ seed0_x_9 (str.substr z_random0_0 0 (str.indexof z_random0_0 seed1_x (str.len seed0_literal_5))))) (str.in_re seed0_x_10 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar ))))) (and (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "A" (str.substr z_random0_2 (str.len seed0_x_10) (str.len (str.++ "C" "A")))))) (re.* re.allchar ))) (str.in_re (str.substr z_random0_0 (str.len seed0_literal_5) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "A" (str.++ "B" "A")))) (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random0_1 (str.len seed0_sigmaStar_6) (str.len (str.++ "C" "B"))))) (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ))) (str.in_re (str.substr z_random1_0 (str.indexof z_random1_0 seed1_x (str.len seed0_x_10)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random1_1 (str.indexof z_random1_1 (str.++ "B" "B") (str.len seed0_literal_8)) (str.len (str.++ "B" "B"))))) (re.* re.allchar ))))))))
(check-sat)
(exit)