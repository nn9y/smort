(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-const z_random1_5 String)
(declare-const z_random1_6 String)
(declare-const z_random1_7 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_3 () String)
(declare-fun seed0_sigmaStar_5 () String)
(declare-fun seed0_sigmaStar_7 () String)
(declare-fun seed0_sigmaStar_8 () String)
(declare-fun seed0_x_11 () String)
(declare-fun seed0_literal_10 () String)
(declare-fun seed0_x_12 () String)
(declare-fun seed0_literal_14 () String)
(declare-fun seed0_x_15 () String)
(declare-fun seed0_x_16 () String)
(declare-fun seed0_epsilon () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random1_2 0 (str.len seed0_x_11)) (str.substr z_random1_7 0 (str.len seed0_sigmaStar_8))) (= seed0_literal_10 "\u{2e}\u{67}\u{69}\u{66}") (= seed0_x_12 (str.++ (str.substr z_random1_1 0 (str.len seed0_x_11)) (str.substr z_random1_4 0 (str.len seed0_literal_10)))) (= seed0_literal_14 "\u{2f}\u{2f}") (= seed0_x_15 (str.++ (str.substr z_random1_6 0 (str.len seed0_literal_14)) seed0_x_12)) (= (str.substr z_random0_3 0 (str.indexof z_random0_3 (str.++ "C" "B") (str.len seed0_epsilon))) "") (or (= (str.substr z_random1_0 0 (str.len seed0_x_16)) (str.substr z_random0_4 0 (str.indexof z_random0_4 (str.++ "C" "A") (str.len seed0_epsilon)))) (= (str.substr z_random0_1 0 (str.indexof z_random0_1 (str.++ "B" "B") (str.len seed0_x_16))) (str.substr z_random1_5 0 (str.len seed0_x_15)))) (str.in_re seed0_x_16 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar ))))) (and (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_4 (str.len seed0_epsilon) (str.len (str.++ "C" "A")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_4 (str.indexof z_random1_4 (str.++ "B" "B") (str.len seed0_literal_10)) (str.len (str.++ "B" "B")))) (re.* re.allchar ))) (str.in_re (str.substr z_random1_5 (str.indexof z_random1_5 seed1_x (str.len seed0_x_15)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "B" "B"))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_7 (str.indexof z_random1_7 seed1_x (str.len seed0_sigmaStar_8)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_2 (str.indexof z_random1_2 (str.++ "C" "B") (str.len seed0_x_11)) (str.len (str.++ "C" "B")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_6 (str.indexof z_random1_6 (str.++ "B" "B") (str.len seed0_literal_14)) (str.len (str.++ "B" "B")))) (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random0_2 (str.len seed0_literal_14) (str.len (str.++ "B" "B"))))) (re.* re.allchar ))))))))
(check-sat)
(exit)