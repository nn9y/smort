(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_2 () String)
(declare-fun seed0_sigmaStar_3 () String)
(declare-fun seed0_literal_4 () String)
(declare-fun seed0_x_5 () String)
(declare-fun seed0_literal_6 () String)
(declare-fun seed0_x_7 () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random1_2 0 (str.len seed0_literal_4)) "\u{2f}\u{68}\u{6f}\u{72}\u{64}\u{65}") (= (str.substr z_random1_3 0 (str.len seed0_x_5)) (str.++ (str.substr z_random1_0 0 (str.len seed0_sigmaStar_3)) (str.substr z_random1_1 0 (str.len seed0_literal_4)))) (= seed0_literal_6 "\u{2f}\u{6c}\u{69}\u{62}\u{2f}\u{53}\u{65}\u{63}\u{72}\u{65}\u{74}\u{2e}\u{70}\u{68}\u{70}") (= seed0_x_7 (str.++ seed0_x_5 seed0_literal_6)) (str.in_re seed0_x_7 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_2 (str.indexof z_random1_2 seed1_x (str.len seed0_literal_4)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_1 (str.len seed0_sigmaStar_3) (str.len (str.++ "A" "C")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_1 (str.indexof z_random1_1 (str.++ "C" "A") (str.len seed0_literal_4)) (str.len (str.++ "C" "A")))) (re.* re.allchar ))) (str.in_re (str.substr z_random1_3 (str.indexof z_random1_3 seed1_x (str.len seed0_x_5)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "C" "A"))) (re.* re.allchar )))))))
(check-sat)
(exit)