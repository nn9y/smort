(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-const z_random1_5 String)
(declare-const z_random1_6 String)
(declare-const z_random1_7 String)
(declare-const z_random1_8 String)
(declare-const z_random1_9 String)
(declare-const z_random1_10 String)
(declare-const z_random1_11 String)
(declare-const z_random1_12 String)
(declare-const z_random1_13 String)
(declare-const z_random1_14 String)
(declare-const z_random1_15 String)
(declare-const z_random1_16 String)
(declare-const z_random1_17 String)
(declare-const z_random1_18 String)
(declare-const z_random1_19 String)
(declare-fun seed0_x () String)
(declare-fun seed1_x () String)
(assert (and (and (not (= (str.in_re (str.substr z_random1_15 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random1_12 0 (str.len (str.++ "C" "C"))))) (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ))) (str.in_re (str.substr z_random1_2 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_19 0 (str.len (str.++ "B" "C")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_9 0 (str.len (str.++ "C" "C")))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random1_4 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random0_4 0 (str.indexof z_random0_4 (str.++ "C" "A") (str.len (str.++ "C" "C")))))) (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ))) (str.in_re (str.substr z_random1_17 0 (str.len seed0_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_18 0 (str.len (str.++ "B" "C")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_13 0 (str.len (str.++ "C" "A")))) (re.* re.allchar )))))) (not (= (str.in_re (str.substr z_random1_13 (str.indexof z_random1_13 seed1_x (str.len (str.++ "C" "A"))) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random1_19 (str.indexof z_random1_19 (str.++ "C" "A") (str.len (str.++ "B" "C"))) (str.len (str.++ "C" "A"))))) (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ))) (str.in_re (str.substr z_random1_12 (str.indexof z_random1_12 seed1_x (str.len (str.++ "C" "C"))) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random1_18 (str.indexof z_random1_18 (str.++ "A" "B") (str.len (str.++ "B" "C"))) (str.len (str.++ "A" "B"))))) (re.* re.allchar )))))))
(check-sat)
(exit)