(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random0_6 String)
(declare-const z_random0_7 String)
(declare-const z_random0_8 String)
(declare-const z_random1_0 String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_2 () String)
(declare-fun seed1_x () String)
(assert (and (str.in_re (str.substr z_random1_0 0 (str.len seed0_sigmaStar_2)) (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar )))) (and (not (= (str.in_re (str.substr z_random0_4 (str.len seed0_sigmaStar_2) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "A" (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "B" "B") (str.len seed0_sigmaStar_2)) (str.len (str.++ "B" "B")))))) (re.* re.allchar ))) (str.in_re (str.substr z_random0_8 (str.len seed0_sigmaStar_2) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "A" (str.substr z_random0_6 (str.len seed0_sigmaStar_2) (str.len (str.++ "A" "B")))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random0_3 (str.len seed0_sigmaStar_2) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.substr z_random0_2 (str.len seed0_sigmaStar_2) (str.len (str.++ "B" "A"))))) (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ))) (str.in_re (str.substr z_random0_7 (str.len seed0_sigmaStar_2) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_0 (str.len seed0_sigmaStar_2) (str.len (str.++ "A" "B")))) (re.* re.allchar ) (str.to_re (str.substr z_random0_1 (str.len seed0_sigmaStar_2) (str.len (str.++ "A" "A")))) (re.* re.allchar ))))))))
(check-sat)
(exit)