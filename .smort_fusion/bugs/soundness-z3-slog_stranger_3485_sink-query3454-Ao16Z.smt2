(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random1_0 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_x_8 () String)
(declare-fun seed0_epsilon () String)
(declare-fun seed0_literal_3 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed0_literal_10 () String)
(declare-fun seed0_x_11 () String)
(declare-fun seed1_x () String)
(assert (and (and (= seed0_epsilon "") (= (str.substr z_random1_0 0 (str.len seed0_literal_3)) "\u{4e}\u{2f}\u{41}") (or (= (str.substr z_random0_0 0 (str.indexof z_random0_0 seed1_x (str.len seed0_x_8))) seed0_epsilon) (= seed0_x_8 seed0_literal_3)) (= (str.substr z_random0_2 0 (str.indexof z_random0_2 seed1_x (str.len seed0_x_9))) (str.++ seed0_sigmaStar_0 seed0_x_8)) (= (str.substr z_random0_3 0 (str.indexof z_random0_3 seed1_x (str.len seed0_literal_10))) "\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}") (= seed0_x_11 (str.++ seed0_x_9 seed0_literal_10)) (str.in_re seed0_x_11 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random0_3 (str.len seed0_literal_10) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.++ "C" "C"))) (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ))) (str.in_re (str.substr z_random0_2 (str.len seed0_x_9) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random0_1 (str.len seed0_literal_3) (str.len (str.++ "B" "C")))) (re.* re.allchar ) (str.to_re (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "C" "B") (str.len seed0_literal_3)) (str.len (str.++ "C" "B")))) (re.* re.allchar )))))))
(check-sat)
(exit)