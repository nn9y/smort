(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-const z_random1_5 String)
(declare-const z_random1_6 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_3 () String)
(declare-fun seed0_sigmaStar_5 () String)
(declare-fun seed0_literal_6 () String)
(declare-fun seed0_x_7 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed0_sigmaStar_10 () String)
(declare-fun seed0_literal_11 () String)
(declare-fun seed0_x_12 () String)
(declare-fun seed0_x_13 () String)
(declare-fun seed0_literal_14 () String)
(declare-fun seed0_x_15 () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random1_2 0 (str.len seed0_literal_6)) "\u{5b}") (= seed0_x_7 (str.++ seed0_sigmaStar_5 seed0_literal_6)) (= (str.substr z_random1_0 0 (str.len seed0_x_9)) (str.++ seed0_x_7 (str.substr z_random1_4 0 (str.len seed0_sigmaStar_1)))) (= seed0_literal_11 "\u{5d}") (= seed0_x_12 (str.++ (str.substr z_random0_4 0 (str.indexof z_random0_4 (str.++ "A" "B") (str.len seed0_x_9))) (str.substr z_random1_6 0 (str.len seed0_literal_11)))) (= seed0_x_13 (str.++ (str.substr z_random0_3 0 (str.indexof z_random0_3 (str.++ "C" "A") (str.len seed0_x_12))) seed0_sigmaStar_10)) (= seed0_literal_14 "\u{61}\u{76}\u{61}\u{74}\u{61}\u{72}\u{73}\u{2f}") (= (str.substr z_random1_5 0 (str.len seed0_x_15)) (str.++ seed0_literal_14 seed0_x_13)) (str.in_re seed0_x_15 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar ))))) (and (not (= (str.in_re (str.substr z_random0_5 (str.len seed0_sigmaStar_1) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.++ "C" (str.++ "A" "B")))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random0_1 (str.len seed0_x_12) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random1_6 (str.indexof z_random1_6 (str.++ "C" "A") (str.len seed0_literal_11)) (str.len (str.++ "C" "A"))))) (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.++ "C" "A"))) (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ))) (str.in_re (str.substr z_random1_4 (str.indexof z_random1_4 seed1_x (str.len seed0_sigmaStar_1)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" "C")) (re.* re.allchar ) (str.to_re (str.substr z_random1_3 (str.indexof z_random1_3 (str.++ "A" "B") (str.len seed0_sigmaStar_1)) (str.len (str.++ "A" "B")))) (re.* re.allchar ))))))))
(check-sat)
(exit)