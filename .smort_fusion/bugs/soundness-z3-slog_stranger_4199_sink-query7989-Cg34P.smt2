(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random1_0 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_literal_6 () String)
(declare-fun seed0_x_8 () String)
(declare-fun seed0_literal_2 () String)
(declare-fun seed0_literal_3 () String)
(declare-fun seed0_literal_5 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed0_literal_10 () String)
(declare-fun seed0_x_11 () String)
(declare-fun seed0_x_12 () String)
(declare-fun seed1_x () String)
(assert (and (and (= seed0_literal_6 "\u{3c}\u{62}\u{72}\u{3e}\u{5c}\u{6e}\u{3c}\u{69}\u{6e}\u{70}\u{75}\u{74}\u{20}\u{74}\u{79}\u{70}\u{65}\u{3d}\u{27}\u{63}\u{68}\u{65}\u{63}\u{6b}\u{62}\u{6f}\u{78}\u{27}\u{20}\u{6e}\u{61}\u{6d}\u{65}\u{3d}\u{27}\u{6e}\u{6f}\u{74}\u{69}\u{66}\u{79}\u{5f}\u{6d}\u{65}\u{27}\u{20}\u{76}\u{61}\u{6c}\u{75}\u{65}\u{3d}\u{27}\u{31}\u{27}") (= (str.substr z_random0_0 0 (str.indexof z_random0_0 (str.++ "C" "B") (str.len seed0_literal_2))) "") (= seed0_literal_3 "\u{20}\u{63}\u{68}\u{65}\u{63}\u{6b}\u{65}\u{64}") (= seed0_literal_5 "\u{20}\u{63}\u{68}\u{65}\u{63}\u{6b}\u{65}\u{64}") (or (= seed0_x_8 seed0_literal_2) (= (str.substr z_random0_1 0 (str.indexof z_random0_1 seed1_x (str.len seed0_x_8))) seed0_literal_3) (= seed0_x_8 seed0_sigmaStar_0) (= seed0_x_8 seed0_literal_5)) (= seed0_x_9 (str.++ seed0_literal_6 seed0_x_8)) (= seed0_literal_10 "\u{3e}") (= seed0_x_11 (str.++ seed0_x_9 (str.substr z_random1_0 0 (str.len seed0_literal_10)))) (= seed0_x_12 (str.++ seed0_x_11 seed0_sigmaStar_1)) (str.in_re seed0_x_12 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (and (not (= (str.in_re (str.substr z_random0_1 (str.len seed0_x_8) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "A" (str.++ "C" "A")))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "A" "C") (str.len seed0_literal_10)) (str.len (str.++ "A" "C"))))) (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "A" (str.substr z_random0_0 (str.len seed0_literal_2) (str.len (str.++ "C" "B")))))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (re.inter re.allchar  (str.to_re "")) (re.* re.allchar ))))))))
(check-sat)
(exit)