(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random1_0 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_literal_1 () String)
(declare-fun seed0_x_2 () String)
(declare-fun seed0_epsilon () String)
(declare-fun seed0_x_3 () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random0_0 0 (str.indexof z_random0_0 (str.++ "C" "C") (str.len seed0_literal_1))) "\u{2f}\u{74}\u{68}\u{65}\u{6d}\u{65}\u{2f}") (= (str.substr z_random1_0 0 (str.len seed0_epsilon)) "") (or (= seed0_x_2 seed0_epsilon) (= seed0_x_2 seed0_sigmaStar_0)) (= seed0_x_3 (str.++ seed0_literal_1 seed0_x_2)) (str.in_re seed0_x_3 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (and (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "C" (str.++ "C" "C")))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random1_0 (str.indexof z_random1_0 seed1_x (str.len seed0_epsilon)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "C" "C"))) (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "C" (str.substr z_random0_0 (str.len seed0_literal_1) (str.len (str.++ "C" "C")))))) (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.++ "B" (str.++ "B" "A")))) (re.* re.allchar ))))))))
(check-sat)
(exit)