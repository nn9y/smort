(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random1_0 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_literal_3 () String)
(declare-fun seed0_x_4 () String)
(declare-fun seed0_literal_2 () String)
(declare-fun seed0_x_5 () String)
(declare-fun seed0_literal_6 () String)
(declare-fun seed0_x_8 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed0_literal_7 () String)
(declare-fun seed0_x_10 () String)
(declare-fun seed0_literal_11 () String)
(declare-fun seed0_x_12 () String)
(declare-fun seed1_x () String)
(assert (and (and (= seed0_literal_3 "\u{3c}\u{66}\u{72}\u{61}\u{6d}\u{65}\u{73}\u{65}\u{74}") (= seed0_literal_2 "") (or (= seed0_x_4 seed0_literal_2) (= seed0_x_4 seed0_sigmaStar_1)) (= seed0_x_5 (str.++ seed0_literal_3 seed0_x_4)) (= (str.substr z_random0_1 0 (str.indexof z_random0_1 (str.++ "A" "C") (str.len seed0_literal_6))) "\u{3e}") (= seed0_x_8 (str.++ seed0_x_5 seed0_literal_6)) (= seed0_literal_7 "") (or (= seed0_x_9 seed0_sigmaStar_0) (= seed0_x_9 (str.substr z_random1_0 0 (str.len seed0_literal_7)))) (= seed0_x_10 (str.++ seed0_x_8 seed0_x_9)) (= seed0_literal_11 "\u{3c}\u{2f}\u{66}\u{72}\u{61}\u{6d}\u{65}\u{73}\u{65}\u{74}\u{3e}\u{5c}\u{6e}") (= seed0_x_12 (str.++ seed0_x_10 (str.substr z_random0_0 0 (str.indexof z_random0_0 seed1_x (str.len seed0_literal_11))))) (str.in_re seed0_x_12 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (and (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "B") (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random0_1 (str.len seed0_literal_6) (str.len (str.++ "A" "C"))))) (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "A" (str.++ "A" "B")))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random0_0 (str.len seed0_literal_11) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.++ "C" (str.++ "A" "C")))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random0_2 (str.len seed0_literal_7) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "B" (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "B" "A") (str.len seed0_literal_7)) (str.len (str.++ "B" "A")))))) (re.* re.allchar ))))))))
(check-sat)
(exit)