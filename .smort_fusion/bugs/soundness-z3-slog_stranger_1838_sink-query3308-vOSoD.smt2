(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_sigmaStar_4 () String)
(declare-fun seed0_sigmaStar_7 () String)
(declare-fun seed0_sigmaStar_11 () String)
(declare-fun seed0_x_8 () String)
(declare-fun seed0_literal_13 () String)
(declare-fun seed0_x_12 () String)
(declare-fun seed0_x_14 () String)
(declare-fun seed0_literal_15 () String)
(declare-fun seed0_x_16 () String)
(declare-fun seed1_x () String)
(assert (and (and (or (= seed0_x_8 (str.substr z_random1_3 0 (str.len seed0_sigmaStar_1))) (= seed0_x_8 seed0_sigmaStar_7)) (= (str.substr z_random1_4 0 (str.len seed0_x_12)) (str.replace (str.substr z_random0_0 0 (str.indexof z_random0_0 (str.++ "B" "C") (str.len seed0_x_8))) "\u{2e}\u{67}\u{69}\u{66}" "")) (= seed0_literal_13 "\u{2f}") (= seed0_x_14 (str.++ seed0_literal_13 seed0_x_12)) (= seed0_literal_15 "\u{2e}\u{67}\u{69}\u{66}") (= seed0_x_16 (str.++ seed0_x_14 (str.substr z_random1_2 0 (str.len seed0_literal_15)))) (str.in_re (str.substr z_random0_1 0 (str.indexof z_random0_1 (str.++ "A" "B") (str.len seed0_x_16))) (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{2f}\u{65}\u{76}\u{69}\u{6c}") (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.substr z_random1_2 (str.indexof z_random1_2 (str.++ "A" "B") (str.len seed0_literal_15)) (str.len (str.++ "A" "B"))))) (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ))) (str.in_re (str.substr z_random1_4 (str.indexof z_random1_4 seed1_x (str.len seed0_x_12)) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_1 (str.indexof z_random1_1 (str.++ "A" "A") (str.len seed0_literal_15)) (str.len (str.++ "A" "A")))) (re.* re.allchar ) (str.to_re (str.substr z_random0_0 (str.len seed0_x_8) (str.len (str.++ "B" "C")))) (re.* re.allchar )))))))
(check-sat)
(exit)