(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-const z_random1_4 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_literal_2 () String)
(declare-fun seed0_x_3 () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random1_2 0 (str.len seed0_literal_2)) "\u{5c}\u{74}") (= (str.substr z_random1_0 0 (str.len seed0_x_3)) (str.++ seed0_sigmaStar_0 (str.substr z_random1_3 0 (str.len seed0_literal_2)))) (str.in_re (str.substr z_random1_4 0 (str.len seed0_x_3)) (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (and (not (= (str.in_re (str.substr z_random0_0 (str.len seed0_x_3) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" "A")) (re.* re.allchar ) (str.to_re (str.substr z_random1_3 (str.indexof z_random1_3 (str.++ "B" "C") (str.len seed0_literal_2)) (str.len (str.++ "B" "C")))) (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "A" (str.substr z_random1_1 (str.indexof z_random1_1 (str.++ "B" "C") (str.len seed0_x_3)) (str.len (str.++ "B" "C")))))) (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_4 (str.indexof z_random1_4 (str.++ "A" "A") (str.len seed0_x_3)) (str.len (str.++ "A" "A")))) (re.* re.allchar ) (str.to_re (str.++ "A" "B")) (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "A" (str.substr z_random1_2 (str.indexof z_random1_2 (str.++ "A" "B") (str.len seed0_literal_2)) (str.len (str.++ "A" "B"))))) (re.* re.allchar ))))))))
(check-sat)
(exit)