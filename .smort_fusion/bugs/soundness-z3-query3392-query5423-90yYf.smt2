(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random0_3 String)
(declare-const z_random0_4 String)
(declare-const z_random0_5 String)
(declare-const z_random0_6 String)
(declare-const z_random0_7 String)
(declare-const z_random0_8 String)
(declare-const z_random0_9 String)
(declare-const z_random0_10 String)
(declare-const z_random0_11 String)
(declare-const z_random0_12 String)
(declare-const z_random0_13 String)
(declare-const z_random0_14 String)
(declare-const z_random0_15 String)
(declare-const z_random1_0 String)
(declare-fun seed0_x () String)
(declare-fun seed1_x () String)
(assert (and (not (= (str.in_re (str.substr z_random0_12 0 (str.indexof z_random0_12 seed1_x (str.len seed0_x))) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random0_15 0 (str.indexof z_random0_15 (str.++ "A" "C") (str.len (str.++ "A" "C")))))) (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ))) (str.in_re (str.substr z_random0_6 0 (str.indexof z_random0_6 (str.++ "A" "C") (str.len seed0_x))) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_0 0 (str.len (str.++ "B" "A")))) (re.* re.allchar ) (str.to_re (str.substr z_random0_13 0 (str.indexof z_random0_13 (str.++ "B" "B") (str.len (str.++ "C" "C"))))) (re.* re.allchar ))))) (and (not (= (str.in_re (str.substr z_random0_7 (str.len seed0_x) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "C" (str.substr z_random0_10 (str.len seed0_x) (str.len (str.++ "B" "B")))))) (re.* re.allchar ))) (str.in_re (str.substr z_random0_12 (str.len seed0_x) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "B" (str.substr z_random0_15 (str.len (str.++ "A" "C")) (str.len (str.++ "A" "C")))))) (re.* re.allchar ))))) (not (= (str.in_re (str.substr z_random0_3 (str.len (str.++ "B" "A")) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "B" (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "B" "B") (str.len (str.++ "B" "A"))) (str.len (str.++ "B" "B")))))) (re.* re.allchar ) re.allchar  (re.* re.allchar ))) (str.in_re (str.substr z_random0_8 (str.len (str.++ "C" "C")) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (re.++ (str.to_re (str.++ "B" (str.substr z_random0_11 (str.len (str.++ "A" "C")) (str.len (str.++ "B" "B"))))) re.allchar ) (re.* re.allchar ))))))))
(check-sat)
(exit)