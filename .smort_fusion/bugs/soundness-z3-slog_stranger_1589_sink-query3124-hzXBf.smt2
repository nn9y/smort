(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random0_1 String)
(declare-const z_random0_2 String)
(declare-const z_random1_0 String)
(declare-const z_random1_1 String)
(declare-const z_random1_2 String)
(declare-const z_random1_3 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_x_8 () String)
(declare-fun seed0_epsilon () String)
(declare-fun seed0_literal_2 () String)
(declare-fun seed0_literal_1 () String)
(declare-fun seed0_literal_3 () String)
(declare-fun seed0_x_9 () String)
(declare-fun seed1_x () String)
(assert (and (and (= (str.substr z_random1_3 0 (str.len seed0_epsilon)) "") (= seed0_literal_2 "") (= seed0_literal_1 "") (or (= (str.substr z_random1_2 0 (str.len seed0_x_8)) seed0_epsilon) (= seed0_x_8 seed0_literal_2) (= (str.substr z_random0_1 0 (str.indexof z_random0_1 seed1_x (str.len seed0_x_8))) seed0_literal_1) (= (str.substr z_random1_1 0 (str.len seed0_x_8)) seed0_sigmaStar_0)) (= (str.substr z_random0_2 0 (str.indexof z_random0_2 seed1_x (str.len seed0_literal_3))) "\u{20}\u{20}\u{20}\u{20}") (= seed0_x_9 (str.++ seed0_x_8 seed0_literal_3)) (str.in_re (str.substr z_random1_0 0 (str.len seed0_x_9)) (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.substr z_random1_3 (str.indexof z_random1_3 (str.++ "A" "B") (str.len seed0_epsilon)) (str.len (str.++ "A" "B")))) (re.* re.allchar ) (str.to_re (str.++ "C" "A")) (re.* re.allchar ))) (str.in_re (str.substr z_random0_2 (str.len seed0_literal_3) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "B" (str.substr z_random1_2 (str.indexof z_random1_2 (str.++ "C" "A") (str.len seed0_x_8)) (str.len (str.++ "C" "A"))))) (re.* re.allchar )))))))
(check-sat)
(exit)