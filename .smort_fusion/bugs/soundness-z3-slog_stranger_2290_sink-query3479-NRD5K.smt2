(set-logic ALL)
(declare-const z_random0_0 String)
(declare-const z_random1_0 String)
(declare-fun seed0_sigmaStar_0 () String)
(declare-fun seed0_sigmaStar_1 () String)
(declare-fun seed0_literal_6 () String)
(declare-fun seed0_x_8 () String)
(declare-fun seed0_literal_9 () String)
(declare-fun seed0_x_10 () String)
(declare-fun seed0_literal_7 () String)
(declare-fun seed0_x_11 () String)
(declare-fun seed0_literal_12 () String)
(declare-fun seed0_x_13 () String)
(declare-fun seed1_x () String)
(assert (and (and (= seed0_literal_6 "\u{3c}\u{61}\u{20}\u{68}\u{72}\u{65}\u{66}\u{3d}\u{22}\u{2f}\u{62}\u{6c}\u{6f}\u{67}\u{2f}\u{65}\u{64}\u{69}\u{74}\u{2e}\u{70}\u{68}\u{70}\u{3f}\u{65}\u{64}\u{69}\u{74}\u{69}\u{64}\u{3d}\u{26}\u{61}\u{6d}\u{70}\u{3b}\u{73}\u{65}\u{73}\u{73}\u{6b}\u{65}\u{79}\u{3d}") (= seed0_x_8 (str.++ seed0_literal_6 (str.substr z_random0_0 0 (str.indexof z_random0_0 seed1_x (str.len seed0_sigmaStar_1))))) (= seed0_literal_9 "\u{22}\u{3e}") (= seed0_x_10 (str.++ (str.substr z_random1_0 0 (str.len seed0_x_8)) seed0_literal_9)) (= seed0_literal_7 "\u{65}\u{64}\u{69}\u{74}") (= seed0_x_11 (str.++ seed0_x_10 seed0_literal_7)) (= seed0_literal_12 "\u{3c}\u{2f}\u{61}\u{3e}") (= seed0_x_13 (str.++ seed0_x_11 seed0_literal_12)) (str.in_re seed0_x_13 (re.++ (re.* re.allchar ) (re.++ (str.to_re "\u{5c}\u{3c}\u{53}\u{43}\u{52}\u{49}\u{50}\u{54}") (re.* re.allchar ))))) (and (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "C") (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "C" "B"))) (re.* re.allchar ))) (str.in_re (str.substr z_random0_0 (str.len seed0_sigmaStar_1) (str.len seed1_x)) (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "C" (str.++ "C" (str.++ "C" "B")))) (re.* re.allchar ))))) (not (= (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re "A") (re.* re.allchar ) (str.to_re (str.++ "C" (str.substr z_random1_0 (str.indexof z_random1_0 (str.++ "C" "B") (str.len seed0_x_8)) (str.len (str.++ "C" "B"))))) (re.* re.allchar ))) (str.in_re seed1_x (re.++ (re.* re.allchar ) re.allchar  (re.* re.allchar ) re.allchar  (re.* re.allchar ) (str.to_re (str.++ "A" (str.++ "C" (str.++ "C" "B")))) (re.* re.allchar ))))))))
(check-sat)
(exit)