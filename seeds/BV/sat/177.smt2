(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V5 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V1 () Bool)
(assert
 (let
 (($x731
   (forall
    ((V4_0 (_ BitVec 32)) (V5_0 (_ BitVec 32)) 
     (V2_0 (_ BitVec 32)) (MW_S1_V4 Bool) 
     (MW_S1_V5 Bool) (MW_S1_V2 Bool) 
     (MW_S1_V1 Bool) (S1_V4_!146 (_ BitVec 32)) 
     (S1_V4_!150 (_ BitVec 32)) (S1_V4_!154 (_ BitVec 32)) 
     (S1_V1_!149 (_ BitVec 32)) (S1_V1_!153 (_ BitVec 32)) 
     (S1_V1_!157 (_ BitVec 32)) (S1_V2_!148 (_ BitVec 32)) 
     (S1_V2_!152 (_ BitVec 32)) (S1_V2_!156 (_ BitVec 32)) 
     (S1_V5_!147 (_ BitVec 32)) (S1_V5_!151 (_ BitVec 32)) 
     (S1_V5_!155 (_ BitVec 32)))
    (let
    (($x1023
      (and (= (ite MW_S1_V4 S1_V4_!146 V4_0) (ite MW_S1_V4 S1_V4_!154 V4_0))
      (= (ite MW_S1_V5 S1_V5_!147 V5_0) (ite MW_S1_V5 S1_V5_!155 V5_0))
      (= (ite MW_S1_V2 S1_V2_!148 V2_0) (ite MW_S1_V2 S1_V2_!156 V2_0))
      (= (ite MW_S1_V1 S1_V1_!149 (_ bv0 32))
      (bvadd (bvneg (_ bv1 32)) (ite MW_S1_V2 S1_V2_!156 V2_0))))))
    (let
    (($x1033
      (and (not (bvsle V2_0 (_ bv0 32)))
      (bvsge (ite MW_S1_V1 S1_V1_!149 (_ bv0 32))
      (bvadd (bvneg (_ bv1 32)) (ite MW_S1_V2 S1_V2_!148 V2_0))) 
      (bvsge V2_0 (_ bv1 32)) (bvsge V2_0 (_ bv2 32)) 
      (not (bvsle (_ bv3 32) V2_0)) (not (bvsle (ite MW_S1_V2 S1_V2_!156 V2_0) (_ bv0 32))))))
    (let (($x82 (not R_S1_V1)))
    (let
    (($x1058
      (and (or (not R_S1_V4) (= (ite MW_S1_V4 S1_V4_!150 V4_0) V4_0))
      (or (not R_S1_V5) (= (ite MW_S1_V5 S1_V5_!151 V5_0) V5_0))
      (or (not R_S1_V2) (= (ite MW_S1_V2 S1_V2_!152 V2_0) V2_0))
      (or $x82 (= (bvadd (ite MW_S1_V2 S1_V2_!152 V2_0) (bvmul (bvneg (_ bv1 32)) V2_0)) (bvneg (_ bv1 32)))))))
    (let (($x1059 (not $x1058)))
    (let
    (($x967
      (and (or (not R_S1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!150 V4_0)))
      (or (not R_S1_V5) (= V5_0 (ite MW_S1_V5 S1_V5_!151 V5_0)))
      (or (not R_S1_V2) (= V2_0 (ite MW_S1_V2 S1_V2_!152 V2_0)))
      (or $x82 (= (bvneg (_ bv1 32)) (bvadd (ite MW_S1_V2 S1_V2_!152 V2_0) (bvmul (bvneg (_ bv1 32)) V2_0)))))))
    (let (($x957 (not $x967)))
    (let
    (($x1116
      (and (or $x957 (= S1_V4_!146 S1_V4_!154)) 
      (= S1_V4_!150 S1_V4_!146) 
      (or $x957 (= S1_V4_!150 S1_V4_!154))
      (or $x957 (= S1_V1_!149 S1_V1_!157)) 
      (= S1_V1_!153 S1_V1_!149) 
      (or $x957 (= S1_V1_!153 S1_V1_!157)) 
      (= S1_V2_!148 S1_V2_!152) 
      (or $x1059 (= S1_V2_!156 S1_V2_!148))
      (or $x1059 (= S1_V2_!156 S1_V2_!152)) 
      (= S1_V5_!151 S1_V5_!147) 
      (or $x1059 (= S1_V5_!155 S1_V5_!147))
      (or $x1059 (= S1_V5_!155 S1_V5_!151)) 
      (or (not MW_S1_V5) W_S1_V5) 
      (or (not MW_S1_V2) W_S1_V2) 
      (not MW_S1_V1)))) (or (not $x1116) (not $x1033) $x1023))))))))))))
 (let
 (($x816 (not (or R_S1_V4 (and W_S1_V5 R_S1_V5) (and W_S1_V2 R_S1_V2)))))
 (let (($x522 (not W_S1_V1)))
 (and $x522 W_S1_V4 (= DISJ_W_S1_R_S1 $x816) $x731)))))
(check-sat)
(exit)

