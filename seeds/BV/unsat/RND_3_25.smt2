(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info :source |
   Scholl, Christoph; Disch, Stefan; Pigorsch, Florian and Kupferschmid, 
   Stefan; Using an SMT Solver and Craig Interpolation to Detect and Remove 
   Redundant Linear Constraints in Representations of Non-Convex Polyhedra.
   Proceedings of 6th International Workshop on Satisfiability Modulo
   Theories, Princeton, USA, July 2008.
   <http://abs.informatik.uni-freiburg.de/smtbench/>

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)
(declare-fun y3 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun y2 () (_ BitVec 32))
(assert (and (forall ((?y3 (_ BitVec 32))) (let ((?v_0 (bvmul (bvneg (_ bv42 32)) x1))) (or (and (or (and (and (bvslt (bvmul (bvneg (_ bv33 32)) x1) (_ bv94 32)) (bvsgt (bvmul (bvneg (_ bv73 32)) ?y3) (bvneg (_ bv64 32)))) (not (= (bvadd (bvmul (_ bv75 32) ?y3) (bvmul (_ bv94 32) x1)) (_ bv87 32)))) (and (or (bvslt (bvmul (_ bv8 32) ?y3) (_ bv49 32)) (bvsle (bvadd (bvmul (_ bv93 32) ?y3) (bvmul (bvneg (_ bv19 32)) x1)) (bvneg (_ bv12 32)))) (and (not (= (bvmul (bvneg (_ bv78 32)) x1) (_ bv68 32))) (bvsle (bvadd (bvmul (_ bv2 32) ?y3) (bvmul (bvneg (_ bv58 32)) x1)) (_ bv0 32))))) (or (or (or (bvsge (bvmul (bvneg (_ bv44 32)) x1) (bvneg (_ bv14 32))) (bvsle (bvadd (bvmul (bvneg (_ bv23 32)) ?y3) (bvmul (bvneg (_ bv64 32)) x1)) (_ bv0 32))) (and (bvslt (bvmul (_ bv73 32) ?y3) (bvneg (_ bv2 32))) (bvsgt (bvmul (bvneg (_ bv43 32)) x1) (_ bv77 32)))) (or (and (= (bvadd (bvmul (bvneg (_ bv48 32)) ?y3) (bvmul (_ bv82 32) x1)) (bvneg (_ bv63 32))) (= (bvmul (_ bv78 32) x1) (_ bv42 32))) (bvsge (bvmul (bvneg (_ bv36 32)) ?y3) (bvneg (_ bv5 32)))))) (and (or (or (bvsle (bvadd (bvmul (bvneg (_ bv35 32)) ?y3) (bvmul (_ bv93 32) x1)) (_ bv14 32)) (bvslt (bvmul (_ bv50 32) x1) (bvneg (_ bv35 32)))) (and (bvsle (bvmul (_ bv99 32) ?y3) (_ bv83 32)) (bvslt (bvadd (bvmul (bvneg (_ bv1 32)) ?y3) (bvmul (bvneg (_ bv81 32)) x1)) (_ bv0 32)))) (or (and (bvslt (bvmul (bvneg (_ bv39 32)) x1) (_ bv88 32)) (bvslt (bvadd (bvmul (bvneg (_ bv9 32)) ?y3) (bvmul (bvneg (_ bv17 32)) x1)) (_ bv73 32))) (or (and (bvsge (bvmul (bvneg (_ bv30 32)) ?y3) (_ bv0 32)) (bvslt (bvadd (bvmul (_ bv95 32) ?y3) (bvmul (bvneg (_ bv88 32)) x1)) (bvneg (_ bv80 32)))) (or (bvsge ?v_0 (_ bv0 32)) (bvsle ?v_0 (_ bv0 32))))))))) (exists ((?y2 (_ BitVec 32))) (forall ((?y3 (_ BitVec 32))) (let ((?v_1 (bvmul (_ bv68 32) x1)) (?v_3 (bvmul (_ bv33 32) ?y2)) (?v_4 (bvmul (_ bv55 32) ?y3)) (?v_2 (bvmul (bvneg (_ bv59 32)) ?y3))) (and (or (or (not (= (bvadd (bvadd (bvmul (bvneg (_ bv55 32)) ?y3) (bvmul (bvneg (_ bv95 32)) ?y2)) ?v_1) (bvneg (_ bv31 32)))) (= (bvadd (bvmul (bvneg (_ bv70 32)) ?y3) (bvmul (bvneg (_ bv96 32)) ?y2)) (bvneg (_ bv96 32)))) (or (or (or (bvslt (bvmul (bvneg (_ bv75 32)) ?y3) (_ bv31 32)) (bvsgt (bvadd (bvmul (bvneg (_ bv86 32)) ?y3) ?v_1) (bvneg (_ bv58 32)))) (or (= (bvadd (bvadd ?v_2 (bvmul (_ bv30 32) ?y2)) (bvmul (bvneg (_ bv16 32)) x1)) (_ bv6 32)) (bvsle (bvadd (bvadd (bvmul (_ bv58 32) ?y3) (bvmul (bvneg (_ bv85 32)) ?y2)) (bvmul (bvneg (_ bv58 32)) x1)) (_ bv0 32)))) (or (or (bvsge (bvadd (bvmul (_ bv85 32) ?y2) (bvmul (bvneg (_ bv34 32)) x1)) (_ bv67 32)) (not (= (bvmul (bvneg (_ bv36 32)) ?y2) (_ bv0 32)))) (or (bvslt (bvadd (bvmul (bvneg (_ bv30 32)) ?y3) (bvmul (_ bv37 32) x1)) (bvneg (_ bv26 32))) (bvslt (bvadd (bvmul (_ bv5 32) ?y3) (bvmul (_ bv55 32) x1)) (_ bv97 32)))))) (and (and (and (or (= (bvadd (bvadd (bvmul (_ bv25 32) ?y3) ?v_3) (bvmul (_ bv82 32) x1)) (bvneg (_ bv21 32))) (bvsgt (bvmul (_ bv21 32) ?y3) (_ bv32 32))) (or (bvsle (bvadd (bvmul (bvneg (_ bv13 32)) ?y3) (bvmul (bvneg (_ bv84 32)) ?y2)) (bvneg (_ bv54 32))) (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv3 32)) ?y3) (bvmul (bvneg (_ bv72 32)) ?y2)) (bvmul (bvneg (_ bv82 32)) x1)) (_ bv40 32)))) (or (bvslt (bvadd (bvadd (bvmul (_ bv66 32) ?y3) (bvmul (_ bv14 32) ?y2)) (bvmul (bvneg (_ bv24 32)) x1)) (bvneg (_ bv23 32))) (bvsle (bvadd (bvmul (bvneg (_ bv56 32)) ?y3) (bvmul (bvneg (_ bv26 32)) x1)) (_ bv44 32)))) (and (or (not (= (bvadd (bvmul (bvneg (_ bv34 32)) ?y2) (bvmul (bvneg (_ bv69 32)) x1)) (_ bv81 32))) (not (= (bvadd (bvadd (bvmul (bvneg (_ bv76 32)) ?y3) (bvmul (_ bv51 32) ?y2)) (bvmul (_ bv54 32) x1)) (_ bv63 32)))) (and (and (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv64 32)) ?y3) (bvmul (_ bv68 32) ?y2)) (bvmul (_ bv51 32) x1)) (_ bv0 32)) (bvsgt (bvadd (bvadd ?v_4 (bvmul (bvneg (_ bv8 32)) ?y2)) (bvmul (bvneg (_ bv59 32)) x1)) (_ bv2 32))) (or (bvslt (bvadd (bvadd ?v_2 ?v_3) (bvmul (bvneg (_ bv20 32)) x1)) (bvneg (_ bv20 32))) (bvslt (bvadd (bvadd ?v_4 (bvmul (bvneg (_ bv11 32)) ?y2)) (bvmul (_ bv49 32) x1)) (_ bv28 32))))))))))))
(check-sat)
(exit)
