(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info :source |
   Scholl, Christoph; Disch, Stefan; Pigorsch, Florian and Kupferschmid, 
   Stefan; Using an SMT Solver and Craig Interpolation to Detect and Remove 
   Redundant Linear Constraints in Representations of Non-Convex Polyhedra.
   Proceedings of 6th International Workshop on Satisfiability Modulo
   Theories, Princeton, USA, July 2008.
   <http://abs.informatik.uni-freiburg.de/smtbench/>

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)
(declare-fun y1 () (_ BitVec 32))
(declare-fun y2 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(declare-fun y3 () (_ BitVec 32))
(assert (and (and (exists ((?y1 (_ BitVec 32))) (and (or (exists ((?y2 (_ BitVec 32))) (and (and (bvsge (bvadd (bvmul (_ bv14 32) ?y2) (bvmul (bvneg (_ bv86 32)) ?y1)) (_ bv19 32)) (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv23 32)) ?y2) (bvmul (bvneg (_ bv57 32)) ?y1)) (bvmul (bvneg (_ bv60 32)) x1)) (bvneg (_ bv80 32)))) (exists ((?y3 (_ BitVec 32))) (bvslt (bvadd (bvadd (bvadd (bvmul (bvneg (_ bv86 32)) ?y3) (bvmul (_ bv50 32) ?y2)) (bvmul (bvneg (_ bv80 32)) ?y1)) (bvmul (_ bv32 32) x1)) (bvneg (_ bv50 32)))))) (and (not (= (bvadd (bvmul (_ bv63 32) ?y1) (bvmul (bvneg (_ bv98 32)) x1)) (_ bv69 32))) (bvsgt (bvadd (bvmul (_ bv15 32) ?y1) (bvmul (bvneg (_ bv74 32)) x1)) (_ bv0 32)))) (exists ((?y2 (_ BitVec 32))) (exists ((?y3 (_ BitVec 32))) (let ((?v_0 (bvmul (bvneg (_ bv22 32)) x1))) (or (and (bvsle (bvadd (bvadd (bvadd (bvmul (_ bv50 32) ?y3) (bvmul (_ bv72 32) ?y2)) (bvmul (bvneg (_ bv6 32)) ?y1)) (bvmul (bvneg (_ bv35 32)) x1)) (bvneg (_ bv4 32))) (bvslt (bvadd (bvadd (bvmul (bvneg (_ bv73 32)) ?y2) (bvmul (_ bv88 32) ?y1)) ?v_0) (bvneg (_ bv2 32)))) (or (= (bvadd (bvadd (bvmul (bvneg (_ bv65 32)) ?y3) (bvmul (_ bv65 32) ?y1)) ?v_0) (bvneg (_ bv4 32))) (bvsge (bvadd (bvadd (bvmul (_ bv20 32) ?y3) (bvmul (bvneg (_ bv42 32)) ?y2)) (bvmul (_ bv62 32) x1)) (bvneg (_ bv92 32)))))))))) (forall ((?y1 (_ BitVec 32))) (exists ((?y3 (_ BitVec 32))) (and (not (= (bvmul (bvneg (_ bv86 32)) ?y1) (bvneg (_ bv90 32)))) (= (bvmul (bvneg (_ bv47 32)) ?y3) (_ bv0 32)))))) (or (or (exists ((?y1 (_ BitVec 32))) (forall ((?y2 (_ BitVec 32))) (or (and (or (bvsle (bvadd (bvmul (bvneg (_ bv23 32)) ?y2) (bvmul (bvneg (_ bv20 32)) ?y1)) (bvneg (_ bv91 32))) (= (bvadd (bvadd (bvmul (bvneg (_ bv70 32)) ?y2) (bvmul (bvneg (_ bv98 32)) ?y1)) (bvmul (_ bv33 32) x1)) (_ bv0 32))) (forall ((?y3 (_ BitVec 32))) (not (= (bvadd (bvadd (bvmul (_ bv32 32) ?y3) (bvmul (bvneg (_ bv25 32)) ?y2)) (bvmul (_ bv23 32) ?y1)) (bvneg (_ bv54 32)))))) (and (forall ((?y3 (_ BitVec 32))) (bvslt (bvadd (bvadd (bvadd (bvmul (bvneg (_ bv31 32)) ?y3) (bvmul (_ bv67 32) ?y2)) (bvmul (bvneg (_ bv2 32)) ?y1)) (bvmul (_ bv4 32) x1)) (_ bv82 32))) (forall ((?y3 (_ BitVec 32))) (not (= (bvadd (bvadd (bvmul (_ bv75 32) ?y3) (bvmul (bvneg (_ bv62 32)) ?y2)) (bvmul (_ bv24 32) ?y1)) (_ bv33 32)))))))) (exists ((?y1 (_ BitVec 32))) (forall ((?y3 (_ BitVec 32))) (or (or (= (bvadd (bvmul (bvneg (_ bv79 32)) ?y3) (bvmul (bvneg (_ bv17 32)) ?y1)) (bvneg (_ bv33 32))) (not (= (bvadd (bvmul (bvneg (_ bv41 32)) ?y3) (bvmul (bvneg (_ bv61 32)) x1)) (_ bv53 32)))) (or (bvsle (bvadd (bvmul (_ bv79 32) ?y3) (bvmul (_ bv14 32) x1)) (_ bv0 32)) (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv5 32)) ?y3) (bvmul (_ bv11 32) ?y1)) (bvmul (_ bv23 32) x1)) (_ bv40 32))))))) (forall ((?y1 (_ BitVec 32))) (and (and (and (exists ((?y3 (_ BitVec 32))) (bvsle (bvadd (bvmul (bvneg (_ bv68 32)) ?y3) (bvmul (_ bv27 32) x1)) (bvneg (_ bv78 32)))) (exists ((?y3 (_ BitVec 32))) (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv92 32)) ?y3) (bvmul (_ bv5 32) ?y1)) (bvmul (_ bv61 32) x1)) (_ bv97 32)))) (exists ((?y3 (_ BitVec 32))) (and (bvsle (bvadd (bvadd (bvmul (bvneg (_ bv25 32)) ?y3) (bvmul (bvneg (_ bv11 32)) ?y1)) (bvmul (_ bv85 32) x1)) (bvneg (_ bv21 32))) (bvsge (bvadd (bvmul (bvneg (_ bv87 32)) ?y3) (bvmul (_ bv37 32) ?y1)) (_ bv79 32))))) (forall ((?y2 (_ BitVec 32))) (or (exists ((?y3 (_ BitVec 32))) (and (not (= (bvadd (bvadd (bvmul (_ bv51 32) ?y3) (bvmul (_ bv48 32) ?y1)) (bvmul (bvneg (_ bv85 32)) x1)) (_ bv3 32))) (bvsge (bvadd (bvadd (bvmul (bvneg (_ bv69 32)) ?y3) (bvmul (bvneg (_ bv27 32)) ?y2)) (bvmul (_ bv71 32) x1)) (_ bv4 32)))) (or (and (bvsle (bvadd (bvadd (bvmul (bvneg (_ bv87 32)) ?y2) (bvmul (bvneg (_ bv40 32)) ?y1)) (bvmul (bvneg (_ bv10 32)) x1)) (_ bv92 32)) (bvsle (bvadd (bvmul (bvneg (_ bv90 32)) ?y1) (bvmul (bvneg (_ bv18 32)) x1)) (bvneg (_ bv79 32)))) (or (bvsgt (bvadd (bvmul (_ bv23 32) ?y2) (bvmul (bvneg (_ bv65 32)) ?y1)) (_ bv0 32)) (bvsle (bvadd (bvmul (bvneg (_ bv71 32)) ?y2) (bvmul (_ bv15 32) x1)) (_ bv38 32)))))))))))
(check-sat)
(exit)
