(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun W_S1_V3 () Bool)
(assert
 (let
 (($x1022
   (forall
    ((V3_0 (_ BitVec 32)) (V2_0 (_ BitVec 32)) 
     (V4_0 (_ BitVec 32)) (MW_S1_V1 Bool) 
     (MW_S1_V3 Bool) (MW_S1_V2 Bool) 
     (MW_S1_V4 Bool) (S1_V3_!73 (_ BitVec 32)) 
     (S1_V3_!77 (_ BitVec 32)) (S1_V3_!81 (_ BitVec 32)) 
     (S1_V4_!75 (_ BitVec 32)) (S1_V4_!79 (_ BitVec 32)) 
     (S1_V4_!83 (_ BitVec 32)) (S1_V1_!72 (_ BitVec 32)) 
     (S1_V1_!76 (_ BitVec 32)) (S1_V1_!80 (_ BitVec 32)) 
     (S1_V2_!74 (_ BitVec 32)) (S1_V2_!78 (_ BitVec 32)) 
     (S1_V2_!82 (_ BitVec 32)))
    (let
    (($x1003
      (= (ite MW_S1_V1 S1_V1_!72 (_ bv0 32))
      (ite MW_S1_V1 S1_V1_!80 (bvadd (_ bv1 32) (ite MW_S1_V1 S1_V1_!76 (_ bv0 32)))))))
    (let
    (($x1002
      (and $x1003
      (= (ite MW_S1_V3 S1_V3_!73 V3_0) (ite MW_S1_V3 S1_V3_!81 V3_0))
      (= (ite MW_S1_V2 S1_V2_!74 V2_0) (ite MW_S1_V2 S1_V2_!82 V2_0))
      (= (ite MW_S1_V4 S1_V4_!75 V4_0) (ite MW_S1_V4 S1_V4_!83 V4_0)))))
    (let
    (($x619
      (bvsge (ite MW_S1_V1 S1_V1_!80 (bvadd (_ bv1 32) (ite MW_S1_V1 S1_V1_!76 (_ bv0 32))))
      (bvadd (bvneg (_ bv1 32)) (ite MW_S1_V2 S1_V2_!82 V2_0)))))
    (let
    (($x626
      (and (not (bvsle V2_0 (_ bv0 32)))
      (bvsge (ite MW_S1_V1 S1_V1_!72 (_ bv0 32)) (bvadd (bvneg (_ bv1 32)) (ite MW_S1_V2 S1_V2_!74 V2_0)))
      $x619)))
    (let
    (($x685
      (and (or (not R_S1_V1) (= (bvneg (_ bv1 32)) (ite MW_S1_V1 S1_V1_!76 (_ bv0 32))))
      (or (not R_S1_V3) (= V3_0 (ite MW_S1_V3 S1_V3_!77 V3_0)))
      (or (not R_S1_V2) (= V2_0 (ite MW_S1_V2 S1_V2_!78 V2_0)))
      (or (not R_S1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!79 V4_0))))))
    (let (($x687 (not $x685)))
    (let
    (($x604
      (and (or (not R_S1_V1) (= (ite MW_S1_V1 S1_V1_!76 (_ bv0 32)) (bvneg (_ bv1 32))))
      (or (not R_S1_V3) (= (ite MW_S1_V3 S1_V3_!77 V3_0) V3_0))
      (or (not R_S1_V2) (= (ite MW_S1_V2 S1_V2_!78 V2_0) V2_0))
      (or (not R_S1_V4) (= (ite MW_S1_V4 S1_V4_!79 V4_0) V4_0)))))
    (let (($x660 (not $x604)))
    (let
    (($x667
      (and (= S1_V3_!73 S1_V3_!77) 
      (or $x660 (= S1_V3_!81 S1_V3_!73)) 
      (or $x660 (= S1_V3_!81 S1_V3_!77)) 
      (= S1_V4_!75 S1_V4_!79) 
      (or $x660 (= S1_V4_!83 S1_V4_!75)) 
      (or $x660 (= S1_V4_!83 S1_V4_!79)) 
      (= S1_V1_!72 S1_V1_!76) 
      (or $x687 (= S1_V1_!72 S1_V1_!80)) 
      (or $x660 (= S1_V1_!80 S1_V1_!76)) 
      (or $x687 (= S1_V2_!74 S1_V2_!82)) 
      (= S1_V2_!78 S1_V2_!74) 
      (or $x687 (= S1_V2_!78 S1_V2_!82)) 
      (or (not MW_S1_V1) W_S1_V1) 
      (or (not MW_S1_V2) W_S1_V2) 
      (or (not MW_S1_V4) W_S1_V4)))) 
    (or (not $x667) (not $x626) $x1002)))))))))))))
 (let
 (($x25
   (or (and W_S1_V1 R_S1_V1) R_S1_V3 
   (and W_S1_V2 R_S1_V2) (and W_S1_V4 R_S1_V4))))
 (let (($x27 (= DISJ_W_S1_R_S1 (not $x25)))) (and W_S1_V3 $x27 $x1022)))))
(check-sat)
(exit)

