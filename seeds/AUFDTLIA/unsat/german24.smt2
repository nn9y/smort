(set-info :smt-lib-version 2.6)
(set-logic AUFDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: DVF, converted to v2.6 by CVC4
Application: Verification of security protocols and design architectures
Target solver: CVC4, Z3, Yices
Publications: "Finite Model Finding in SMT" by Andrew Reynolds, Cesare Tinelli, Amit Goel, and Sava Krstic, CAV 2013.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((UNIT 0)) (((Unit))
))
(declare-datatypes ((BOOL 0)) (((Truth) (Falsity))
))
(declare-sort node$type 0)
(declare-sort data$type 0)
(declare-datatypes ((cache_state$type 0)) (((invalid) (shared) (exclusive))
))
(declare-datatypes ((cache$type 0)) (((c_cache$type (c_state cache_state$type) (c_data data$type)))
))
(declare-datatypes ((msg_cmd$type 0)) (((empty) (reqs) (reqe) (inv) (invack) (gnts) (gnte))
))
(declare-datatypes ((msg$type 0)) (((c_msg$type (m_cmd msg_cmd$type) (m_data data$type)))
))
(declare-fun dummy () data$type)
(declare-fun chan2$1 () (Array node$type msg$type))
(declare-fun cache$1 () (Array node$type cache$type))
(declare-fun cache$2 () (Array node$type cache$type))
(declare-fun recv_gnt_shared$i () node$type)
(declare-fun cache () (Array node$type cache$type))
(declare-fun exgntd () BOOL)
(declare-fun shrset () (Array node$type BOOL))
(declare-fun chan2 () (Array node$type msg$type))
(declare-fun auxnode () node$type)
(assert (not (=> (forall ((n node$type)) (=> (= exgntd Truth) (= (select shrset n) (ite (= n auxnode) Truth Falsity))) ) (=> (= (m_cmd (select chan2 recv_gnt_shared$i)) gnts) (=> (= cache$2 (store cache recv_gnt_shared$i (c_cache$type shared (c_data (select cache recv_gnt_shared$i))))) (=> (= cache$1 (store cache$2 recv_gnt_shared$i (c_cache$type (c_state (select cache$2 recv_gnt_shared$i)) (m_data (select chan2 recv_gnt_shared$i))))) (=> (= chan2$1 (store chan2 recv_gnt_shared$i (c_msg$type empty (m_data (select chan2 recv_gnt_shared$i))))) (forall ((n node$type)) (=> (= exgntd Truth) (= (select shrset n) (ite (= n auxnode) Truth Falsity))) ))))))))
(check-sat)
(exit)

