(set-info :smt-lib-version 2.6)
(set-logic AUFDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: DVF, converted to v2.6 by CVC4
Application: Verification of security protocols and design architectures
Target solver: CVC4, Z3, Yices
Publications: "Finite Model Finding in SMT" by Andrew Reynolds, Cesare Tinelli, Amit Goel, and Sava Krstic, CAV 2013.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((UNIT 0)) (((Unit))
))
(declare-datatypes ((BOOL 0)) (((Truth) (Falsity))
))
(declare-sort resource$type 0)
(declare-sort process$type 0)
(declare-fun null () resource$type)
(declare-sort S$t$type 0)
(declare-fun S$empty () S$t$type)
(declare-fun S$mem (process$type S$t$type) BOOL)
(declare-fun S$add (process$type S$t$type) S$t$type)
(declare-fun S$remove (process$type S$t$type) S$t$type)
(declare-fun S$cardinality (S$t$type) Int)
(assert (forall ((e process$type)) (not (= (S$mem e S$empty) Truth)) ))
(assert (forall ((x process$type) (y process$type) (s S$t$type)) (= (S$mem x (S$add y s)) (ite (or (= x y) (= (S$mem x s) Truth)) Truth Falsity)) ))
(assert (forall ((x process$type) (y process$type) (s S$t$type)) (= (S$mem x (S$remove y s)) (ite (and (not (= x y)) (= (S$mem x s) Truth)) Truth Falsity)) ))
(assert (= (S$cardinality S$empty) 0))
(assert (forall ((s S$t$type)) (=> (= (S$cardinality s) 0) (= s S$empty)) ))
(assert (forall ((s S$t$type)) (>= (S$cardinality s) 0) ))
(assert (forall ((x process$type) (s S$t$type)) (= (S$cardinality (S$add x s)) (ite (= (S$mem x s) Truth) (S$cardinality s) (+ (S$cardinality s) 1))) ))
(assert (forall ((x process$type) (s S$t$type)) (= (S$cardinality (S$remove x s)) (ite (= (S$mem x s) Truth) (- (S$cardinality s) 1) (S$cardinality s))) ))
(declare-fun count () (Array resource$type Int))
(declare-fun ref () (Array process$type resource$type))
(declare-fun count$1 () (Array resource$type Int))
(declare-fun handles () (Array resource$type S$t$type))
(declare-fun valid () (Array resource$type BOOL))
(declare-fun create$r () resource$type)
(declare-fun valid$1 () (Array resource$type BOOL))
(declare-fun handles$1 () (Array resource$type S$t$type))
(assert (not (=> (and (forall ((r resource$type)) (=> (and (not (= r null)) (= (select valid r) Truth)) (= (select count r) (S$cardinality (select handles r)))) ) (forall ((p process$type)) (=> (not (= (select ref p) null)) (= (S$mem p (select handles (select ref p))) Truth)) )) (=> (not (= create$r null)) (=> (not (= (select valid create$r) Truth)) (=> (= valid$1 (store valid create$r Truth)) (=> (= count$1 (store count create$r 0)) (=> (= handles$1 (store handles create$r S$empty)) (forall ((r resource$type)) (=> (and (not (= r null)) (= (select valid$1 r) Truth)) (= (select count$1 r) (S$cardinality (select handles$1 r)))) )))))))))
(check-sat)
(exit)

