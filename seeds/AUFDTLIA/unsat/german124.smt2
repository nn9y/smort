(set-info :smt-lib-version 2.6)
(set-logic AUFDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: DVF, converted to v2.6 by CVC4
Application: Verification of security protocols and design architectures
Target solver: CVC4, Z3, Yices
Publications: "Finite Model Finding in SMT" by Andrew Reynolds, Cesare Tinelli, Amit Goel, and Sava Krstic, CAV 2013.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((UNIT 0)) (((Unit))
))
(declare-datatypes ((BOOL 0)) (((Truth) (Falsity))
))
(declare-sort node$type 0)
(declare-sort data$type 0)
(declare-datatypes ((cache_state$type 0)) (((invalid) (shared) (exclusive))
))
(declare-datatypes ((cache$type 0)) (((c_cache$type (c_state cache_state$type) (c_data data$type)))
))
(declare-datatypes ((msg_cmd$type 0)) (((empty) (reqs) (reqe) (inv) (invack) (gnts) (gnte))
))
(declare-datatypes ((msg$type 0)) (((c_msg$type (m_cmd msg_cmd$type) (m_data data$type)))
))
(declare-fun dummy () data$type)
(declare-fun chan2$1 () (Array node$type msg$type))
(declare-fun cache$1 () (Array node$type cache$type))
(declare-fun cache () (Array node$type cache$type))
(declare-fun send_invack$i () node$type)
(declare-fun chan3$1 () (Array node$type msg$type))
(declare-fun chan3$2 () (Array node$type msg$type))
(declare-fun shrset () (Array node$type BOOL))
(declare-fun chan2 () (Array node$type msg$type))
(declare-fun chan3 () (Array node$type msg$type))
(assert (not (=> (forall ((n node$type)) (=> (or (= (m_cmd (select chan2 n)) inv) (= (m_cmd (select chan3 n)) invack)) (= (select shrset n) Truth)) ) (=> (= (m_cmd (select chan2 send_invack$i)) inv) (=> (= (m_cmd (select chan3 send_invack$i)) empty) (=> (= chan2$1 (store chan2 send_invack$i (c_msg$type empty (m_data (select chan2 send_invack$i))))) (=> (= chan3$2 (store chan3 send_invack$i (c_msg$type invack (m_data (select chan3 send_invack$i))))) (= (ite (= (c_state (select cache send_invack$i)) exclusive) (ite (=> (= chan3$1 (store chan3$2 send_invack$i (c_msg$type (m_cmd (select chan3$2 send_invack$i)) (c_data (select cache send_invack$i))))) (=> (= cache$1 (store cache send_invack$i (c_cache$type invalid (c_data (select cache send_invack$i))))) (forall ((n node$type)) (=> (or (= (m_cmd (select chan2$1 n)) inv) (= (m_cmd (select chan3$1 n)) invack)) (= (select shrset n) Truth)) ))) Truth Falsity) (ite (=> (= cache$1 (store cache send_invack$i (c_cache$type invalid (c_data (select cache send_invack$i))))) (forall ((n node$type)) (=> (or (= (m_cmd (select chan2$1 n)) inv) (= (m_cmd (select chan3$2 n)) invack)) (= (select shrset n) Truth)) )) Truth Falsity)) Truth))))))))
(check-sat)
(exit)

