(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |piVC|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun V_6 () Int)
(declare-fun V_5 () Int)
(declare-fun ix () Int)
(declare-fun t () Int)
(declare-fun j () Int)
(declare-fun a_0 () (Array Int Int))
(declare-fun a () (Array Int Int))
(declare-fun i () Int)
(assert (let ((?v_2 (and true (>= V_5 0))) (?v_0 (- i 1))) (let ((?v_1 (= j ?v_0)) (?v_3 (= V_6 V_5))) (and (and ?v_2 (and (<= (select a j) t) (and (>= j 0) (and (and (<= 1 i) (and (< i V_6) (and (<= (- 1) j) (and (<= j ?v_0) (and (forall ((?V_10 Int)) (=> (and (<= 0 ?V_10) (<= ?V_10 ?v_0)) (forall ((?V_11 Int)) (=> (and (<= 0 ?V_11) (<= ?V_11 ?V_10)) (<= (select a ?V_11) (select a ?V_10)))))) (and (or ?v_1 (<= (select a ?v_0) (select a i))) (and (or ?v_1 (forall ((?V_9 Int)) (=> (and (<= (+ j 1) ?V_9) (<= ?V_9 i)) (> (select a ?V_9) t)))) ?v_3))))))) ?v_2)))) (or (> 1 (+ i 1)) (or (exists ((?V_7 Int)) (and (and (<= 0 ?V_7) (<= ?V_7 (- (+ i 1) 1))) (exists ((?V_8 Int)) (let ((?v_4 (store a (+ j 1) t))) (and (and (<= 0 ?V_8) (<= ?V_8 ?V_7)) (> (select ?v_4 ?V_8) (select ?v_4 ?V_7))))))) (not ?v_3)))))))
(check-sat)
(exit)
