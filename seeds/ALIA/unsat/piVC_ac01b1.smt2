(set-info :smt-lib-version 2.6)
(set-logic ALIA)
(set-info :source |piVC|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun V_6 () Int)
(declare-fun V_5 () Int)
(declare-fun a_0 () (Array Int Int))
(declare-fun ix () Int)
(declare-fun a () (Array Int Int))
(declare-fun i () Int)
(assert (let ((?v_0 (and true (>= V_5 0))) (?v_1 (- i 1)) (?v_3 (= V_6 V_5))) (let ((?v_2 (not (= ?v_1 ?v_1)))) (and (and ?v_0 (and (< i V_6) (and (and (<= 1 i) (and (forall ((?V_10 Int)) (=> (and (<= 0 ?V_10) (<= ?V_10 ?v_1)) (forall ((?V_11 Int)) (=> (and (<= 0 ?V_11) (<= ?V_11 ?V_10)) (<= (select a ?V_11) (select a ?V_10)))))) ?v_3)) ?v_0))) (or (> 1 i) (or (>= i V_6) (or (> (- 1) ?v_1) (or (> ?v_1 ?v_1) (or (exists ((?V_8 Int)) (and (and (<= 0 ?V_8) (<= ?V_8 ?v_1)) (exists ((?V_9 Int)) (and (and (<= 0 ?V_9) (<= ?V_9 ?V_8)) (> (select a ?V_9) (select a ?V_8)))))) (or (and ?v_2 (> (select a ?v_1) (select a i))) (or (and ?v_2 (exists ((?V_7 Int)) (and (and (<= (+ ?v_1 1) ?V_7) (<= ?V_7 i)) (<= (select a ?V_7) (select a i))))) (not ?v_3))))))))))))
(check-sat)
(exit)
