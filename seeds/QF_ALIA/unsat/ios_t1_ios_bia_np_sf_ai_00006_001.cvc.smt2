(set-info :smt-lib-version 2.6)
(set-logic QF_ALIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_12 () (Array Int Int))
(declare-fun a_15 () (Array Int Int))
(declare-fun a_18 () (Array Int Int))
(declare-fun a_21 () (Array Int Int))
(declare-fun a_23 () (Array Int Int))
(declare-fun a_25 () (Array Int Int))
(declare-fun a_27 () (Array Int Int))
(declare-fun a_29 () (Array Int Int))
(declare-fun a_3 () (Array Int Int))
(declare-fun a_32 () (Array Int Int))
(declare-fun a_6 () (Array Int Int))
(declare-fun a_9 () (Array Int Int))
(declare-fun e_0 () Int)
(declare-fun e_1 () Int)
(declare-fun e_10 () Int)
(declare-fun e_11 () Int)
(declare-fun e_13 () Int)
(declare-fun e_14 () Int)
(declare-fun e_16 () Int)
(declare-fun e_17 () Int)
(declare-fun e_19 () Int)
(declare-fun e_2 () Int)
(declare-fun e_20 () Int)
(declare-fun e_22 () Int)
(declare-fun e_24 () Int)
(declare-fun e_26 () Int)
(declare-fun e_28 () Int)
(declare-fun e_30 () Int)
(declare-fun e_31 () Int)
(declare-fun e_4 () Int)
(declare-fun e_5 () Int)
(declare-fun e_7 () Int)
(declare-fun e_8 () Int)
(declare-fun a () (Array Int Int))
(declare-fun i () Int)
(assert (= a_12 (store a_9 e_10 e_11)))
(assert (= a_15 (store a_12 e_13 e_14)))
(assert (= a_18 (store a_15 e_16 e_17)))
(assert (= a_21 (store a e_13 e_20)))
(assert (= a_23 (store a_21 e_10 e_22)))
(assert (= a_25 (store a_23 e_7 e_24)))
(assert (= a_27 (store a_25 e_4 e_26)))
(assert (= a_29 (store a_27 e_0 e_28)))
(assert (= a_3 (store a e_0 e_2)))
(assert (= a_32 (store a_29 e_30 e_31)))
(assert (= a_6 (store a_3 e_4 e_5)))
(assert (= a_9 (store a_6 e_7 e_8)))
(assert (= e_0 (+ i 1)))
(assert (= e_1 (select a i)))
(assert (= e_10 (+ i 4)))
(assert (= e_11 (+ e_1 4)))
(assert (= e_13 (+ i 5)))
(assert (= e_14 (+ e_1 5)))
(assert (= e_16 (+ i 6)))
(assert (= e_17 (+ e_1 6)))
(assert (= e_19 (select a e_16)))
(assert (= e_2 (+ e_1 1)))
(assert (= e_20 (- e_19 1)))
(assert (= e_22 (- e_19 2)))
(assert (= e_24 (- e_19 3)))
(assert (= e_26 (- e_19 4)))
(assert (= e_28 (- e_19 5)))
(assert (= e_30 (+ i 0)))
(assert (= e_31 (- e_19 6)))
(assert (= e_4 (+ i 2)))
(assert (= e_5 (+ e_1 2)))
(assert (= e_7 (+ i 3)))
(assert (= e_8 (+ e_1 3)))
(assert (= a_18 a_32))
(assert (not (= e_17 e_19)))
(check-sat)
(exit)
