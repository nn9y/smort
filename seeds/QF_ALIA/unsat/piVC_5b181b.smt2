(set-info :smt-lib-version 2.6)
(set-logic QF_ALIA)
(set-info :source |pvc|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun length5 () Int)
(declare-fun length4 () Int)
(declare-fun length3 () Int)
(declare-fun length2 () Int)
(declare-fun length1 () Int)
(declare-fun k () Int)
(declare-fun a2 () (Array Int Int))
(declare-fun i2 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i1 () Int)
(assert (let ((?v_5 (and (<= 0 length2) (<= 0 length1))) (?v_4 (* (- 1) i2))) (let ((?v_1 (+ ?v_4 length3)) (?v_3 (* (- 1) i1))) (let ((?v_0 (+ ?v_3 length4)) (?v_2 (+ (* (- 1) k) length5))) (and (and ?v_5 (and (< 0 (+ (* (- 1) (select a2 i2)) (select a1 i1))) (and (< 0 ?v_1) (and (< 0 ?v_0) (and (< 0 ?v_2) (and (and (<= 0 i1) (and (<= 0 ?v_0) (and (<= 0 i2) (and (<= 0 ?v_1) (and (<= 0 k) (and (<= 0 ?v_2) (and (= 0 (+ ?v_3 ?v_4 k)) (and (= 0 (+ (* (- 1) length4) (* (- 1) length3) length5)) (and (= 0 (+ (* (- 1) length1) length4)) (= 0 (+ (* (- 1) length2) length3))))))))))) ?v_5)))))) (< 0 (+ ?v_4 (- 1))))))))
(check-sat)
(exit)
