(set-info :smt-lib-version 2.6)
(set-logic QF_ALIA)
(set-info :source |pvc|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun length5 () Int)
(declare-fun length4 () Int)
(declare-fun length3 () Int)
(declare-fun length2 () Int)
(declare-fun length1 () Int)
(declare-fun i2 () Int)
(declare-fun i1 () Int)
(declare-fun k () Int)
(declare-fun buf () (Array Int Int))
(declare-fun a2_0 () (Array Int Int))
(declare-fun a1_0 () (Array Int Int))
(declare-fun i_1 () Int)
(declare-fun j_2 () Int)
(assert (let ((?v_11 (select buf i_1)) (?v_10 (select buf j_2)) (?v_8 (* (- 1) i_1))) (let ((?v_0 (< 0 ?v_8)) (?v_9 (* (- 1) j_2))) (let ((?v_1 (< 0 (+ ?v_9 i_1))) (?v_4 (* (- 1) length2)) (?v_5 (* (- 1) length1))) (let ((?v_7 (and (and (or (or ?v_0 (or ?v_1 (< 0 (+ ?v_4 1 j_2)))) (<= 0 (+ (* (- 1) (select a1_0 i_1)) (select a1_0 j_2)))) (or (or ?v_0 (or ?v_1 (< 0 (+ ?v_5 1 j_2)))) (<= 0 (+ (* (- 1) (select a2_0 i_1)) (select a2_0 j_2))))) (and (<= 0 length1) (<= 0 length2)))) (?v_2 (* (- 1) i1)) (?v_3 (* (- 1) i2)) (?v_6 (* (- 1) k))) (and (and ?v_7 (and (<= 0 (+ (* (- 1) length5) k)) (and (and (<= 0 i1) (and (<= 0 (+ ?v_2 length4)) (and (<= 0 i2) (and (<= 0 (+ ?v_3 length3)) (and (<= 0 k) (and (<= 0 (+ ?v_6 length5)) (and (= 0 (+ ?v_2 ?v_3 k)) (and (= 0 (+ (* (- 1) length4) (* (- 1) length3) length5)) (and (= 0 (+ ?v_4 length4)) (and (= 0 (+ ?v_5 length3)) (or (or ?v_0 (or ?v_1 (< 0 (+ ?v_6 1 j_2)))) (<= 0 (+ (* (- 1) ?v_11) ?v_10))))))))))))) ?v_7))) (and (and (<= 0 i_1) (and (<= 0 (+ ?v_8 j_2)) (<= 0 (+ ?v_9 length1 length2 (- 1))))) (< 0 (+ (* (- 1) ?v_10) ?v_11)))))))))
(check-sat)
(exit)
