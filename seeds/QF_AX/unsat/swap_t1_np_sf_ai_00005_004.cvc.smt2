(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_318 () (Array Index Element))
(declare-fun a_320 () (Array Index Element))
(declare-fun a_322 () (Array Index Element))
(declare-fun a_323 () (Array Index Element))
(declare-fun a_325 () (Array Index Element))
(declare-fun a_327 () (Array Index Element))
(declare-fun a_329 () (Array Index Element))
(declare-fun a_331 () (Array Index Element))
(declare-fun a_333 () (Array Index Element))
(declare-fun a_335 () (Array Index Element))
(declare-fun a_336 () (Array Index Element))
(declare-fun a_337 () (Array Index Element))
(declare-fun a_339 () (Array Index Element))
(declare-fun a_340 () (Array Index Element))
(declare-fun a_342 () (Array Index Element))
(declare-fun a_344 () (Array Index Element))
(declare-fun a_346 () (Array Index Element))
(declare-fun a_348 () (Array Index Element))
(declare-fun a_350 () (Array Index Element))
(declare-fun a_352 () (Array Index Element))
(declare-fun e_317 () Element)
(declare-fun e_319 () Element)
(declare-fun e_321 () Element)
(declare-fun e_324 () Element)
(declare-fun e_326 () Element)
(declare-fun e_328 () Element)
(declare-fun e_330 () Element)
(declare-fun e_332 () Element)
(declare-fun e_334 () Element)
(declare-fun e_338 () Element)
(declare-fun e_341 () Element)
(declare-fun e_343 () Element)
(declare-fun e_345 () Element)
(declare-fun e_347 () Element)
(declare-fun e_349 () Element)
(declare-fun e_351 () Element)
(declare-fun a1 () (Array Index Element))
(declare-fun i0 () Index)
(declare-fun i1 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(assert (= a_318 (store a1 i3 e_317)))
(assert (= a_320 (store a_318 i4 e_319)))
(assert (= a_322 (store a_320 i3 e_321)))
(assert (= a_323 (store a_322 i3 e_321)))
(assert (= a_325 (store a_323 i1 e_324)))
(assert (= a_327 (store a_325 i2 e_326)))
(assert (= a_329 (store a_327 i1 e_328)))
(assert (= a_331 (store a_329 i2 e_330)))
(assert (= a_333 (store a_331 i4 e_332)))
(assert (= a_335 (store a_333 i0 e_334)))
(assert (= a_336 (store a1 i4 e_319)))
(assert (= a_337 (store a_336 i3 e_317)))
(assert (= a_339 (store a_337 i3 e_338)))
(assert (= a_340 (store a_339 i3 e_338)))
(assert (= a_342 (store a_340 i2 e_341)))
(assert (= a_344 (store a_342 i1 e_343)))
(assert (= a_346 (store a_344 i2 e_345)))
(assert (= a_348 (store a_346 i1 e_347)))
(assert (= a_350 (store a_348 i4 e_349)))
(assert (= a_352 (store a_350 i0 e_351)))
(assert (= e_317 (select a1 i4)))
(assert (= e_319 (select a1 i3)))
(assert (= e_321 (select a_320 i3)))
(assert (= e_324 (select a_323 i2)))
(assert (= e_326 (select a_323 i1)))
(assert (= e_328 (select a_327 i2)))
(assert (= e_330 (select a_327 i1)))
(assert (= e_332 (select a_331 i0)))
(assert (= e_334 (select a_331 i4)))
(assert (= e_338 (select a_337 i3)))
(assert (= e_341 (select a_340 i1)))
(assert (= e_343 (select a_340 i2)))
(assert (= e_345 (select a_344 i1)))
(assert (= e_347 (select a_344 i2)))
(assert (= e_349 (select a_348 i0)))
(assert (= e_351 (select a_348 i4)))
(assert (not (= a_335 a_352)))
(check-sat)
(exit)
