(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_510 () (Array Index Element))
(declare-fun a_511 () (Array Index Element))
(declare-fun a_513 () (Array Index Element))
(declare-fun a_514 () (Array Index Element))
(declare-fun a_516 () (Array Index Element))
(declare-fun a_518 () (Array Index Element))
(declare-fun a_520 () (Array Index Element))
(declare-fun a_522 () (Array Index Element))
(declare-fun a_524 () (Array Index Element))
(declare-fun a_526 () (Array Index Element))
(declare-fun e_509 () Element)
(declare-fun e_512 () Element)
(declare-fun e_515 () Element)
(declare-fun e_517 () Element)
(declare-fun e_519 () Element)
(declare-fun e_521 () Element)
(declare-fun e_523 () Element)
(declare-fun e_525 () Element)
(declare-fun a1 () (Array Index Element))
(declare-fun i0 () Index)
(declare-fun i1 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(assert (= a_510 (store a1 i1 e_509)))
(assert (= a_511 (store a_510 i1 e_509)))
(assert (= a_513 (store a_511 i3 e_512)))
(assert (= a_514 (store a_513 i3 e_512)))
(assert (= a_516 (store a_514 i2 e_515)))
(assert (= a_518 (store a_516 i3 e_517)))
(assert (= a_520 (store a_518 i3 e_519)))
(assert (= a_522 (store a_520 i4 e_521)))
(assert (= a_524 (store a_522 i3 e_523)))
(assert (= a_526 (store a_524 i0 e_525)))
(assert (= e_509 (select a1 i1)))
(assert (= e_512 (select a_511 i3)))
(assert (= e_515 (select a_514 i3)))
(assert (= e_517 (select a_514 i2)))
(assert (= e_519 (select a_518 i4)))
(assert (= e_521 (select a_518 i3)))
(assert (= e_523 (select a_522 i0)))
(assert (= e_525 (select a_522 i3)))
(assert (not (= a_526 a_526)))
(check-sat)
(exit)
