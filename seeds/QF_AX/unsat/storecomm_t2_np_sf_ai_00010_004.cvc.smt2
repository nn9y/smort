(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_200 () (Array Index Element))
(declare-fun a_201 () (Array Index Element))
(declare-fun a_202 () (Array Index Element))
(declare-fun a_203 () (Array Index Element))
(declare-fun a_204 () (Array Index Element))
(declare-fun a_205 () (Array Index Element))
(declare-fun a_206 () (Array Index Element))
(declare-fun a_207 () (Array Index Element))
(declare-fun a_208 () (Array Index Element))
(declare-fun a_209 () (Array Index Element))
(declare-fun a_210 () (Array Index Element))
(declare-fun a_211 () (Array Index Element))
(declare-fun a_212 () (Array Index Element))
(declare-fun a_213 () (Array Index Element))
(declare-fun a_214 () (Array Index Element))
(declare-fun a_215 () (Array Index Element))
(declare-fun a_216 () (Array Index Element))
(declare-fun a_217 () (Array Index Element))
(declare-fun a_218 () (Array Index Element))
(declare-fun a1 () (Array Index Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e2 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Index)
(declare-fun i10 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(declare-fun i5 () Index)
(declare-fun i6 () Index)
(declare-fun i7 () Index)
(declare-fun i8 () Index)
(declare-fun i9 () Index)
(assert (= a_200 (store a1 i1 e1)))
(assert (= a_201 (store a_200 i2 e2)))
(assert (= a_202 (store a_201 i3 e3)))
(assert (= a_203 (store a_202 i4 e4)))
(assert (= a_204 (store a_203 i5 e5)))
(assert (= a_205 (store a_204 i6 e6)))
(assert (= a_206 (store a_205 i7 e7)))
(assert (= a_207 (store a_206 i8 e8)))
(assert (= a_208 (store a_207 i9 e9)))
(assert (= a_209 (store a_208 i10 e10)))
(assert (= a_210 (store a_200 i9 e9)))
(assert (= a_211 (store a_210 i4 e4)))
(assert (= a_212 (store a_211 i6 e6)))
(assert (= a_213 (store a_212 i8 e8)))
(assert (= a_214 (store a_213 i10 e10)))
(assert (= a_215 (store a_214 i2 e2)))
(assert (= a_216 (store a_215 i7 e7)))
(assert (= a_217 (store a_216 i3 e3)))
(assert (= a_218 (store a_217 i5 e5)))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_209 a_218)))
(check-sat)
(exit)
