(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_160 () (Array Index Element))
(declare-fun a_161 () (Array Index Element))
(declare-fun a_162 () (Array Index Element))
(declare-fun a_163 () (Array Index Element))
(declare-fun a_164 () (Array Index Element))
(declare-fun a_165 () (Array Index Element))
(declare-fun a_166 () (Array Index Element))
(declare-fun a_167 () (Array Index Element))
(declare-fun a_168 () (Array Index Element))
(declare-fun a_169 () (Array Index Element))
(declare-fun a_170 () (Array Index Element))
(declare-fun a_171 () (Array Index Element))
(declare-fun a_172 () (Array Index Element))
(declare-fun a_173 () (Array Index Element))
(declare-fun a_174 () (Array Index Element))
(declare-fun a_175 () (Array Index Element))
(declare-fun a_176 () (Array Index Element))
(declare-fun a_177 () (Array Index Element))
(declare-fun a_178 () (Array Index Element))
(declare-fun a_179 () (Array Index Element))
(declare-fun a1 () (Array Index Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e2 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Index)
(declare-fun i10 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(declare-fun i5 () Index)
(declare-fun i6 () Index)
(declare-fun i7 () Index)
(declare-fun i8 () Index)
(declare-fun i9 () Index)
(assert (= a_160 (store a1 i1 e1)))
(assert (= a_161 (store a_160 i2 e2)))
(assert (= a_162 (store a_161 i3 e3)))
(assert (= a_163 (store a_162 i4 e4)))
(assert (= a_164 (store a_163 i5 e5)))
(assert (= a_165 (store a_164 i6 e6)))
(assert (= a_166 (store a_165 i7 e7)))
(assert (= a_167 (store a_166 i8 e8)))
(assert (= a_168 (store a_167 i9 e9)))
(assert (= a_169 (store a_168 i10 e10)))
(assert (= a_170 (store a1 i7 e7)))
(assert (= a_171 (store a_170 i2 e2)))
(assert (= a_172 (store a_171 i6 e6)))
(assert (= a_173 (store a_172 i4 e4)))
(assert (= a_174 (store a_173 i10 e10)))
(assert (= a_175 (store a_174 i5 e5)))
(assert (= a_176 (store a_175 i9 e9)))
(assert (= a_177 (store a_176 i1 e1)))
(assert (= a_178 (store a_177 i3 e3)))
(assert (= a_179 (store a_178 i8 e8)))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_169 a_179)))
(check-sat)
(exit)
