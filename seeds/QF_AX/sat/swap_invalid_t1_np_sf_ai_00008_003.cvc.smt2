(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_670 () (Array Index Element))
(declare-fun a_672 () (Array Index Element))
(declare-fun a_674 () (Array Index Element))
(declare-fun a_676 () (Array Index Element))
(declare-fun a_678 () (Array Index Element))
(declare-fun a_680 () (Array Index Element))
(declare-fun a_682 () (Array Index Element))
(declare-fun a_683 () (Array Index Element))
(declare-fun a_685 () (Array Index Element))
(declare-fun a_687 () (Array Index Element))
(declare-fun a_689 () (Array Index Element))
(declare-fun a_691 () (Array Index Element))
(declare-fun a_693 () (Array Index Element))
(declare-fun a_695 () (Array Index Element))
(declare-fun a_697 () (Array Index Element))
(declare-fun a_699 () (Array Index Element))
(declare-fun a_700 () (Array Index Element))
(declare-fun a_702 () (Array Index Element))
(declare-fun e_669 () Element)
(declare-fun e_671 () Element)
(declare-fun e_673 () Element)
(declare-fun e_675 () Element)
(declare-fun e_677 () Element)
(declare-fun e_679 () Element)
(declare-fun e_681 () Element)
(declare-fun e_684 () Element)
(declare-fun e_686 () Element)
(declare-fun e_688 () Element)
(declare-fun e_690 () Element)
(declare-fun e_692 () Element)
(declare-fun e_694 () Element)
(declare-fun e_696 () Element)
(declare-fun e_698 () Element)
(declare-fun e_701 () Element)
(declare-fun a1 () (Array Index Element))
(declare-fun i0 () Index)
(declare-fun i1 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(declare-fun i5 () Index)
(declare-fun i6 () Index)
(declare-fun i7 () Index)
(assert (= a_670 (store a1 i7 e_669)))
(assert (= a_672 (store a_670 i2 e_671)))
(assert (= a_674 (store a_672 i2 e_673)))
(assert (= a_676 (store a_674 i3 e_675)))
(assert (= a_678 (store a_676 i3 e_677)))
(assert (= a_680 (store a_678 i1 e_679)))
(assert (= a_682 (store a_680 i6 e_681)))
(assert (= a_683 (store a_682 i6 e_681)))
(assert (= a_685 (store a_683 i6 e_684)))
(assert (= a_687 (store a_685 i7 e_686)))
(assert (= a_689 (store a_687 i2 e_688)))
(assert (= a_691 (store a_689 i3 e_690)))
(assert (= a_693 (store a_691 i4 e_692)))
(assert (= a_695 (store a_693 i0 e_694)))
(assert (= a_697 (store a_695 i5 e_696)))
(assert (= a_699 (store a_697 i7 e_698)))
(assert (= a_700 (store a_695 i6 e_696)))
(assert (= a_702 (store a_700 i7 e_701)))
(assert (= e_669 (select a1 i2)))
(assert (= e_671 (select a1 i7)))
(assert (= e_673 (select a_672 i3)))
(assert (= e_675 (select a_672 i2)))
(assert (= e_677 (select a_676 i1)))
(assert (= e_679 (select a_676 i3)))
(assert (= e_681 (select a_680 i6)))
(assert (= e_684 (select a_683 i7)))
(assert (= e_686 (select a_683 i6)))
(assert (= e_688 (select a_687 i3)))
(assert (= e_690 (select a_687 i2)))
(assert (= e_692 (select a_691 i0)))
(assert (= e_694 (select a_691 i4)))
(assert (= e_696 (select a_695 i7)))
(assert (= e_698 (select a_695 i5)))
(assert (= e_701 (select a_695 i6)))
(assert (not (= a_699 a_702)))
(check-sat)
(exit)
