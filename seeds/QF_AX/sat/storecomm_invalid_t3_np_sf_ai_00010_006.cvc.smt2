(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_120 () (Array Index Element))
(declare-fun a_121 () (Array Index Element))
(declare-fun a_122 () (Array Index Element))
(declare-fun a_123 () (Array Index Element))
(declare-fun a_124 () (Array Index Element))
(declare-fun a_125 () (Array Index Element))
(declare-fun a_126 () (Array Index Element))
(declare-fun a_127 () (Array Index Element))
(declare-fun a_128 () (Array Index Element))
(declare-fun a_129 () (Array Index Element))
(declare-fun a_130 () (Array Index Element))
(declare-fun a_131 () (Array Index Element))
(declare-fun a_132 () (Array Index Element))
(declare-fun a_133 () (Array Index Element))
(declare-fun a_134 () (Array Index Element))
(declare-fun a_135 () (Array Index Element))
(declare-fun a_136 () (Array Index Element))
(declare-fun a_137 () (Array Index Element))
(declare-fun a_138 () (Array Index Element))
(declare-fun a_139 () (Array Index Element))
(declare-fun a1 () (Array Index Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e2 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Index)
(declare-fun i10 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(declare-fun i5 () Index)
(declare-fun i6 () Index)
(declare-fun i7 () Index)
(declare-fun i8 () Index)
(declare-fun i9 () Index)
(assert (= a_120 (store a1 i1 e1)))
(assert (= a_121 (store a_120 i2 e2)))
(assert (= a_122 (store a_121 i3 e3)))
(assert (= a_123 (store a_122 i4 e4)))
(assert (= a_124 (store a_123 i5 e5)))
(assert (= a_125 (store a_124 i6 e6)))
(assert (= a_126 (store a_125 i7 e7)))
(assert (= a_127 (store a_126 i8 e8)))
(assert (= a_128 (store a_127 i9 e9)))
(assert (= a_129 (store a_128 i1 e1)))
(assert (= a_130 (store a1 i9 e9)))
(assert (= a_131 (store a_130 i3 e3)))
(assert (= a_132 (store a_131 i5 e5)))
(assert (= a_133 (store a_132 i4 e4)))
(assert (= a_134 (store a_133 i6 e6)))
(assert (= a_135 (store a_134 i1 e1)))
(assert (= a_136 (store a_135 i10 e10)))
(assert (= a_137 (store a_136 i2 e2)))
(assert (= a_138 (store a_137 i8 e8)))
(assert (= a_139 (store a_138 i7 e7)))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_129 a_139)))
(check-sat)
(exit)
