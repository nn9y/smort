(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_40 () (Array Index Element))
(declare-fun a_41 () (Array Index Element))
(declare-fun a_42 () (Array Index Element))
(declare-fun a_43 () (Array Index Element))
(declare-fun a_44 () (Array Index Element))
(declare-fun a_45 () (Array Index Element))
(declare-fun a_46 () (Array Index Element))
(declare-fun a_47 () (Array Index Element))
(declare-fun a_48 () (Array Index Element))
(declare-fun a_49 () (Array Index Element))
(declare-fun a_50 () (Array Index Element))
(declare-fun a_51 () (Array Index Element))
(declare-fun a_52 () (Array Index Element))
(declare-fun a_53 () (Array Index Element))
(declare-fun a_54 () (Array Index Element))
(declare-fun a_55 () (Array Index Element))
(declare-fun a_56 () (Array Index Element))
(declare-fun a_57 () (Array Index Element))
(declare-fun a_58 () (Array Index Element))
(declare-fun a_59 () (Array Index Element))
(declare-fun a1 () (Array Index Element))
(declare-fun e1 () Element)
(declare-fun e10 () Element)
(declare-fun e2 () Element)
(declare-fun e3 () Element)
(declare-fun e4 () Element)
(declare-fun e5 () Element)
(declare-fun e6 () Element)
(declare-fun e7 () Element)
(declare-fun e8 () Element)
(declare-fun e9 () Element)
(declare-fun i1 () Index)
(declare-fun i10 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(declare-fun i5 () Index)
(declare-fun i6 () Index)
(declare-fun i7 () Index)
(declare-fun i8 () Index)
(declare-fun i9 () Index)
(assert (= a_40 (store a1 i1 e1)))
(assert (= a_41 (store a_40 i2 e2)))
(assert (= a_42 (store a_41 i3 e3)))
(assert (= a_43 (store a_42 i4 e4)))
(assert (= a_44 (store a_43 i5 e5)))
(assert (= a_45 (store a_44 i6 e6)))
(assert (= a_46 (store a_45 i7 e7)))
(assert (= a_47 (store a_46 i8 e8)))
(assert (= a_48 (store a_47 i9 e9)))
(assert (= a_49 (store a_48 i1 e1)))
(assert (= a_50 (store a1 i2 e2)))
(assert (= a_51 (store a_50 i4 e4)))
(assert (= a_52 (store a_51 i1 e1)))
(assert (= a_53 (store a_52 i9 e9)))
(assert (= a_54 (store a_53 i5 e5)))
(assert (= a_55 (store a_54 i3 e3)))
(assert (= a_56 (store a_55 i8 e8)))
(assert (= a_57 (store a_56 i7 e7)))
(assert (= a_58 (store a_57 i10 e10)))
(assert (= a_59 (store a_58 i6 e6)))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= a_49 a_59)))
(check-sat)
(exit)
