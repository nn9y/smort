(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Statement!2300 0)(Expression!2322 0)(List!2361 0)) (((Assign!2301 (varID!2302 (_ BitVec 32)) (expr!2303 Expression!2322)) (Block!2304 (body!2305 List!2361)) (For!2306 (init!2307 Statement!2300) (expr!2308 Expression!2322) (step!2309 Statement!2300) (body!2310 Statement!2300)) (IfThenElse!2311 (expr!2312 Expression!2322) (then!2313 Statement!2300) (elze!2314 Statement!2300)) (Print!2315 (msg!2316 (_ BitVec 32)) (varID!2317 (_ BitVec 32))) (Skip!2318) (While!2319 (expr!2320 Expression!2322) (body!2321 Statement!2300)))
((And!2323 (lhs!2324 Expression!2322) (rhs!2325 Expression!2322)) (Division!2326 (lhs!2327 Expression!2322) (rhs!2328 Expression!2322)) (Equals!2329 (lhs!2330 Expression!2322) (rhs!2331 Expression!2322)) (GreaterThan!2332 (lhs!2333 Expression!2322) (rhs!2334 Expression!2322)) (IntLiteral!2335 (value!2336 (_ BitVec 32))) (LessThan!2337 (lhs!2338 Expression!2322) (rhs!2339 Expression!2322)) (Minus!2340 (lhs!2341 Expression!2322) (rhs!2342 Expression!2322)) (Modulo!2343 (lhs!2344 Expression!2322) (rhs!2345 Expression!2322)) (Neg!2346 (expr!2347 Expression!2322)) (Not!2348 (expr!2349 Expression!2322)) (Or!2350 (lhs!2351 Expression!2322) (rhs!2352 Expression!2322)) (Plus!2353 (lhs!2354 Expression!2322) (rhs!2355 Expression!2322)) (Times!2356 (lhs!2357 Expression!2322) (rhs!2358 Expression!2322)) (Var!2359 (varID!2360 (_ BitVec 32))))
((Cons!2362 (head!2363 Statement!2300) (tail!2364 List!2361)) (Nil!2365))
))
(declare-fun error_value!2366 () Bool)
(declare-fun isWhileFree!221 (Statement!2300) Bool)
(declare-fun isWhileFreeList!219 (List!2361) Bool)
(declare-fun error_value!2367 () List!2361)
(declare-fun eliminateWhileLoops!213 (Statement!2300) Statement!2300)
(declare-fun eliminateWhileLoopsList!211 (List!2361) List!2361)
(assert (forall ((stat!220 Statement!2300)) (= (isWhileFree!221 stat!220) (ite ((_ is Block!2304) stat!220) (isWhileFreeList!219 (body!2305 stat!220)) (ite ((_ is IfThenElse!2311) stat!220) (and (and (isWhileFree!221 (then!2313 stat!220)) (isWhileFree!221 (then!2313 stat!220))) (isWhileFree!221 (elze!2314 stat!220))) (ite ((_ is While!2319) stat!220) false (ite ((_ is For!2306) stat!220) (and (and (and (isWhileFree!221 (init!2307 stat!220)) (isWhileFree!221 (init!2307 stat!220))) (isWhileFree!221 (step!2309 stat!220))) (isWhileFree!221 (body!2310 stat!220))) true))))) ))
(assert (forall ((l!218 List!2361)) (= (isWhileFreeList!219 l!218) (ite ((_ is Nil!2365) l!218) true (ite ((_ is Cons!2362) l!218) (and (and (isWhileFree!221 (head!2363 l!218)) (isWhileFree!221 (head!2363 l!218))) (isWhileFreeList!219 (tail!2364 l!218))) error_value!2366))) ))
(assert (forall ((stat!212 Statement!2300)) (= (eliminateWhileLoops!213 stat!212) (ite ((_ is Block!2304) stat!212) (Block!2304 (eliminateWhileLoopsList!211 (body!2305 stat!212))) (ite ((_ is IfThenElse!2311) stat!212) (IfThenElse!2311 (expr!2312 stat!212) (eliminateWhileLoops!213 (then!2313 stat!212)) (eliminateWhileLoops!213 (elze!2314 stat!212))) (ite ((_ is While!2319) stat!212) (For!2306 Skip!2318 (expr!2320 stat!212) Skip!2318 (eliminateWhileLoops!213 (body!2321 stat!212))) (ite ((_ is For!2306) stat!212) (For!2306 (eliminateWhileLoops!213 (init!2307 stat!212)) (expr!2308 stat!212) (eliminateWhileLoops!213 (step!2309 stat!212)) (eliminateWhileLoops!213 (body!2310 stat!212))) stat!212))))) ))
(assert (forall ((l!210 List!2361)) (= (eliminateWhileLoopsList!211 l!210) (ite ((_ is Nil!2365) l!210) Nil!2365 (ite ((_ is Cons!2362) l!210) (Cons!2362 (eliminateWhileLoops!213 (head!2363 l!210)) (eliminateWhileLoopsList!211 (tail!2364 l!210))) error_value!2367))) ))
(assert (not (forall ((BOUND_VARIABLE_586 (_ BitVec 32)) (BOUND_VARIABLE_587 (_ BitVec 32))) (or (isWhileFree!221 (Print!2315 BOUND_VARIABLE_586 BOUND_VARIABLE_587)) (= (eliminateWhileLoops!213 (Print!2315 BOUND_VARIABLE_586 BOUND_VARIABLE_587)) (Print!2315 BOUND_VARIABLE_586 BOUND_VARIABLE_587))) )))
(check-sat)
(exit)

