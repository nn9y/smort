(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1206 0)) (((And!1207 (lhs!1208 Formula!1206) (rhs!1209 Formula!1206)) (Implies!1210 (lhs!1211 Formula!1206) (rhs!1212 Formula!1206)) (Literal!1213 (id!1214 (_ BitVec 32))) (Not!1215 (f!1216 Formula!1206)) (Or!1217 (lhs!1218 Formula!1206) (rhs!1219 Formula!1206)))
))
(declare-fun error_value!1220 () Bool)
(declare-fun isNNF!212 (Formula!1206) Bool)
(declare-fun error_value!1221 () Formula!1206)
(declare-fun error_value!1222 () Bool)
(declare-fun simplify!206 (Formula!1206) Formula!1206)
(declare-fun isSimplified!208 (Formula!1206) Bool)
(assert (forall ((f!211 Formula!1206)) (= (isNNF!212 f!211) (ite ((_ is And!1207) f!211) (and (and (isNNF!212 (lhs!1208 f!211)) (isNNF!212 (lhs!1208 f!211))) (isNNF!212 (rhs!1209 f!211))) (ite ((_ is Or!1217) f!211) (and (and (isNNF!212 (lhs!1218 f!211)) (isNNF!212 (lhs!1218 f!211))) (isNNF!212 (rhs!1219 f!211))) (ite ((_ is Implies!1210) f!211) (and (and (isNNF!212 (lhs!1211 f!211)) (isNNF!212 (lhs!1211 f!211))) (isNNF!212 (rhs!1212 f!211))) (ite (and (and ((_ is Not!1215) f!211) ((_ is Not!1215) f!211)) ((_ is Literal!1213) (f!1216 f!211))) true (ite ((_ is Not!1215) f!211) false (ite ((_ is Literal!1213) f!211) true error_value!1220))))))) ))
(assert (forall ((f!205 Formula!1206)) (= (simplify!206 f!205) (ite ((_ is And!1207) f!205) (And!1207 (simplify!206 (lhs!1208 f!205)) (simplify!206 (rhs!1209 f!205))) (ite ((_ is Or!1217) f!205) (Or!1217 (simplify!206 (lhs!1218 f!205)) (simplify!206 (rhs!1219 f!205))) (ite ((_ is Implies!1210) f!205) (Or!1217 (Not!1215 (simplify!206 (lhs!1211 f!205))) (simplify!206 (rhs!1212 f!205))) (ite ((_ is Not!1215) f!205) (Not!1215 (simplify!206 (f!1216 f!205))) (ite ((_ is Literal!1213) f!205) f!205 error_value!1221)))))) ))
(assert (forall ((f!207 Formula!1206)) (= (isSimplified!208 f!207) (ite ((_ is And!1207) f!207) (and (and (isSimplified!208 (lhs!1208 f!207)) (isSimplified!208 (lhs!1208 f!207))) (isSimplified!208 (rhs!1209 f!207))) (ite ((_ is Or!1217) f!207) (and (and (isSimplified!208 (lhs!1218 f!207)) (isSimplified!208 (lhs!1218 f!207))) (isSimplified!208 (rhs!1219 f!207))) (ite ((_ is Implies!1210) f!207) false (ite ((_ is Not!1215) f!207) (isSimplified!208 (f!1216 f!207)) (ite ((_ is Literal!1213) f!207) true error_value!1222)))))) ))
(assert (not (forall ((BOUND_VARIABLE_484 Formula!1206)) (or (and (isNNF!212 (simplify!206 BOUND_VARIABLE_484)) (not (isNNF!212 BOUND_VARIABLE_484))) (not (isNNF!212 (Not!1215 BOUND_VARIABLE_484))) (isNNF!212 (simplify!206 (Not!1215 BOUND_VARIABLE_484)))) )))
(check-sat)
(exit)

