(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1155 0)) (((And!1156 (lhs!1157 Formula!1155) (rhs!1158 Formula!1155)) (Implies!1159 (lhs!1160 Formula!1155) (rhs!1161 Formula!1155)) (Literal!1162 (id!1163 (_ BitVec 32))) (Not!1164 (f!1165 Formula!1155)) (Or!1166 (lhs!1167 Formula!1155) (rhs!1168 Formula!1155)))
))
(declare-fun error_value!1169 () Bool)
(declare-fun isNNF!212 (Formula!1155) Bool)
(declare-fun error_value!1170 () Formula!1155)
(declare-fun error_value!1171 () Bool)
(declare-fun simplify!206 (Formula!1155) Formula!1155)
(declare-fun isSimplified!208 (Formula!1155) Bool)
(assert (forall ((f!211 Formula!1155)) (= (isNNF!212 f!211) (ite ((_ is And!1156) f!211) (and (and (isNNF!212 (lhs!1157 f!211)) (isNNF!212 (lhs!1157 f!211))) (isNNF!212 (rhs!1158 f!211))) (ite ((_ is Or!1166) f!211) (and (and (isNNF!212 (lhs!1167 f!211)) (isNNF!212 (lhs!1167 f!211))) (isNNF!212 (rhs!1168 f!211))) (ite ((_ is Implies!1159) f!211) (and (and (isNNF!212 (lhs!1160 f!211)) (isNNF!212 (lhs!1160 f!211))) (isNNF!212 (rhs!1161 f!211))) (ite (and (and ((_ is Not!1164) f!211) ((_ is Not!1164) f!211)) ((_ is Literal!1162) (f!1165 f!211))) true (ite ((_ is Not!1164) f!211) false (ite ((_ is Literal!1162) f!211) true error_value!1169))))))) ))
(assert (forall ((f!205 Formula!1155)) (= (simplify!206 f!205) (ite ((_ is And!1156) f!205) (And!1156 (simplify!206 (lhs!1157 f!205)) (simplify!206 (rhs!1158 f!205))) (ite ((_ is Or!1166) f!205) (Or!1166 (simplify!206 (lhs!1167 f!205)) (simplify!206 (rhs!1168 f!205))) (ite ((_ is Implies!1159) f!205) (Or!1166 (Not!1164 (simplify!206 (lhs!1160 f!205))) (simplify!206 (rhs!1161 f!205))) (ite ((_ is Not!1164) f!205) (Not!1164 (simplify!206 (f!1165 f!205))) (ite ((_ is Literal!1162) f!205) f!205 error_value!1170)))))) ))
(assert (forall ((f!207 Formula!1155)) (= (isSimplified!208 f!207) (ite ((_ is And!1156) f!207) (and (and (isSimplified!208 (lhs!1157 f!207)) (isSimplified!208 (lhs!1157 f!207))) (isSimplified!208 (rhs!1158 f!207))) (ite ((_ is Or!1166) f!207) (and (and (isSimplified!208 (lhs!1167 f!207)) (isSimplified!208 (lhs!1167 f!207))) (isSimplified!208 (rhs!1168 f!207))) (ite ((_ is Implies!1159) f!207) false (ite ((_ is Not!1164) f!207) (isSimplified!208 (f!1165 f!207)) (ite ((_ is Literal!1162) f!207) true error_value!1171)))))) ))
(assert (exists ((f!217 Formula!1155)) (not (=> (and (and (and (and ((_ is And!1156) f!217) ((_ is And!1156) f!217)) (isNNF!212 f!217)) (=> (isNNF!212 (lhs!1157 f!217)) (isNNF!212 (simplify!206 (lhs!1157 f!217))))) (=> (isNNF!212 (rhs!1158 f!217)) (isNNF!212 (simplify!206 (rhs!1158 f!217))))) (isNNF!212 (simplify!206 f!217)))) ))
(check-sat)
(exit)

