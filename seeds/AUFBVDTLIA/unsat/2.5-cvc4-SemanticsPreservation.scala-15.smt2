(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1107 0)) (((And!1108 (lhs!1109 Formula!1107) (rhs!1110 Formula!1107)) (Not!1111 (f!1112 Formula!1107)) (Or!1113 (lhs!1114 Formula!1107) (rhs!1115 Formula!1107)) (Variable!1116 (id!1117 (_ BitVec 32))))
))
(declare-fun error_value!1118 () Bool)
(declare-fun error_value!1119 () Formula!1107)
(declare-fun error_value!1120 () Bool)
(declare-fun eval!210 (Formula!1107) Bool)
(declare-fun nnf!206 (Formula!1107) Formula!1107)
(declare-fun isNNF!208 (Formula!1107) Bool)
(assert (forall ((formula!209 Formula!1107)) (= (eval!210 formula!209) (ite ((_ is And!1108) formula!209) (and (and (eval!210 (lhs!1109 formula!209)) (eval!210 (lhs!1109 formula!209))) (eval!210 (rhs!1110 formula!209))) (ite ((_ is Or!1113) formula!209) (or (or (eval!210 (lhs!1114 formula!209)) (eval!210 (lhs!1114 formula!209))) (eval!210 (rhs!1115 formula!209))) (ite ((_ is Not!1111) formula!209) (not (eval!210 (f!1112 formula!209))) (ite ((_ is Variable!1116) formula!209) (bvsgt (id!1117 formula!209) (_ bv42 32)) error_value!1118))))) ))
(assert (forall ((formula!205 Formula!1107)) (= (nnf!206 formula!205) (ite ((_ is And!1108) formula!205) (And!1108 (nnf!206 (lhs!1109 formula!205)) (nnf!206 (rhs!1110 formula!205))) (ite ((_ is Or!1113) formula!205) (Or!1113 (nnf!206 (lhs!1114 formula!205)) (nnf!206 (rhs!1115 formula!205))) (ite (and (and ((_ is Not!1111) formula!205) ((_ is Not!1111) formula!205)) ((_ is And!1108) (f!1112 formula!205))) (Or!1113 (nnf!206 (Not!1111 (lhs!1109 (f!1112 formula!205)))) (nnf!206 (Not!1111 (rhs!1110 (f!1112 formula!205))))) (ite (and (and ((_ is Not!1111) formula!205) ((_ is Not!1111) formula!205)) ((_ is Or!1113) (f!1112 formula!205))) (And!1108 (nnf!206 (Not!1111 (lhs!1114 (f!1112 formula!205)))) (nnf!206 (Not!1111 (rhs!1115 (f!1112 formula!205))))) (ite (and (and ((_ is Not!1111) formula!205) ((_ is Not!1111) formula!205)) ((_ is Not!1111) (f!1112 formula!205))) (nnf!206 (f!1112 (f!1112 formula!205))) (ite ((_ is Not!1111) formula!205) formula!205 (ite ((_ is Variable!1116) formula!205) formula!205 error_value!1119)))))))) ))
(assert (forall ((f!207 Formula!1107)) (= (isNNF!208 f!207) (ite ((_ is And!1108) f!207) (and (and (isNNF!208 (lhs!1109 f!207)) (isNNF!208 (lhs!1109 f!207))) (isNNF!208 (rhs!1110 f!207))) (ite ((_ is Or!1113) f!207) (and (and (isNNF!208 (lhs!1114 f!207)) (isNNF!208 (lhs!1114 f!207))) (isNNF!208 (rhs!1115 f!207))) (ite ((_ is Not!1111) f!207) false (ite ((_ is Variable!1116) f!207) true error_value!1120))))) ))
(assert (exists ((f!211 Formula!1107)) (not (=> ((_ is Variable!1116) f!211) (= (eval!210 f!211) (eval!210 (nnf!206 f!211))))) ))
(check-sat)
(exit)

