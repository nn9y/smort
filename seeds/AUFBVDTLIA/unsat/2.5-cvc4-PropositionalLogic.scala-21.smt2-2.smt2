(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1256 0)) (((And!1257 (lhs!1258 Formula!1256) (rhs!1259 Formula!1256)) (Implies!1260 (lhs!1261 Formula!1256) (rhs!1262 Formula!1256)) (Literal!1263 (id!1264 (_ BitVec 32))) (Not!1265 (f!1266 Formula!1256)) (Or!1267 (lhs!1268 Formula!1256) (rhs!1269 Formula!1256)))
))
(declare-fun error_value!1270 () Bool)
(declare-fun isNNF!212 (Formula!1256) Bool)
(declare-fun error_value!1271 () Formula!1256)
(declare-fun nnf!210 (Formula!1256) Formula!1256)
(assert (forall ((f!211 Formula!1256)) (= (isNNF!212 f!211) (ite ((_ is And!1257) f!211) (and (and (isNNF!212 (lhs!1258 f!211)) (isNNF!212 (lhs!1258 f!211))) (isNNF!212 (rhs!1259 f!211))) (ite ((_ is Or!1267) f!211) (and (and (isNNF!212 (lhs!1268 f!211)) (isNNF!212 (lhs!1268 f!211))) (isNNF!212 (rhs!1269 f!211))) (ite ((_ is Implies!1260) f!211) (and (and (isNNF!212 (lhs!1261 f!211)) (isNNF!212 (lhs!1261 f!211))) (isNNF!212 (rhs!1262 f!211))) (ite (and (and ((_ is Not!1265) f!211) ((_ is Not!1265) f!211)) ((_ is Literal!1263) (f!1266 f!211))) true (ite ((_ is Not!1265) f!211) false (ite ((_ is Literal!1263) f!211) true error_value!1270))))))) ))
(assert (forall ((formula!209 Formula!1256)) (= (nnf!210 formula!209) (ite ((_ is And!1257) formula!209) (And!1257 (nnf!210 (lhs!1258 formula!209)) (nnf!210 (rhs!1259 formula!209))) (ite ((_ is Or!1267) formula!209) (Or!1267 (nnf!210 (lhs!1268 formula!209)) (nnf!210 (rhs!1269 formula!209))) (ite ((_ is Implies!1260) formula!209) (Implies!1260 (nnf!210 (lhs!1261 formula!209)) (nnf!210 (rhs!1262 formula!209))) (ite (and (and ((_ is Not!1265) formula!209) ((_ is Not!1265) formula!209)) ((_ is And!1257) (f!1266 formula!209))) (Or!1267 (nnf!210 (Not!1265 (lhs!1258 (f!1266 formula!209)))) (nnf!210 (Not!1265 (rhs!1259 (f!1266 formula!209))))) (ite (and (and ((_ is Not!1265) formula!209) ((_ is Not!1265) formula!209)) ((_ is Or!1267) (f!1266 formula!209))) (And!1257 (nnf!210 (Not!1265 (lhs!1268 (f!1266 formula!209)))) (nnf!210 (Not!1265 (rhs!1269 (f!1266 formula!209))))) (ite (and (and ((_ is Not!1265) formula!209) ((_ is Not!1265) formula!209)) ((_ is Implies!1260) (f!1266 formula!209))) (And!1257 (nnf!210 (lhs!1261 (f!1266 formula!209))) (nnf!210 (Not!1265 (rhs!1262 (f!1266 formula!209))))) (ite (and (and ((_ is Not!1265) formula!209) ((_ is Not!1265) formula!209)) ((_ is Not!1265) (f!1266 formula!209))) (nnf!210 (f!1266 (f!1266 formula!209))) (ite (and (and ((_ is Not!1265) formula!209) ((_ is Not!1265) formula!209)) ((_ is Literal!1263) (f!1266 formula!209))) formula!209 (ite ((_ is Literal!1263) formula!209) formula!209 error_value!1271)))))))))) ))
(assert (not (forall ((BOUND_VARIABLE_523 Formula!1256) (BOUND_VARIABLE_524 Formula!1256)) (or (and (isNNF!212 BOUND_VARIABLE_523) (not (= (nnf!210 BOUND_VARIABLE_523) BOUND_VARIABLE_523))) (not (isNNF!212 (Implies!1260 BOUND_VARIABLE_523 BOUND_VARIABLE_524))) (= (nnf!210 (Implies!1260 BOUND_VARIABLE_523 BOUND_VARIABLE_524)) (Implies!1260 BOUND_VARIABLE_523 (nnf!210 BOUND_VARIABLE_524)))) )))
(check-sat)
(exit)

