(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1304 0)) (((And!1305 (lhs!1306 Formula!1304) (rhs!1307 Formula!1304)) (Implies!1308 (lhs!1309 Formula!1304) (rhs!1310 Formula!1304)) (Literal!1311 (id!1312 (_ BitVec 32))) (Not!1313 (f!1314 Formula!1304)) (Or!1315 (lhs!1316 Formula!1304) (rhs!1317 Formula!1304)))
))
(declare-fun error_value!1318 () Bool)
(declare-fun isNNF!212 (Formula!1304) Bool)
(declare-fun error_value!1319 () Formula!1304)
(declare-fun nnf!210 (Formula!1304) Formula!1304)
(assert (forall ((f!211 Formula!1304)) (= (isNNF!212 f!211) (ite ((_ is And!1305) f!211) (and (and (isNNF!212 (lhs!1306 f!211)) (isNNF!212 (lhs!1306 f!211))) (isNNF!212 (rhs!1307 f!211))) (ite ((_ is Or!1315) f!211) (and (and (isNNF!212 (lhs!1316 f!211)) (isNNF!212 (lhs!1316 f!211))) (isNNF!212 (rhs!1317 f!211))) (ite ((_ is Implies!1308) f!211) (and (and (isNNF!212 (lhs!1309 f!211)) (isNNF!212 (lhs!1309 f!211))) (isNNF!212 (rhs!1310 f!211))) (ite (and (and ((_ is Not!1313) f!211) ((_ is Not!1313) f!211)) ((_ is Literal!1311) (f!1314 f!211))) true (ite ((_ is Not!1313) f!211) false (ite ((_ is Literal!1311) f!211) true error_value!1318))))))) ))
(assert (forall ((formula!209 Formula!1304)) (= (nnf!210 formula!209) (ite ((_ is And!1305) formula!209) (And!1305 (nnf!210 (lhs!1306 formula!209)) (nnf!210 (rhs!1307 formula!209))) (ite ((_ is Or!1315) formula!209) (Or!1315 (nnf!210 (lhs!1316 formula!209)) (nnf!210 (rhs!1317 formula!209))) (ite ((_ is Implies!1308) formula!209) (Implies!1308 (nnf!210 (lhs!1309 formula!209)) (nnf!210 (rhs!1310 formula!209))) (ite (and (and ((_ is Not!1313) formula!209) ((_ is Not!1313) formula!209)) ((_ is And!1305) (f!1314 formula!209))) (Or!1315 (nnf!210 (Not!1313 (lhs!1306 (f!1314 formula!209)))) (nnf!210 (Not!1313 (rhs!1307 (f!1314 formula!209))))) (ite (and (and ((_ is Not!1313) formula!209) ((_ is Not!1313) formula!209)) ((_ is Or!1315) (f!1314 formula!209))) (And!1305 (nnf!210 (Not!1313 (lhs!1316 (f!1314 formula!209)))) (nnf!210 (Not!1313 (rhs!1317 (f!1314 formula!209))))) (ite (and (and ((_ is Not!1313) formula!209) ((_ is Not!1313) formula!209)) ((_ is Implies!1308) (f!1314 formula!209))) (And!1305 (nnf!210 (lhs!1309 (f!1314 formula!209))) (nnf!210 (Not!1313 (rhs!1310 (f!1314 formula!209))))) (ite (and (and ((_ is Not!1313) formula!209) ((_ is Not!1313) formula!209)) ((_ is Not!1313) (f!1314 formula!209))) (nnf!210 (f!1314 (f!1314 formula!209))) (ite (and (and ((_ is Not!1313) formula!209) ((_ is Not!1313) formula!209)) ((_ is Literal!1311) (f!1314 formula!209))) formula!209 (ite ((_ is Literal!1311) formula!209) formula!209 error_value!1319)))))))))) ))
(assert (not (forall ((BOUND_VARIABLE_523 Formula!1304) (BOUND_VARIABLE_524 Formula!1304)) (or (and (isNNF!212 BOUND_VARIABLE_523) (not (= (nnf!210 BOUND_VARIABLE_523) BOUND_VARIABLE_523))) (not (isNNF!212 (Or!1315 BOUND_VARIABLE_523 BOUND_VARIABLE_524))) (= (nnf!210 (Or!1315 BOUND_VARIABLE_523 BOUND_VARIABLE_524)) (Or!1315 BOUND_VARIABLE_523 (nnf!210 BOUND_VARIABLE_524)))) )))
(check-sat)
(exit)

