(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Statement!1420 0)(Expression!1442 0)(List!1481 0)) (((Assign!1421 (varID!1422 (_ BitVec 32)) (expr!1423 Expression!1442)) (Block!1424 (body!1425 List!1481)) (For!1426 (init!1427 Statement!1420) (expr!1428 Expression!1442) (step!1429 Statement!1420) (body!1430 Statement!1420)) (IfThenElse!1431 (expr!1432 Expression!1442) (then!1433 Statement!1420) (elze!1434 Statement!1420)) (Print!1435 (msg!1436 (_ BitVec 32)) (varID!1437 (_ BitVec 32))) (Skip!1438) (While!1439 (expr!1440 Expression!1442) (body!1441 Statement!1420)))
((And!1443 (lhs!1444 Expression!1442) (rhs!1445 Expression!1442)) (Division!1446 (lhs!1447 Expression!1442) (rhs!1448 Expression!1442)) (Equals!1449 (lhs!1450 Expression!1442) (rhs!1451 Expression!1442)) (GreaterThan!1452 (lhs!1453 Expression!1442) (rhs!1454 Expression!1442)) (IntLiteral!1455 (value!1456 (_ BitVec 32))) (LessThan!1457 (lhs!1458 Expression!1442) (rhs!1459 Expression!1442)) (Minus!1460 (lhs!1461 Expression!1442) (rhs!1462 Expression!1442)) (Modulo!1463 (lhs!1464 Expression!1442) (rhs!1465 Expression!1442)) (Neg!1466 (expr!1467 Expression!1442)) (Not!1468 (expr!1469 Expression!1442)) (Or!1470 (lhs!1471 Expression!1442) (rhs!1472 Expression!1442)) (Plus!1473 (lhs!1474 Expression!1442) (rhs!1475 Expression!1442)) (Times!1476 (lhs!1477 Expression!1442) (rhs!1478 Expression!1442)) (Var!1479 (varID!1480 (_ BitVec 32))))
((Cons!1482 (head!1483 Statement!1420) (tail!1484 List!1481)) (Nil!1485))
))
(declare-fun error_value!1486 () Bool)
(declare-fun isForFree!225 (Statement!1420) Bool)
(declare-fun isForFreeList!223 (List!1481) Bool)
(declare-fun error_value!1487 () List!1481)
(declare-fun eliminateForLoopsList!215 (List!1481) List!1481)
(declare-fun eliminateForLoops!217 (Statement!1420) Statement!1420)
(assert (forall ((stat!224 Statement!1420)) (= (isForFree!225 stat!224) (ite ((_ is Block!1424) stat!224) (isForFreeList!223 (body!1425 stat!224)) (ite ((_ is IfThenElse!1431) stat!224) (and (and (isForFree!225 (then!1433 stat!224)) (isForFree!225 (then!1433 stat!224))) (isForFree!225 (elze!1434 stat!224))) (ite ((_ is While!1439) stat!224) (isForFree!225 (body!1441 stat!224)) (ite ((_ is For!1426) stat!224) false true))))) ))
(assert (forall ((l!222 List!1481)) (= (isForFreeList!223 l!222) (ite ((_ is Nil!1485) l!222) true (ite ((_ is Cons!1482) l!222) (and (and (isForFree!225 (head!1483 l!222)) (isForFree!225 (head!1483 l!222))) (isForFreeList!223 (tail!1484 l!222))) error_value!1486))) ))
(assert (forall ((l!214 List!1481)) (= (eliminateForLoopsList!215 l!214) (ite ((_ is Nil!1485) l!214) Nil!1485 (ite ((_ is Cons!1482) l!214) (Cons!1482 (eliminateForLoops!217 (head!1483 l!214)) (eliminateForLoopsList!215 (tail!1484 l!214))) error_value!1487))) ))
(assert (forall ((stat!216 Statement!1420)) (= (eliminateForLoops!217 stat!216) (ite ((_ is Block!1424) stat!216) (Block!1424 (eliminateForLoopsList!215 (body!1425 stat!216))) (ite ((_ is IfThenElse!1431) stat!216) (IfThenElse!1431 (expr!1432 stat!216) (eliminateForLoops!217 (then!1433 stat!216)) (eliminateForLoops!217 (elze!1434 stat!216))) (ite ((_ is While!1439) stat!216) (While!1439 (expr!1440 stat!216) (eliminateForLoops!217 (body!1441 stat!216))) (ite ((_ is For!1426) stat!216) (Block!1424 (Cons!1482 (eliminateForLoops!217 (init!1427 stat!216)) (Cons!1482 (While!1439 (expr!1428 stat!216) (Block!1424 (Cons!1482 (eliminateForLoops!217 (body!1430 stat!216)) (Cons!1482 (eliminateForLoops!217 (step!1429 stat!216)) Nil!1485)))) Nil!1485))) stat!216))))) ))
(assert (exists ((stat!216 Statement!1420)) (not (=> ((_ is Assign!1421) stat!216) (isForFree!225 (ite ((_ is Block!1424) stat!216) (Block!1424 (eliminateForLoopsList!215 (body!1425 stat!216))) (ite ((_ is IfThenElse!1431) stat!216) (IfThenElse!1431 (expr!1432 stat!216) (eliminateForLoops!217 (then!1433 stat!216)) (eliminateForLoops!217 (elze!1434 stat!216))) (ite ((_ is While!1439) stat!216) (While!1439 (expr!1440 stat!216) (eliminateForLoops!217 (body!1441 stat!216))) (ite ((_ is For!1426) stat!216) (Block!1424 (Cons!1482 (eliminateForLoops!217 (init!1427 stat!216)) (Cons!1482 (While!1439 (expr!1428 stat!216) (Block!1424 (Cons!1482 (eliminateForLoops!217 (body!1430 stat!216)) (Cons!1482 (eliminateForLoops!217 (step!1429 stat!216)) Nil!1485)))) Nil!1485))) stat!216))))))) ))
(check-sat)
(exit)

