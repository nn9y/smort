(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1093 0)) (((And!1094 (lhs!1095 Formula!1093) (rhs!1096 Formula!1093)) (Not!1097 (f!1098 Formula!1093)) (Or!1099 (lhs!1100 Formula!1093) (rhs!1101 Formula!1093)) (Variable!1102 (id!1103 (_ BitVec 32))))
))
(declare-fun error_value!1104 () Bool)
(declare-fun error_value!1105 () Formula!1093)
(declare-fun error_value!1106 () Bool)
(declare-fun eval!210 (Formula!1093) Bool)
(declare-fun nnf!206 (Formula!1093) Formula!1093)
(declare-fun isNNF!208 (Formula!1093) Bool)
(assert (forall ((formula!209 Formula!1093)) (= (eval!210 formula!209) (ite ((_ is And!1094) formula!209) (and (and (eval!210 (lhs!1095 formula!209)) (eval!210 (lhs!1095 formula!209))) (eval!210 (rhs!1096 formula!209))) (ite ((_ is Or!1099) formula!209) (or (or (eval!210 (lhs!1100 formula!209)) (eval!210 (lhs!1100 formula!209))) (eval!210 (rhs!1101 formula!209))) (ite ((_ is Not!1097) formula!209) (not (eval!210 (f!1098 formula!209))) (ite ((_ is Variable!1102) formula!209) (bvsgt (id!1103 formula!209) (_ bv42 32)) error_value!1104))))) ))
(assert (forall ((formula!205 Formula!1093)) (= (nnf!206 formula!205) (ite ((_ is And!1094) formula!205) (And!1094 (nnf!206 (lhs!1095 formula!205)) (nnf!206 (rhs!1096 formula!205))) (ite ((_ is Or!1099) formula!205) (Or!1099 (nnf!206 (lhs!1100 formula!205)) (nnf!206 (rhs!1101 formula!205))) (ite (and (and ((_ is Not!1097) formula!205) ((_ is Not!1097) formula!205)) ((_ is And!1094) (f!1098 formula!205))) (Or!1099 (nnf!206 (Not!1097 (lhs!1095 (f!1098 formula!205)))) (nnf!206 (Not!1097 (rhs!1096 (f!1098 formula!205))))) (ite (and (and ((_ is Not!1097) formula!205) ((_ is Not!1097) formula!205)) ((_ is Or!1099) (f!1098 formula!205))) (And!1094 (nnf!206 (Not!1097 (lhs!1100 (f!1098 formula!205)))) (nnf!206 (Not!1097 (rhs!1101 (f!1098 formula!205))))) (ite (and (and ((_ is Not!1097) formula!205) ((_ is Not!1097) formula!205)) ((_ is Not!1097) (f!1098 formula!205))) (nnf!206 (f!1098 (f!1098 formula!205))) (ite ((_ is Not!1097) formula!205) formula!205 (ite ((_ is Variable!1102) formula!205) formula!205 error_value!1105)))))))) ))
(assert (forall ((f!207 Formula!1093)) (= (isNNF!208 f!207) (ite ((_ is And!1094) f!207) (and (and (isNNF!208 (lhs!1095 f!207)) (isNNF!208 (lhs!1095 f!207))) (isNNF!208 (rhs!1096 f!207))) (ite ((_ is Or!1099) f!207) (and (and (isNNF!208 (lhs!1100 f!207)) (isNNF!208 (lhs!1100 f!207))) (isNNF!208 (rhs!1101 f!207))) (ite ((_ is Not!1097) f!207) false (ite ((_ is Variable!1102) f!207) true error_value!1106))))) ))
(assert (not (forall ((BOUND_VARIABLE_505 Formula!1093) (BOUND_VARIABLE_506 Formula!1093)) (or (= (eval!210 (nnf!206 BOUND_VARIABLE_506)) (not (eval!210 BOUND_VARIABLE_506))) (= (eval!210 BOUND_VARIABLE_505) (not (eval!210 (nnf!206 BOUND_VARIABLE_505)))) (= (eval!210 (Or!1099 BOUND_VARIABLE_505 BOUND_VARIABLE_506)) (eval!210 (nnf!206 (Or!1099 BOUND_VARIABLE_505 BOUND_VARIABLE_506))))) )))
(check-sat)
(exit)

