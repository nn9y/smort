(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1172 0)) (((And!1173 (lhs!1174 Formula!1172) (rhs!1175 Formula!1172)) (Implies!1176 (lhs!1177 Formula!1172) (rhs!1178 Formula!1172)) (Literal!1179 (id!1180 (_ BitVec 32))) (Not!1181 (f!1182 Formula!1172)) (Or!1183 (lhs!1184 Formula!1172) (rhs!1185 Formula!1172)))
))
(declare-fun error_value!1186 () Bool)
(declare-fun isNNF!212 (Formula!1172) Bool)
(declare-fun error_value!1187 () Formula!1172)
(declare-fun error_value!1188 () Bool)
(declare-fun simplify!206 (Formula!1172) Formula!1172)
(declare-fun isSimplified!208 (Formula!1172) Bool)
(assert (forall ((f!211 Formula!1172)) (= (isNNF!212 f!211) (ite ((_ is And!1173) f!211) (and (and (isNNF!212 (lhs!1174 f!211)) (isNNF!212 (lhs!1174 f!211))) (isNNF!212 (rhs!1175 f!211))) (ite ((_ is Or!1183) f!211) (and (and (isNNF!212 (lhs!1184 f!211)) (isNNF!212 (lhs!1184 f!211))) (isNNF!212 (rhs!1185 f!211))) (ite ((_ is Implies!1176) f!211) (and (and (isNNF!212 (lhs!1177 f!211)) (isNNF!212 (lhs!1177 f!211))) (isNNF!212 (rhs!1178 f!211))) (ite (and (and ((_ is Not!1181) f!211) ((_ is Not!1181) f!211)) ((_ is Literal!1179) (f!1182 f!211))) true (ite ((_ is Not!1181) f!211) false (ite ((_ is Literal!1179) f!211) true error_value!1186))))))) ))
(assert (forall ((f!205 Formula!1172)) (= (simplify!206 f!205) (ite ((_ is And!1173) f!205) (And!1173 (simplify!206 (lhs!1174 f!205)) (simplify!206 (rhs!1175 f!205))) (ite ((_ is Or!1183) f!205) (Or!1183 (simplify!206 (lhs!1184 f!205)) (simplify!206 (rhs!1185 f!205))) (ite ((_ is Implies!1176) f!205) (Or!1183 (Not!1181 (simplify!206 (lhs!1177 f!205))) (simplify!206 (rhs!1178 f!205))) (ite ((_ is Not!1181) f!205) (Not!1181 (simplify!206 (f!1182 f!205))) (ite ((_ is Literal!1179) f!205) f!205 error_value!1187)))))) ))
(assert (forall ((f!207 Formula!1172)) (= (isSimplified!208 f!207) (ite ((_ is And!1173) f!207) (and (and (isSimplified!208 (lhs!1174 f!207)) (isSimplified!208 (lhs!1174 f!207))) (isSimplified!208 (rhs!1175 f!207))) (ite ((_ is Or!1183) f!207) (and (and (isSimplified!208 (lhs!1184 f!207)) (isSimplified!208 (lhs!1184 f!207))) (isSimplified!208 (rhs!1185 f!207))) (ite ((_ is Implies!1176) f!207) false (ite ((_ is Not!1181) f!207) (isSimplified!208 (f!1182 f!207)) (ite ((_ is Literal!1179) f!207) true error_value!1188)))))) ))
(assert (not (forall ((BOUND_VARIABLE_502 Formula!1172) (BOUND_VARIABLE_503 Formula!1172)) (or (isNNF!212 BOUND_VARIABLE_503) (and (isNNF!212 BOUND_VARIABLE_502) (not (isNNF!212 (simplify!206 BOUND_VARIABLE_502)))) (not (isNNF!212 (Implies!1176 BOUND_VARIABLE_502 BOUND_VARIABLE_503))) (isNNF!212 (simplify!206 (Implies!1176 BOUND_VARIABLE_502 BOUND_VARIABLE_503)))) )))
(check-sat)
(exit)

