(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Statement!2164 0)(Expression!2186 0)(List!2225 0)) (((Assign!2165 (varID!2166 (_ BitVec 32)) (expr!2167 Expression!2186)) (Block!2168 (body!2169 List!2225)) (For!2170 (init!2171 Statement!2164) (expr!2172 Expression!2186) (step!2173 Statement!2164) (body!2174 Statement!2164)) (IfThenElse!2175 (expr!2176 Expression!2186) (then!2177 Statement!2164) (elze!2178 Statement!2164)) (Print!2179 (msg!2180 (_ BitVec 32)) (varID!2181 (_ BitVec 32))) (Skip!2182) (While!2183 (expr!2184 Expression!2186) (body!2185 Statement!2164)))
((And!2187 (lhs!2188 Expression!2186) (rhs!2189 Expression!2186)) (Division!2190 (lhs!2191 Expression!2186) (rhs!2192 Expression!2186)) (Equals!2193 (lhs!2194 Expression!2186) (rhs!2195 Expression!2186)) (GreaterThan!2196 (lhs!2197 Expression!2186) (rhs!2198 Expression!2186)) (IntLiteral!2199 (value!2200 (_ BitVec 32))) (LessThan!2201 (lhs!2202 Expression!2186) (rhs!2203 Expression!2186)) (Minus!2204 (lhs!2205 Expression!2186) (rhs!2206 Expression!2186)) (Modulo!2207 (lhs!2208 Expression!2186) (rhs!2209 Expression!2186)) (Neg!2210 (expr!2211 Expression!2186)) (Not!2212 (expr!2213 Expression!2186)) (Or!2214 (lhs!2215 Expression!2186) (rhs!2216 Expression!2186)) (Plus!2217 (lhs!2218 Expression!2186) (rhs!2219 Expression!2186)) (Times!2220 (lhs!2221 Expression!2186) (rhs!2222 Expression!2186)) (Var!2223 (varID!2224 (_ BitVec 32))))
((Cons!2226 (head!2227 Statement!2164) (tail!2228 List!2225)) (Nil!2229))
))
(declare-fun error_value!2230 () Bool)
(declare-fun isWhileFree!221 (Statement!2164) Bool)
(declare-fun isWhileFreeList!219 (List!2225) Bool)
(declare-fun error_value!2231 () List!2225)
(declare-fun eliminateWhileLoops!213 (Statement!2164) Statement!2164)
(declare-fun eliminateWhileLoopsList!211 (List!2225) List!2225)
(assert (forall ((stat!220 Statement!2164)) (= (isWhileFree!221 stat!220) (ite ((_ is Block!2168) stat!220) (isWhileFreeList!219 (body!2169 stat!220)) (ite ((_ is IfThenElse!2175) stat!220) (and (and (isWhileFree!221 (then!2177 stat!220)) (isWhileFree!221 (then!2177 stat!220))) (isWhileFree!221 (elze!2178 stat!220))) (ite ((_ is While!2183) stat!220) false (ite ((_ is For!2170) stat!220) (and (and (and (isWhileFree!221 (init!2171 stat!220)) (isWhileFree!221 (init!2171 stat!220))) (isWhileFree!221 (step!2173 stat!220))) (isWhileFree!221 (body!2174 stat!220))) true))))) ))
(assert (forall ((l!218 List!2225)) (= (isWhileFreeList!219 l!218) (ite ((_ is Nil!2229) l!218) true (ite ((_ is Cons!2226) l!218) (and (and (isWhileFree!221 (head!2227 l!218)) (isWhileFree!221 (head!2227 l!218))) (isWhileFreeList!219 (tail!2228 l!218))) error_value!2230))) ))
(assert (forall ((stat!212 Statement!2164)) (= (eliminateWhileLoops!213 stat!212) (ite ((_ is Block!2168) stat!212) (Block!2168 (eliminateWhileLoopsList!211 (body!2169 stat!212))) (ite ((_ is IfThenElse!2175) stat!212) (IfThenElse!2175 (expr!2176 stat!212) (eliminateWhileLoops!213 (then!2177 stat!212)) (eliminateWhileLoops!213 (elze!2178 stat!212))) (ite ((_ is While!2183) stat!212) (For!2170 Skip!2182 (expr!2184 stat!212) Skip!2182 (eliminateWhileLoops!213 (body!2185 stat!212))) (ite ((_ is For!2170) stat!212) (For!2170 (eliminateWhileLoops!213 (init!2171 stat!212)) (expr!2172 stat!212) (eliminateWhileLoops!213 (step!2173 stat!212)) (eliminateWhileLoops!213 (body!2174 stat!212))) stat!212))))) ))
(assert (forall ((l!210 List!2225)) (= (eliminateWhileLoopsList!211 l!210) (ite ((_ is Nil!2229) l!210) Nil!2229 (ite ((_ is Cons!2226) l!210) (Cons!2226 (eliminateWhileLoops!213 (head!2227 l!210)) (eliminateWhileLoopsList!211 (tail!2228 l!210))) error_value!2231))) ))
(assert (exists ((stat!228 Statement!2164)) (not (=> (and (and (and (and (and ((_ is For!2170) stat!228) ((_ is For!2170) stat!228)) (isWhileFree!221 stat!228)) (=> (isWhileFree!221 (init!2171 stat!228)) (= (eliminateWhileLoops!213 (init!2171 stat!228)) (init!2171 stat!228)))) (=> (isWhileFree!221 (step!2173 stat!228)) (= (eliminateWhileLoops!213 (step!2173 stat!228)) (step!2173 stat!228)))) (=> (isWhileFree!221 (body!2174 stat!228)) (= (eliminateWhileLoops!213 (body!2174 stat!228)) (body!2174 stat!228)))) (= (eliminateWhileLoops!213 stat!228) stat!228))) ))
(check-sat)
(exit)

