(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1272 0)) (((And!1273 (lhs!1274 Formula!1272) (rhs!1275 Formula!1272)) (Implies!1276 (lhs!1277 Formula!1272) (rhs!1278 Formula!1272)) (Literal!1279 (id!1280 (_ BitVec 32))) (Not!1281 (f!1282 Formula!1272)) (Or!1283 (lhs!1284 Formula!1272) (rhs!1285 Formula!1272)))
))
(declare-fun error_value!1286 () Bool)
(declare-fun isNNF!212 (Formula!1272) Bool)
(declare-fun error_value!1287 () Formula!1272)
(declare-fun nnf!210 (Formula!1272) Formula!1272)
(assert (forall ((f!211 Formula!1272)) (= (isNNF!212 f!211) (ite ((_ is And!1273) f!211) (and (and (isNNF!212 (lhs!1274 f!211)) (isNNF!212 (lhs!1274 f!211))) (isNNF!212 (rhs!1275 f!211))) (ite ((_ is Or!1283) f!211) (and (and (isNNF!212 (lhs!1284 f!211)) (isNNF!212 (lhs!1284 f!211))) (isNNF!212 (rhs!1285 f!211))) (ite ((_ is Implies!1276) f!211) (and (and (isNNF!212 (lhs!1277 f!211)) (isNNF!212 (lhs!1277 f!211))) (isNNF!212 (rhs!1278 f!211))) (ite (and (and ((_ is Not!1281) f!211) ((_ is Not!1281) f!211)) ((_ is Literal!1279) (f!1282 f!211))) true (ite ((_ is Not!1281) f!211) false (ite ((_ is Literal!1279) f!211) true error_value!1286))))))) ))
(assert (forall ((formula!209 Formula!1272)) (= (nnf!210 formula!209) (ite ((_ is And!1273) formula!209) (And!1273 (nnf!210 (lhs!1274 formula!209)) (nnf!210 (rhs!1275 formula!209))) (ite ((_ is Or!1283) formula!209) (Or!1283 (nnf!210 (lhs!1284 formula!209)) (nnf!210 (rhs!1285 formula!209))) (ite ((_ is Implies!1276) formula!209) (Implies!1276 (nnf!210 (lhs!1277 formula!209)) (nnf!210 (rhs!1278 formula!209))) (ite (and (and ((_ is Not!1281) formula!209) ((_ is Not!1281) formula!209)) ((_ is And!1273) (f!1282 formula!209))) (Or!1283 (nnf!210 (Not!1281 (lhs!1274 (f!1282 formula!209)))) (nnf!210 (Not!1281 (rhs!1275 (f!1282 formula!209))))) (ite (and (and ((_ is Not!1281) formula!209) ((_ is Not!1281) formula!209)) ((_ is Or!1283) (f!1282 formula!209))) (And!1273 (nnf!210 (Not!1281 (lhs!1284 (f!1282 formula!209)))) (nnf!210 (Not!1281 (rhs!1285 (f!1282 formula!209))))) (ite (and (and ((_ is Not!1281) formula!209) ((_ is Not!1281) formula!209)) ((_ is Implies!1276) (f!1282 formula!209))) (And!1273 (nnf!210 (lhs!1277 (f!1282 formula!209))) (nnf!210 (Not!1281 (rhs!1278 (f!1282 formula!209))))) (ite (and (and ((_ is Not!1281) formula!209) ((_ is Not!1281) formula!209)) ((_ is Not!1281) (f!1282 formula!209))) (nnf!210 (f!1282 (f!1282 formula!209))) (ite (and (and ((_ is Not!1281) formula!209) ((_ is Not!1281) formula!209)) ((_ is Literal!1279) (f!1282 formula!209))) formula!209 (ite ((_ is Literal!1279) formula!209) formula!209 error_value!1287)))))))))) ))
(assert false)
(check-sat)
(exit)

