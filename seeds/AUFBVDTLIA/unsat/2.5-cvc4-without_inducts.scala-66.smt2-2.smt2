(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2088 0)) (((succ!2089 (pred!2090 Nat!2088)) (zero!2091))
))
(declare-fun error_value!2092 () Bool)
(declare-fun nmin!249 (Nat!2088 Nat!2088) Nat!2088)
(declare-fun less!231 (Nat!2088 Nat!2088) Bool)
(declare-fun leq!234 (Nat!2088 Nat!2088) Bool)
(assert (forall ((n!247 Nat!2088) (m!248 Nat!2088)) (= (nmin!249 n!247 m!248) (ite (less!231 n!247 m!248) n!247 m!248)) ))
(assert (forall ((x!229 Nat!2088) (y!230 Nat!2088)) (= (less!231 x!229 y!230) (ite ((_ is zero!2091) y!230) false (ite (and (and ((_ is zero!2091) x!229) ((_ is zero!2091) x!229)) ((_ is succ!2089) y!230)) true (ite (and (and ((_ is succ!2089) x!229) ((_ is succ!2089) x!229)) ((_ is succ!2089) y!230)) (less!231 (pred!2090 x!229) (pred!2090 y!230)) error_value!2092)))) ))
(assert (forall ((x!232 Nat!2088) (y!233 Nat!2088)) (= (leq!234 x!232 y!233) (or (or (= x!232 y!233) (= x!232 y!233)) (less!231 x!232 y!233))) ))
(assert (not (forall ((a!400 Nat!2088) (b!401 Nat!2088)) (leq!234 (nmin!249 a!400 b!401) b!401) )))
(check-sat)
(exit)

