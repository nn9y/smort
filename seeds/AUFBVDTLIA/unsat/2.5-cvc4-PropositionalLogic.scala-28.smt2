(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1368 0)) (((And!1369 (lhs!1370 Formula!1368) (rhs!1371 Formula!1368)) (Implies!1372 (lhs!1373 Formula!1368) (rhs!1374 Formula!1368)) (Literal!1375 (id!1376 (_ BitVec 32))) (Not!1377 (f!1378 Formula!1368)) (Or!1379 (lhs!1380 Formula!1368) (rhs!1381 Formula!1368)))
))
(declare-fun error_value!1382 () Bool)
(declare-fun isSimplified!208 (Formula!1368) Bool)
(declare-fun error_value!1383 () Formula!1368)
(declare-fun simplify!206 (Formula!1368) Formula!1368)
(assert (forall ((f!207 Formula!1368)) (= (isSimplified!208 f!207) (ite ((_ is And!1369) f!207) (and (and (isSimplified!208 (lhs!1370 f!207)) (isSimplified!208 (lhs!1370 f!207))) (isSimplified!208 (rhs!1371 f!207))) (ite ((_ is Or!1379) f!207) (and (and (isSimplified!208 (lhs!1380 f!207)) (isSimplified!208 (lhs!1380 f!207))) (isSimplified!208 (rhs!1381 f!207))) (ite ((_ is Implies!1372) f!207) false (ite ((_ is Not!1377) f!207) (isSimplified!208 (f!1378 f!207)) (ite ((_ is Literal!1375) f!207) true error_value!1382)))))) ))
(assert (forall ((f!205 Formula!1368)) (= (simplify!206 f!205) (ite ((_ is And!1369) f!205) (And!1369 (simplify!206 (lhs!1370 f!205)) (simplify!206 (rhs!1371 f!205))) (ite ((_ is Or!1379) f!205) (Or!1379 (simplify!206 (lhs!1380 f!205)) (simplify!206 (rhs!1381 f!205))) (ite ((_ is Implies!1372) f!205) (Or!1379 (Not!1377 (simplify!206 (lhs!1373 f!205))) (simplify!206 (rhs!1374 f!205))) (ite ((_ is Not!1377) f!205) (Not!1377 (simplify!206 (f!1378 f!205))) (ite ((_ is Literal!1375) f!205) f!205 error_value!1383)))))) ))
(assert (exists ((f!221 Formula!1368)) (not (=> (and (and (and ((_ is Not!1377) f!221) ((_ is Not!1377) f!221)) (isSimplified!208 f!221)) (=> (isSimplified!208 (f!1378 f!221)) (= (simplify!206 (f!1378 f!221)) (f!1378 f!221)))) (= (simplify!206 f!221) f!221))) ))
(check-sat)
(exit)

