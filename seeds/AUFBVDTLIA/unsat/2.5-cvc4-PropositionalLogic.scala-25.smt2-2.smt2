(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1320 0)) (((And!1321 (lhs!1322 Formula!1320) (rhs!1323 Formula!1320)) (Implies!1324 (lhs!1325 Formula!1320) (rhs!1326 Formula!1320)) (Literal!1327 (id!1328 (_ BitVec 32))) (Not!1329 (f!1330 Formula!1320)) (Or!1331 (lhs!1332 Formula!1320) (rhs!1333 Formula!1320)))
))
(declare-fun error_value!1334 () Bool)
(declare-fun isSimplified!208 (Formula!1320) Bool)
(declare-fun error_value!1335 () Formula!1320)
(declare-fun simplify!206 (Formula!1320) Formula!1320)
(assert (forall ((f!207 Formula!1320)) (= (isSimplified!208 f!207) (ite ((_ is And!1321) f!207) (and (and (isSimplified!208 (lhs!1322 f!207)) (isSimplified!208 (lhs!1322 f!207))) (isSimplified!208 (rhs!1323 f!207))) (ite ((_ is Or!1331) f!207) (and (and (isSimplified!208 (lhs!1332 f!207)) (isSimplified!208 (lhs!1332 f!207))) (isSimplified!208 (rhs!1333 f!207))) (ite ((_ is Implies!1324) f!207) false (ite ((_ is Not!1329) f!207) (isSimplified!208 (f!1330 f!207)) (ite ((_ is Literal!1327) f!207) true error_value!1334)))))) ))
(assert (forall ((f!205 Formula!1320)) (= (simplify!206 f!205) (ite ((_ is And!1321) f!205) (And!1321 (simplify!206 (lhs!1322 f!205)) (simplify!206 (rhs!1323 f!205))) (ite ((_ is Or!1331) f!205) (Or!1331 (simplify!206 (lhs!1332 f!205)) (simplify!206 (rhs!1333 f!205))) (ite ((_ is Implies!1324) f!205) (Or!1331 (Not!1329 (simplify!206 (lhs!1325 f!205))) (simplify!206 (rhs!1326 f!205))) (ite ((_ is Not!1329) f!205) (Not!1329 (simplify!206 (f!1330 f!205))) (ite ((_ is Literal!1327) f!205) f!205 error_value!1335)))))) ))
(assert (not (forall ((BOUND_VARIABLE_433 Formula!1320) (BOUND_VARIABLE_434 Formula!1320)) (or (and (isSimplified!208 BOUND_VARIABLE_433) (not (= (simplify!206 BOUND_VARIABLE_433) BOUND_VARIABLE_433))) (not (isSimplified!208 (And!1321 BOUND_VARIABLE_433 BOUND_VARIABLE_434))) (= (simplify!206 (And!1321 BOUND_VARIABLE_433 BOUND_VARIABLE_434)) (And!1321 BOUND_VARIABLE_433 (simplify!206 BOUND_VARIABLE_434)))) )))
(check-sat)
(exit)

