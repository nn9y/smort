(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1039 0)) (((And!1040 (lhs!1041 Formula!1039) (rhs!1042 Formula!1039)) (Not!1043 (f!1044 Formula!1039)) (Or!1045 (lhs!1046 Formula!1039) (rhs!1047 Formula!1039)) (Variable!1048 (id!1049 (_ BitVec 32))))
))
(declare-fun error_value!1050 () Bool)
(declare-fun error_value!1051 () Formula!1039)
(declare-fun error_value!1052 () Bool)
(declare-fun eval!210 (Formula!1039) Bool)
(declare-fun nnf!206 (Formula!1039) Formula!1039)
(declare-fun isNNF!208 (Formula!1039) Bool)
(declare-fun error_value!1053 () Bool)
(assert (forall ((formula!209 Formula!1039)) (= (eval!210 formula!209) (ite ((_ is And!1040) formula!209) (and (and (eval!210 (lhs!1041 formula!209)) (eval!210 (lhs!1041 formula!209))) (eval!210 (rhs!1042 formula!209))) (ite ((_ is Or!1045) formula!209) (or (or (eval!210 (lhs!1046 formula!209)) (eval!210 (lhs!1046 formula!209))) (eval!210 (rhs!1047 formula!209))) (ite ((_ is Not!1043) formula!209) (not (eval!210 (f!1044 formula!209))) (ite ((_ is Variable!1048) formula!209) (bvsgt (id!1049 formula!209) (_ bv42 32)) error_value!1050))))) ))
(assert (forall ((formula!205 Formula!1039)) (= (nnf!206 formula!205) (ite ((_ is And!1040) formula!205) (And!1040 (nnf!206 (lhs!1041 formula!205)) (nnf!206 (rhs!1042 formula!205))) (ite ((_ is Or!1045) formula!205) (Or!1045 (nnf!206 (lhs!1046 formula!205)) (nnf!206 (rhs!1047 formula!205))) (ite (and (and ((_ is Not!1043) formula!205) ((_ is Not!1043) formula!205)) ((_ is And!1040) (f!1044 formula!205))) (Or!1045 (nnf!206 (Not!1043 (lhs!1041 (f!1044 formula!205)))) (nnf!206 (Not!1043 (rhs!1042 (f!1044 formula!205))))) (ite (and (and ((_ is Not!1043) formula!205) ((_ is Not!1043) formula!205)) ((_ is Or!1045) (f!1044 formula!205))) (And!1040 (nnf!206 (Not!1043 (lhs!1046 (f!1044 formula!205)))) (nnf!206 (Not!1043 (rhs!1047 (f!1044 formula!205))))) (ite (and (and ((_ is Not!1043) formula!205) ((_ is Not!1043) formula!205)) ((_ is Not!1043) (f!1044 formula!205))) (nnf!206 (f!1044 (f!1044 formula!205))) (ite ((_ is Not!1043) formula!205) formula!205 (ite ((_ is Variable!1048) formula!205) formula!205 error_value!1051)))))))) ))
(assert (forall ((f!207 Formula!1039)) (= (isNNF!208 f!207) (ite ((_ is And!1040) f!207) (and (and (isNNF!208 (lhs!1041 f!207)) (isNNF!208 (lhs!1041 f!207))) (isNNF!208 (rhs!1042 f!207))) (ite ((_ is Or!1045) f!207) (and (and (isNNF!208 (lhs!1046 f!207)) (isNNF!208 (lhs!1046 f!207))) (isNNF!208 (rhs!1047 f!207))) (ite ((_ is Not!1043) f!207) false (ite ((_ is Variable!1048) f!207) true error_value!1052))))) ))
(assert (not (forall ((BOUND_VARIABLE_523 (_ BitVec 32))) (= (bvslt (_ bv42 32) BOUND_VARIABLE_523) (eval!210 (Variable!1048 BOUND_VARIABLE_523))) )))
(check-sat)
(exit)

