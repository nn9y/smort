(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-fun f!205 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun g!207 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun fib!209 ((_ BitVec 32)) (_ BitVec 32))
(declare-sort I_f!205 0)
(declare-fun f!205_arg_0_1 (I_f!205) (_ BitVec 32))
(declare-sort I_g!207 0)
(declare-fun g!207_arg_0_2 (I_g!207) (_ BitVec 32))
(declare-sort I_fib!209 0)
(declare-fun fib!209_arg_0_3 (I_fib!209) (_ BitVec 32))
(assert (forall ((?i I_f!205)) (and (= (ite (not (bvslt (_ bv0 32) (f!205_arg_0_1 ?i))) (_ bv1 32) (bvadd (f!205 (bvadd (f!205_arg_0_1 ?i) (_ bv4294967295 32))) (g!207 (bvadd (f!205_arg_0_1 ?i) (_ bv4294967295 32))))) (f!205 (f!205_arg_0_1 ?i))) (ite (not (bvslt (_ bv0 32) (f!205_arg_0_1 ?i))) true (and (not (forall ((?z I_f!205)) (not (= (f!205_arg_0_1 ?z) (bvadd (f!205_arg_0_1 ?i) (_ bv4294967295 32)))) )) (not (forall ((?z I_g!207)) (not (= (g!207_arg_0_2 ?z) (bvadd (f!205_arg_0_1 ?i) (_ bv4294967295 32)))) ))))) ))
(assert (forall ((?i I_g!207)) (and (= (ite (not (bvslt (_ bv0 32) (g!207_arg_0_2 ?i))) (_ bv1 32) (f!205 (bvadd (g!207_arg_0_2 ?i) (_ bv4294967295 32)))) (g!207 (g!207_arg_0_2 ?i))) (ite (not (bvslt (_ bv0 32) (g!207_arg_0_2 ?i))) true (not (forall ((?z I_f!205)) (not (= (f!205_arg_0_1 ?z) (bvadd (g!207_arg_0_2 ?i) (_ bv4294967295 32)))) )))) ))
(assert (forall ((?i I_fib!209)) (and (= (ite (not (bvslt (_ bv2 32) (fib!209_arg_0_3 ?i))) (_ bv1 32) (bvadd (fib!209 (bvadd (fib!209_arg_0_3 ?i) (_ bv4294967295 32))) (fib!209 (bvadd (fib!209_arg_0_3 ?i) (_ bv4294967294 32))))) (fib!209 (fib!209_arg_0_3 ?i))) (ite (not (bvslt (_ bv2 32) (fib!209_arg_0_3 ?i))) true (and (not (forall ((?z I_fib!209)) (not (= (fib!209_arg_0_3 ?z) (bvadd (fib!209_arg_0_3 ?i) (_ bv4294967295 32)))) )) (not (forall ((?z I_fib!209)) (not (= (fib!209_arg_0_3 ?z) (bvadd (fib!209_arg_0_3 ?i) (_ bv4294967294 32)))) ))))) ))
(assert (not (forall ((n!206 (_ BitVec 32))) (or (= (fib!209 (bvadd (ite (not (bvslt (_ bv0 32) n!206)) (_ bv1 32) (f!205 (bvadd n!206 (_ bv4294967295 32)))) (_ bv1 32))) n!206) (forall ((?z I_fib!209)) (not (= (fib!209_arg_0_3 ?z) (bvadd (ite (not (bvslt (_ bv0 32) n!206)) (_ bv1 32) (f!205 (bvadd n!206 (_ bv4294967295 32)))) (_ bv1 32)))) ) (not (ite (not (bvslt (_ bv0 32) n!206)) true (not (forall ((?z I_f!205)) (not (= (f!205_arg_0_1 ?z) (bvadd n!206 (_ bv4294967295 32)))) ))))) )))
(check-sat)
(exit)

