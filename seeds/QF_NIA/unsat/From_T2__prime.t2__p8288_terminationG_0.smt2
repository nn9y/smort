(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun Nl17i10^01 () Int)
(declare-fun Nl17i10^02 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun Nl17CT1 () Int)
(declare-fun Nl17CT2 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam3n4 () Int)
(declare-fun lam3n5 () Int)
(declare-fun lam3n6 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam4n4 () Int)
(declare-fun lam4n5 () Int)
(declare-fun lam4n6 () Int)
(declare-fun __const_21649^0 () Int)
(declare-fun undef1223 () Int)
(declare-fun n9^0 () Int)
(declare-fun undef1204 () Int)
(declare-fun undef1202 () Int)
(declare-fun undef1207 () Int)
(declare-fun undef1215 () Int)
(declare-fun undef1209 () Int)
(declare-fun lam8n1 () Int)
(declare-fun lam8n2 () Int)
(declare-fun RFN1_CT () Int)
(declare-fun RFN1_i10^0 () Int)
(declare-fun lam8n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n2 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam5n0 () Int)
(assert ( and ( <= ( - 2 ) Nl17i10^01 ) ( <= Nl17i10^01 2 ) ( <= ( - 2 ) Nl17i10^02 ) ( <= Nl17i10^02 2 ) ))
(assert ( or ( and ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( > ( + ( * Nl17CT1 lam0n1 ) ( * Nl17CT2 lam0n2 ) ( - 1 ) ) 0 ) ( = ( + ( * Nl17i10^01 lam0n1 ) ( * Nl17i10^02 lam0n2 ) ) 0 ) ( = ( * 1 lam0n0 ) 0 ) ) ( and ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( > ( + ( * Nl17CT1 lam1n1 ) ( * Nl17CT2 lam1n2 ) ( - 1 ( + Nl17CT1 ( * Nl17i10^01 2 ) ) ) ) 0 ) ( = ( + ( * Nl17i10^01 lam1n1 ) ( * Nl17i10^02 lam1n2 ) ( - ( + 0 ( * Nl17i10^01 1 ) ) ) ) 0 ) ( = ( * 1 lam1n0 ) 0 ) ) ))
(assert ( or ( and ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( > ( + ( * Nl17CT1 lam0n1 ) ( * Nl17CT2 lam0n2 ) ( - 1 ) ) 0 ) ( = ( + ( * Nl17i10^01 lam0n1 ) ( * Nl17i10^02 lam0n2 ) ) 0 ) ( = ( * 1 lam0n0 ) 0 ) ) ( and ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( > ( + ( * Nl17CT1 lam2n1 ) ( * Nl17CT2 lam2n2 ) ( - 1 ( + Nl17CT2 ( * Nl17i10^02 2 ) ) ) ) 0 ) ( = ( + ( * Nl17i10^01 lam2n1 ) ( * Nl17i10^02 lam2n2 ) ( - ( + 0 ( * Nl17i10^02 1 ) ) ) ) 0 ) ( = ( * 1 lam2n0 ) 0 ) ) ))
(assert ( and ( = ( + __const_21649^0 ( * ( - 1 ) undef1223 ) ) 0 ) ( = ( + n9^0 ( * ( - 1 ) undef1204 ) ) 0 ) ( = ( + undef1202 ( * ( - 1 ) undef1204 ) ) 0 ) ( = ( + undef1204 ( * ( - 1 ) undef1223 ) ) 0 ) ( = ( + undef1207 ( * ( - 1 ) undef1215 ) ) 0 ) ( = undef1209 0 ) ( = ( + undef1209 ( * ( - 1 ) undef1215 ) ) 0 ) ( <= ( + Nl17CT1 ( * Nl17i10^01 3 ) ) 0 ) ( <= ( + Nl17CT2 ( * Nl17i10^02 3 ) ) 0 ) ))
(assert ( or ( and ( and ( >= lam8n1 0 ) ( >= lam8n2 0 ) ( > ( + ( * Nl17CT1 lam8n1 ) ( * Nl17CT2 lam8n2 ) ( - 1 ( - ( + RFN1_CT ( * RFN1_i10^0 2 ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * Nl17i10^01 lam8n1 ) ( * Nl17i10^02 lam8n2 ) ( - ( - ( + 0 ( * RFN1_i10^0 1 ) ) RFN1_i10^0 ) ) ) 0 ) ( = ( * 1 lam8n0 ) 0 ) ) ( and ( and ( >= lam6n1 0 ) ( >= lam6n2 0 ) ( > ( + ( * Nl17CT1 lam6n1 ) ( * Nl17CT2 lam6n2 ) ( - 1 ( - RFN1_CT ) ) ) 0 ) ( = ( + ( * Nl17i10^01 lam6n1 ) ( * Nl17i10^02 lam6n2 ) ( - ( - RFN1_i10^0 ) ) ) 0 ) ( = ( * 1 lam6n0 ) 0 ) ) ( and ( >= lam7n1 0 ) ( >= lam7n2 0 ) ( > ( + ( * Nl17CT1 lam7n1 ) ( * Nl17CT2 lam7n2 ) ( - 1 ( + ( - ( + RFN1_CT ( * RFN1_i10^0 2 ) ) RFN1_CT ) 1 ) ) ) 0 ) ( = ( + ( * Nl17i10^01 lam7n1 ) ( * Nl17i10^02 lam7n2 ) ( - ( - ( + 0 ( * RFN1_i10^0 1 ) ) RFN1_i10^0 ) ) ) 0 ) ( = ( * 1 lam7n0 ) 0 ) ) ) ) ( and ( >= lam5n1 0 ) ( >= lam5n2 0 ) ( > ( + ( * Nl17CT1 lam5n1 ) ( * Nl17CT2 lam5n2 ) ( - 1 ) ) 0 ) ( = ( + ( * Nl17i10^01 lam5n1 ) ( * Nl17i10^02 lam5n2 ) ) 0 ) ( = ( * 1 lam5n0 ) 0 ) ) ))
(check-sat)
(exit)
