(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun global_invc1_1 () Int)
(declare-fun global_invc1_0 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n3 () Int)
(declare-fun lam0n2 () Int)
(declare-fun global_invc1_2 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam1n4 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun lam2n2 () Int)
(declare-fun term_invc1_1 () Int)
(declare-fun term_invc1_0 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam3n4 () Int)
(declare-fun term_invc1_2 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam4n4 () Int)
(declare-fun lam4n2 () Int)
(declare-fun non_inc1 () Bool)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam5n4 () Int)
(declare-fun lam5n6 () Int)
(declare-fun lam5n5 () Int)
(declare-fun lam5n2 () Int)
(declare-fun rfc0 () Int)
(declare-fun rfc1 () Int)
(declare-fun disabled1 () Bool)
(declare-fun bounded1 () Bool)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n3 () Int)
(declare-fun lam6n4 () Int)
(declare-fun lam6n5 () Int)
(declare-fun rfc2 () Int)
(declare-fun lam6n2 () Int)
(declare-fun dec1 () Bool)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n3 () Int)
(declare-fun lam7n4 () Int)
(declare-fun lam7n5 () Int)
(declare-fun lam7n2 () Int)
(declare-fun bnd_and_dec1 () Bool)
(declare-fun non_inc2 () Bool)
(declare-fun lam8n0 () Int)
(declare-fun lam8n1 () Int)
(declare-fun lam8n3 () Int)
(declare-fun lam8n4 () Int)
(declare-fun lam8n6 () Int)
(declare-fun lam8n5 () Int)
(declare-fun lam8n2 () Int)
(declare-fun disabled2 () Bool)
(declare-fun bounded2 () Bool)
(declare-fun lam9n0 () Int)
(declare-fun lam9n1 () Int)
(declare-fun lam9n3 () Int)
(declare-fun lam9n4 () Int)
(declare-fun lam9n5 () Int)
(declare-fun lam9n2 () Int)
(declare-fun dec2 () Bool)
(declare-fun lam10n0 () Int)
(declare-fun lam10n1 () Int)
(declare-fun lam10n3 () Int)
(declare-fun lam10n4 () Int)
(declare-fun lam10n5 () Int)
(declare-fun lam10n2 () Int)
(declare-fun bnd_and_dec2 () Bool)
(declare-fun GLOBAL_NT_1 () Bool)
(declare-fun global_V0_1 () Int)
(declare-fun global_V1_1 () Int)
(declare-fun TERM_NT_1 () Bool)
(declare-fun term_V0_1 () Int)
(declare-fun term_V1_1 () Int)
(declare-fun ALL_NON_INC_0 () Bool)
(declare-fun DIS_OR_ALL_NON_INC_0 () Bool)
(declare-fun SOME_BND_AND_DEC_0 () Bool)
(declare-fun V1_NIV () Int)
(declare-fun V0_NIV () Int)
(declare-fun V3_NIV () Int)
(declare-fun V2_NIV () Int)
(assert ( and ( >= global_invc1_1 ( - 1 ) ) ( <= global_invc1_1 1 ) ( >= global_invc1_0 ( - 1 ) ) ( <= global_invc1_0 1 ) ( and ( >= lam0n0 0 ) ( <= 0 lam0n3 ) ( < lam0n3 1 ) ( and ( = ( + ( * ( - 1 ) lam0n0 ) ( * lam0n2 99 ) ) ( + global_invc1_2 ( * ( - 1 ) lam0n3 ) ) ) ( = ( * lam0n1 ( - 1 ) ) global_invc1_0 ) ( = ( * lam0n2 ( - 1 ) ) global_invc1_1 ) ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n3 0 ) ( <= 0 lam1n4 ) ( < lam1n4 1 ) ( and ( = ( + ( * ( - 1 ) lam1n0 ) ( * lam1n1 1 ) ( * lam1n3 global_invc1_2 ) ) ( + global_invc1_2 ( * ( - 1 ) lam1n4 ) ) ) ( = ( + ( * lam1n1 1 ) ( * lam1n2 1 ) ( * lam1n3 global_invc1_0 ) ) 0 ) ( = ( + ( * lam1n1 ( - 1 ) ) ( * lam1n3 global_invc1_1 ) ) 0 ) ( = ( * lam1n2 ( - 1 ) ) global_invc1_0 ) ( = 0 global_invc1_1 ) ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n3 0 ) ( <= 0 lam2n4 ) ( < lam2n4 1 ) ( and ( = ( + ( * ( - 1 ) lam2n0 ) ( * lam2n1 1 ) ( * lam2n3 global_invc1_2 ) ) ( + global_invc1_2 ( * ( - 1 ) lam2n4 ) ) ) ( = ( + ( * lam2n1 1 ) ( * lam2n3 global_invc1_0 ) ) 0 ) ( = ( + ( * lam2n1 ( - 1 ) ) ( * lam2n2 1 ) ( * lam2n3 global_invc1_1 ) ) 0 ) ( = ( * lam2n2 ( - 1 ) ) global_invc1_1 ) ( = 0 global_invc1_0 ) ) ) ( >= term_invc1_1 ( - 1 ) ) ( <= term_invc1_1 1 ) ( >= term_invc1_0 ( - 1 ) ) ( <= term_invc1_0 1 ) ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n3 0 ) ( <= 0 lam3n4 ) ( < lam3n4 1 ) ( and ( = ( + ( * ( - 1 ) lam3n0 ) ( * lam3n1 1 ) ( * lam3n3 global_invc1_2 ) ) ( + term_invc1_2 ( * ( - 1 ) lam3n4 ) ) ) ( = ( + ( * lam3n1 1 ) ( * lam3n2 1 ) ( * lam3n3 global_invc1_0 ) ) 0 ) ( = ( + ( * lam3n1 ( - 1 ) ) ( * lam3n3 global_invc1_1 ) ) 0 ) ( = ( * lam3n2 ( - 1 ) ) term_invc1_0 ) ( = 0 term_invc1_1 ) ) ) ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n3 0 ) ( <= 0 lam4n4 ) ( < lam4n4 1 ) ( and ( = ( + ( * ( - 1 ) lam4n0 ) ( * lam4n1 1 ) ( * lam4n3 global_invc1_2 ) ) ( + term_invc1_2 ( * ( - 1 ) lam4n4 ) ) ) ( = ( + ( * lam4n1 1 ) ( * lam4n3 global_invc1_0 ) ) 0 ) ( = ( + ( * lam4n1 ( - 1 ) ) ( * lam4n2 1 ) ( * lam4n3 global_invc1_1 ) ) 0 ) ( = ( * lam4n2 ( - 1 ) ) term_invc1_1 ) ( = 0 term_invc1_0 ) ) ) ( = non_inc1 ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( >= lam5n3 0 ) ( >= lam5n4 0 ) ( <= 0 lam5n6 ) ( < lam5n6 1 ) ( <= lam5n5 1 ) ( >= lam5n5 0 ) ( and ( > ( + ( * ( - 1 ) lam5n0 ) ( * lam5n1 1 ) ( * lam5n3 global_invc1_2 ) ( * lam5n4 term_invc1_2 ) ( * lam5n5 ( + 1 ( * ( - 1 ) lam5n6 ) ) ) ) 0 ) ( = ( + ( * lam5n1 1 ) ( * lam5n2 1 ) ( * lam5n3 global_invc1_0 ) ( * lam5n4 term_invc1_0 ) ( * lam5n5 rfc0 ) ) 0 ) ( = ( + ( * lam5n1 ( - 1 ) ) ( * lam5n3 global_invc1_1 ) ( * lam5n4 term_invc1_1 ) ( * lam5n5 rfc1 ) ) 0 ) ( = ( + ( * lam5n2 ( - 1 ) ) ( * lam5n5 ( * ( - 1 ) rfc0 ) ) ) 0 ) ( = ( * lam5n5 ( * ( - 1 ) rfc1 ) ) 0 ) ) ) ) ( = disabled1 ( and ( = lam5n5 0 ) non_inc1 ) ) ( = bounded1 ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( >= lam6n3 0 ) ( >= lam6n4 0 ) ( <= 0 lam6n5 ) ( < lam6n5 1 ) ( and ( = ( + ( * ( - 1 ) lam6n0 ) ( * lam6n1 1 ) ( * lam6n3 global_invc1_2 ) ( * lam6n4 term_invc1_2 ) ) ( + ( * ( - 1 ) rfc2 ) ( * ( - 1 ) lam6n5 ) ) ) ( = ( + ( * lam6n1 1 ) ( * lam6n2 1 ) ( * lam6n3 global_invc1_0 ) ( * lam6n4 term_invc1_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( + ( * lam6n1 ( - 1 ) ) ( * lam6n3 global_invc1_1 ) ( * lam6n4 term_invc1_1 ) ) ( * ( - 1 ) rfc1 ) ) ( = ( * lam6n2 ( - 1 ) ) 0 ) ) ) ) ( = dec1 ( and ( >= lam7n0 0 ) ( >= lam7n1 0 ) ( >= lam7n3 0 ) ( >= lam7n4 0 ) ( <= 0 lam7n5 ) ( < lam7n5 1 ) ( and ( = ( + ( * ( - 1 ) lam7n0 ) ( * lam7n1 1 ) ( * lam7n3 global_invc1_2 ) ( * lam7n4 term_invc1_2 ) ) ( + 1 ( * ( - 1 ) lam7n5 ) ) ) ( = ( + ( * lam7n1 1 ) ( * lam7n2 1 ) ( * lam7n3 global_invc1_0 ) ( * lam7n4 term_invc1_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( + ( * lam7n1 ( - 1 ) ) ( * lam7n3 global_invc1_1 ) ( * lam7n4 term_invc1_1 ) ) ( * ( - 1 ) rfc1 ) ) ( = ( * lam7n2 ( - 1 ) ) rfc0 ) ( = 0 rfc1 ) ) ) ) ( = bnd_and_dec1 ( and bounded1 dec1 ) ) ( = non_inc2 ( and ( >= lam8n0 0 ) ( >= lam8n1 0 ) ( >= lam8n3 0 ) ( >= lam8n4 0 ) ( <= 0 lam8n6 ) ( < lam8n6 1 ) ( <= lam8n5 1 ) ( >= lam8n5 0 ) ( and ( > ( + ( * ( - 1 ) lam8n0 ) ( * lam8n1 1 ) ( * lam8n3 global_invc1_2 ) ( * lam8n4 term_invc1_2 ) ( * lam8n5 ( + 1 ( * ( - 1 ) lam8n6 ) ) ) ) 0 ) ( = ( + ( * lam8n1 1 ) ( * lam8n3 global_invc1_0 ) ( * lam8n4 term_invc1_0 ) ( * lam8n5 rfc0 ) ) 0 ) ( = ( + ( * lam8n1 ( - 1 ) ) ( * lam8n2 1 ) ( * lam8n3 global_invc1_1 ) ( * lam8n4 term_invc1_1 ) ( * lam8n5 rfc1 ) ) 0 ) ( = ( * lam8n5 ( * ( - 1 ) rfc0 ) ) 0 ) ( = ( + ( * lam8n2 ( - 1 ) ) ( * lam8n5 ( * ( - 1 ) rfc1 ) ) ) 0 ) ) ) ) ( = disabled2 ( and ( = lam8n5 0 ) non_inc2 ) ) ( = bounded2 ( and ( >= lam9n0 0 ) ( >= lam9n1 0 ) ( >= lam9n3 0 ) ( >= lam9n4 0 ) ( <= 0 lam9n5 ) ( < lam9n5 1 ) ( and ( = ( + ( * ( - 1 ) lam9n0 ) ( * lam9n1 1 ) ( * lam9n3 global_invc1_2 ) ( * lam9n4 term_invc1_2 ) ) ( + ( * ( - 1 ) rfc2 ) ( * ( - 1 ) lam9n5 ) ) ) ( = ( + ( * lam9n1 1 ) ( * lam9n3 global_invc1_0 ) ( * lam9n4 term_invc1_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( + ( * lam9n1 ( - 1 ) ) ( * lam9n2 1 ) ( * lam9n3 global_invc1_1 ) ( * lam9n4 term_invc1_1 ) ) ( * ( - 1 ) rfc1 ) ) ( = ( * lam9n2 ( - 1 ) ) 0 ) ) ) ) ( = dec2 ( and ( >= lam10n0 0 ) ( >= lam10n1 0 ) ( >= lam10n3 0 ) ( >= lam10n4 0 ) ( <= 0 lam10n5 ) ( < lam10n5 1 ) ( and ( = ( + ( * ( - 1 ) lam10n0 ) ( * lam10n1 1 ) ( * lam10n3 global_invc1_2 ) ( * lam10n4 term_invc1_2 ) ) ( + 1 ( * ( - 1 ) lam10n5 ) ) ) ( = ( + ( * lam10n1 1 ) ( * lam10n3 global_invc1_0 ) ( * lam10n4 term_invc1_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( + ( * lam10n1 ( - 1 ) ) ( * lam10n2 1 ) ( * lam10n3 global_invc1_1 ) ( * lam10n4 term_invc1_1 ) ) ( * ( - 1 ) rfc1 ) ) ( = ( * lam10n2 ( - 1 ) ) rfc1 ) ( = 0 rfc0 ) ) ) ) ( = bnd_and_dec2 ( and bounded2 dec2 ) ) ( = GLOBAL_NT_1 ( or ( not ( = global_invc1_1 0 ) ) ( not ( = global_invc1_0 0 ) ) ) ) ( or ( not ( <= ( + global_invc1_2 ( * global_invc1_0 global_V0_1 ) ( * global_invc1_1 global_V1_1 ) ) 0 ) ) ( and ( = global_invc1_1 0 ) ( = global_invc1_0 0 ) ) ) ( = TERM_NT_1 ( or ( not ( = term_invc1_1 0 ) ) ( not ( = term_invc1_0 0 ) ) ) ) ( or ( not ( <= ( + term_invc1_2 ( * term_invc1_0 term_V0_1 ) ( * term_invc1_1 term_V1_1 ) ) 0 ) ) ( and ( = term_invc1_1 0 ) ( = term_invc1_0 0 ) ) ) ( = ALL_NON_INC_0 ( and non_inc1 non_inc2 ) ) ( = DIS_OR_ALL_NON_INC_0 ( or disabled1 disabled2 ALL_NON_INC_0 ) ) ( = SOME_BND_AND_DEC_0 ( or bnd_and_dec1 bnd_and_dec2 ) ) ( or ( not ALL_NON_INC_0 ) ( and ( or ( not ( = rfc1 0 ) ) ( not ( = rfc0 0 ) ) ) ( >= rfc2 0 ) ( or SOME_BND_AND_DEC_0 ( <= ( + ( * rfc1 V1_NIV ) ( * rfc0 V0_NIV ) 1 ) ( + ( * rfc1 V3_NIV ) ( * rfc0 V2_NIV ) ) ) ) ) ) ( or GLOBAL_NT_1 TERM_NT_1 ALL_NON_INC_0 ) ))
(check-sat)
(exit)
