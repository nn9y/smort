(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun Nl57block_compress^01 () Int)
(declare-fun Nl57i3^01 () Int)
(declare-fun Nl57block_compress^02 () Int)
(declare-fun Nl57i3^02 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n4 () Int)
(declare-fun lam0n5 () Int)
(declare-fun Nl57CT1 () Int)
(declare-fun Nl57CT2 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n4 () Int)
(declare-fun lam1n5 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n4 () Int)
(declare-fun lam2n5 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam4n3 () Int)
(declare-fun block_compress^0 () Int)
(declare-fun i3^0 () Int)
(declare-fun undef557 () Int)
(declare-fun undef706 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam5n4 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n3 () Int)
(declare-fun lam6n4 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(assert ( and ( <= ( - 1 ) Nl57block_compress^01 ) ( <= Nl57block_compress^01 1 ) ( <= ( - 1 ) Nl57i3^01 ) ( <= Nl57i3^01 1 ) ( <= ( - 1 ) Nl57block_compress^02 ) ( <= Nl57block_compress^02 1 ) ( <= ( - 1 ) Nl57i3^02 ) ( <= Nl57i3^02 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n4 0 ) ( >= lam0n5 0 ) ( > ( + ( * ( - 49 ) lam0n1 ) ( * Nl57CT1 lam0n4 ) ( * Nl57CT2 lam0n5 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n2 ) ( * Nl57block_compress^01 lam0n4 ) ( * Nl57block_compress^02 lam0n5 ) ) 0 ) ( = ( + ( * 1 lam0n1 ) ( * Nl57i3^01 lam0n4 ) ( * Nl57i3^02 lam0n5 ) ) 0 ) ( = ( * 1 lam0n3 ) 0 ) ( = ( * ( - 1 ) lam0n3 ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n4 0 ) ( >= lam1n5 0 ) ( > ( + ( * ( - 49 ) lam1n1 ) ( * Nl57CT1 lam1n4 ) ( * Nl57CT2 lam1n5 ) ( - 1 ( + Nl57CT1 ( * Nl57i3^01 1 ) ) ) ) 0 ) ( = ( + ( * 1 lam1n2 ) ( * Nl57block_compress^01 lam1n4 ) ( * Nl57block_compress^02 lam1n5 ) ( - ( + 0 Nl57block_compress^01 ) ) ) 0 ) ( = ( + ( * 1 lam1n1 ) ( * Nl57i3^01 lam1n4 ) ( * Nl57i3^02 lam1n5 ) ( - ( + 0 ( * Nl57i3^01 1 ) ) ) ) 0 ) ( = ( * 1 lam1n3 ) 0 ) ( = ( * ( - 1 ) lam1n3 ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n4 0 ) ( >= lam0n5 0 ) ( > ( + ( * ( - 49 ) lam0n1 ) ( * Nl57CT1 lam0n4 ) ( * Nl57CT2 lam0n5 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n2 ) ( * Nl57block_compress^01 lam0n4 ) ( * Nl57block_compress^02 lam0n5 ) ) 0 ) ( = ( + ( * 1 lam0n1 ) ( * Nl57i3^01 lam0n4 ) ( * Nl57i3^02 lam0n5 ) ) 0 ) ( = ( * 1 lam0n3 ) 0 ) ( = ( * ( - 1 ) lam0n3 ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n4 0 ) ( >= lam2n5 0 ) ( > ( + ( * ( - 49 ) lam2n1 ) ( * Nl57CT1 lam2n4 ) ( * Nl57CT2 lam2n5 ) ( - 1 ( + Nl57CT2 ( * Nl57i3^02 1 ) ) ) ) 0 ) ( = ( + ( * 1 lam2n2 ) ( * Nl57block_compress^01 lam2n4 ) ( * Nl57block_compress^02 lam2n5 ) ( - ( + 0 Nl57block_compress^02 ) ) ) 0 ) ( = ( + ( * 1 lam2n1 ) ( * Nl57i3^01 lam2n4 ) ( * Nl57i3^02 lam2n5 ) ( - ( + 0 ( * Nl57i3^02 1 ) ) ) ) 0 ) ( = ( * 1 lam2n3 ) 0 ) ( = ( * ( - 1 ) lam2n3 ) 0 ) ) ))
(assert ( and ( not ( <= 1 0 ) ) ( = block_compress^0 0 ) ( = i3^0 0 ) ( = ( + undef557 ( * ( - 1 ) undef706 ) ) 0 ) ( <= ( + Nl57CT1 ( * ( + 0 Nl57block_compress^01 ) block_compress^0 ) ( * ( + 0 Nl57i3^01 ) i3^0 ) ) 0 ) ( <= ( + Nl57CT2 ( * ( + 0 Nl57block_compress^02 ) block_compress^0 ) ( * ( + 0 Nl57i3^02 ) i3^0 ) ) 0 ) ))
(assert ( or ( or ( and ( >= lam5n0 0 ) ( >= lam5n3 0 ) ( >= lam5n4 0 ) ( > ( + ( * 50 lam5n0 ) ( * Nl57CT1 lam5n3 ) ( * Nl57CT2 lam5n4 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam5n1 ) ( * Nl57block_compress^01 lam5n3 ) ( * Nl57block_compress^02 lam5n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam5n0 ) ( * Nl57i3^01 lam5n3 ) ( * Nl57i3^02 lam5n4 ) ) 0 ) ( = ( * 1 lam5n2 ) 0 ) ( = ( * ( - 1 ) lam5n2 ) 0 ) ) ( and ( >= lam6n0 0 ) ( >= lam6n3 0 ) ( >= lam6n4 0 ) ( > ( + ( * 50 lam6n0 ) ( * Nl57CT1 lam6n3 ) ( * Nl57CT2 lam6n4 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam6n1 ) ( * Nl57block_compress^01 lam6n3 ) ( * Nl57block_compress^02 lam6n4 ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n0 ) ( * Nl57i3^01 lam6n3 ) ( * Nl57i3^02 lam6n4 ) ) 0 ) ( = ( * 1 lam6n2 ) 0 ) ( = ( * ( - 1 ) lam6n2 ) 0 ) ) ) ( and ( and ( not ( <= 1 0 ) ) ( = block_compress^0 0 ) ( = i3^0 0 ) ( = ( + undef557 ( * ( - 1 ) undef706 ) ) 0 ) ( <= ( + Nl57CT1 ( * ( + 0 Nl57block_compress^01 ) block_compress^0 ) ( * ( + 0 Nl57i3^01 ) i3^0 ) ) 0 ) ( <= ( + Nl57CT2 ( * ( + 0 Nl57block_compress^02 ) block_compress^0 ) ( * ( + 0 Nl57i3^02 ) i3^0 ) ) 0 ) ) ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n4 0 ) ( >= lam0n5 0 ) ( > ( + ( * ( - 49 ) lam0n1 ) ( * Nl57CT1 lam0n4 ) ( * Nl57CT2 lam0n5 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n2 ) ( * Nl57block_compress^01 lam0n4 ) ( * Nl57block_compress^02 lam0n5 ) ) 0 ) ( = ( + ( * 1 lam0n1 ) ( * Nl57i3^01 lam0n4 ) ( * Nl57i3^02 lam0n5 ) ) 0 ) ( = ( * 1 lam0n3 ) 0 ) ( = ( * ( - 1 ) lam0n3 ) 0 ) ) ) ))
(check-sat)
(exit)
