(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_320 () (Array Int Int))
(declare-fun a_321 () (Array Int Int))
(declare-fun a_322 () (Array Int Int))
(declare-fun a_323 () (Array Int Int))
(declare-fun a_324 () (Array Int Int))
(declare-fun a_325 () (Array Int Int))
(declare-fun a_326 () (Array Int Int))
(declare-fun a_327 () (Array Int Int))
(declare-fun a_328 () (Array Int Int))
(declare-fun a_329 () (Array Int Int))
(declare-fun a_330 () (Array Int Int))
(declare-fun a_331 () (Array Int Int))
(declare-fun a_332 () (Array Int Int))
(declare-fun a_333 () (Array Int Int))
(declare-fun a_334 () (Array Int Int))
(declare-fun a_335 () (Array Int Int))
(declare-fun a_336 () (Array Int Int))
(declare-fun a_337 () (Array Int Int))
(declare-fun a_338 () (Array Int Int))
(declare-fun a_339 () (Array Int Int))
(declare-fun e_341 () Int)
(declare-fun e_342 () Int)
(declare-fun i_340 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_320 (store a1 i1 e1)))
(assert (= a_321 (store a_320 i2 e2)))
(assert (= a_322 (store a_321 i3 e3)))
(assert (= a_323 (store a_322 i4 e4)))
(assert (= a_324 (store a_323 i5 e5)))
(assert (= a_325 (store a_324 i6 e6)))
(assert (= a_326 (store a_325 i7 e7)))
(assert (= a_327 (store a_326 i8 e8)))
(assert (= a_328 (store a_327 i9 e9)))
(assert (= a_329 (store a_328 i10 e10)))
(assert (= a_330 (store a1 i10 e10)))
(assert (= a_331 (store a_330 i6 e6)))
(assert (= a_332 (store a_331 i9 e9)))
(assert (= a_333 (store a_332 i7 e7)))
(assert (= a_334 (store a_333 i3 e3)))
(assert (= a_335 (store a_334 i4 e4)))
(assert (= a_336 (store a_335 i5 e5)))
(assert (= a_337 (store a_336 i2 e2)))
(assert (= a_338 (store a_337 i1 e1)))
(assert (= a_339 (store a_338 i8 e8)))
(assert (= e_341 (select a_329 i_340)))
(assert (= e_342 (select a_339 i_340)))
(assert (= i_340 (sk a_329 a_339)))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= e_341 e_342)))
(check-sat)
(exit)
