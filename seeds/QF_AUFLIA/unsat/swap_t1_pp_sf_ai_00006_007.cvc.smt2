(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_165 () (Array Int Int))
(declare-fun a_167 () (Array Int Int))
(declare-fun a_169 () (Array Int Int))
(declare-fun a_171 () (Array Int Int))
(declare-fun a_173 () (Array Int Int))
(declare-fun a_175 () (Array Int Int))
(declare-fun a_177 () (Array Int Int))
(declare-fun a_179 () (Array Int Int))
(declare-fun a_181 () (Array Int Int))
(declare-fun a_183 () (Array Int Int))
(declare-fun a_185 () (Array Int Int))
(declare-fun a_187 () (Array Int Int))
(declare-fun a_188 () (Array Int Int))
(declare-fun a_189 () (Array Int Int))
(declare-fun a_191 () (Array Int Int))
(declare-fun a_193 () (Array Int Int))
(declare-fun a_195 () (Array Int Int))
(declare-fun a_197 () (Array Int Int))
(declare-fun a_199 () (Array Int Int))
(declare-fun a_201 () (Array Int Int))
(declare-fun a_203 () (Array Int Int))
(declare-fun a_205 () (Array Int Int))
(declare-fun e_164 () Int)
(declare-fun e_166 () Int)
(declare-fun e_168 () Int)
(declare-fun e_170 () Int)
(declare-fun e_172 () Int)
(declare-fun e_174 () Int)
(declare-fun e_176 () Int)
(declare-fun e_178 () Int)
(declare-fun e_180 () Int)
(declare-fun e_182 () Int)
(declare-fun e_184 () Int)
(declare-fun e_186 () Int)
(declare-fun e_190 () Int)
(declare-fun e_192 () Int)
(declare-fun e_194 () Int)
(declare-fun e_196 () Int)
(declare-fun e_198 () Int)
(declare-fun e_200 () Int)
(declare-fun e_202 () Int)
(declare-fun e_204 () Int)
(declare-fun e_207 () Int)
(declare-fun e_208 () Int)
(declare-fun i_206 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_165 (store a1 i4 e_164)))
(assert (= a_167 (store a_165 i5 e_166)))
(assert (= a_169 (store a_167 i2 e_168)))
(assert (= a_171 (store a_169 i0 e_170)))
(assert (= a_173 (store a_171 i5 e_172)))
(assert (= a_175 (store a_173 i0 e_174)))
(assert (= a_177 (store a_175 i3 e_176)))
(assert (= a_179 (store a_177 i1 e_178)))
(assert (= a_181 (store a_179 i3 e_180)))
(assert (= a_183 (store a_181 i4 e_182)))
(assert (= a_185 (store a_183 i5 e_184)))
(assert (= a_187 (store a_185 i0 e_186)))
(assert (= a_188 (store a_167 i0 e_170)))
(assert (= a_189 (store a_188 i2 e_168)))
(assert (= a_191 (store a_189 i0 e_190)))
(assert (= a_193 (store a_191 i5 e_192)))
(assert (= a_195 (store a_193 i3 e_194)))
(assert (= a_197 (store a_195 i1 e_196)))
(assert (= a_199 (store a_197 i4 e_198)))
(assert (= a_201 (store a_199 i3 e_200)))
(assert (= a_203 (store a_201 i5 e_202)))
(assert (= a_205 (store a_203 i0 e_204)))
(assert (= e_164 (select a1 i5)))
(assert (= e_166 (select a1 i4)))
(assert (= e_168 (select a_167 i0)))
(assert (= e_170 (select a_167 i2)))
(assert (= e_172 (select a_171 i0)))
(assert (= e_174 (select a_171 i5)))
(assert (= e_176 (select a_175 i1)))
(assert (= e_178 (select a_175 i3)))
(assert (= e_180 (select a_179 i4)))
(assert (= e_182 (select a_179 i3)))
(assert (= e_184 (select a_183 i0)))
(assert (= e_186 (select a_183 i5)))
(assert (= e_190 (select a_189 i5)))
(assert (= e_192 (select a_189 i0)))
(assert (= e_194 (select a_193 i1)))
(assert (= e_196 (select a_193 i3)))
(assert (= e_198 (select a_197 i3)))
(assert (= e_200 (select a_197 i4)))
(assert (= e_202 (select a_201 i0)))
(assert (= e_204 (select a_201 i5)))
(assert (= e_207 (select a_187 i_206)))
(assert (= e_208 (select a_205 i_206)))
(assert (= i_206 (sk a_187 a_205)))
(assert (not (= e_207 e_208)))
(check-sat)
(exit)
