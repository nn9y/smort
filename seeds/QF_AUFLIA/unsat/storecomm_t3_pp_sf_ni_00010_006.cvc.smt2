(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_138 () (Array Int Int))
(declare-fun a_139 () (Array Int Int))
(declare-fun a_140 () (Array Int Int))
(declare-fun a_141 () (Array Int Int))
(declare-fun a_142 () (Array Int Int))
(declare-fun a_143 () (Array Int Int))
(declare-fun a_144 () (Array Int Int))
(declare-fun a_145 () (Array Int Int))
(declare-fun a_146 () (Array Int Int))
(declare-fun a_147 () (Array Int Int))
(declare-fun a_148 () (Array Int Int))
(declare-fun a_149 () (Array Int Int))
(declare-fun a_150 () (Array Int Int))
(declare-fun a_151 () (Array Int Int))
(declare-fun a_152 () (Array Int Int))
(declare-fun a_153 () (Array Int Int))
(declare-fun a_154 () (Array Int Int))
(declare-fun a_155 () (Array Int Int))
(declare-fun a_156 () (Array Int Int))
(declare-fun a_157 () (Array Int Int))
(declare-fun e_159 () Int)
(declare-fun e_160 () Int)
(declare-fun i_158 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_138 (store a1 1 e1)))
(assert (= a_139 (store a_138 2 e2)))
(assert (= a_140 (store a_139 3 e3)))
(assert (= a_141 (store a_140 4 e4)))
(assert (= a_142 (store a_141 5 e5)))
(assert (= a_143 (store a_142 6 e6)))
(assert (= a_144 (store a_143 7 e7)))
(assert (= a_145 (store a_144 8 e8)))
(assert (= a_146 (store a_145 9 e9)))
(assert (= a_147 (store a_146 10 e10)))
(assert (= a_148 (store a1 9 e9)))
(assert (= a_149 (store a_148 3 e3)))
(assert (= a_150 (store a_149 5 e5)))
(assert (= a_151 (store a_150 4 e4)))
(assert (= a_152 (store a_151 6 e6)))
(assert (= a_153 (store a_152 1 e1)))
(assert (= a_154 (store a_153 10 e10)))
(assert (= a_155 (store a_154 2 e2)))
(assert (= a_156 (store a_155 8 e8)))
(assert (= a_157 (store a_156 7 e7)))
(assert (= e_159 (select a_147 i_158)))
(assert (= e_160 (select a_157 i_158)))
(assert (= i_158 (sk a_147 a_157)))
(assert (not (= e_159 e_160)))
(check-sat)
(exit)
