(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_100 () (Array Int Int))
(declare-fun a_101 () (Array Int Int))
(declare-fun a_103 () (Array Int Int))
(declare-fun a_104 () (Array Int Int))
(declare-fun a_94 () (Array Int Int))
(declare-fun a_96 () (Array Int Int))
(declare-fun a_98 () (Array Int Int))
(declare-fun a_99 () (Array Int Int))
(declare-fun e_102 () Int)
(declare-fun e_106 () Int)
(declare-fun e_107 () Int)
(declare-fun e_93 () Int)
(declare-fun e_95 () Int)
(declare-fun e_97 () Int)
(declare-fun i_105 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_100 (store a1 i0 e_95)))
(assert (= a_101 (store a_100 i1 e_93)))
(assert (= a_103 (store a_101 i1 e_102)))
(assert (= a_104 (store a_103 i1 e_102)))
(assert (= a_94 (store a1 i1 e_93)))
(assert (= a_96 (store a_94 i0 e_95)))
(assert (= a_98 (store a_96 i1 e_97)))
(assert (= a_99 (store a_98 i1 e_97)))
(assert (= e_102 (select a_101 i1)))
(assert (= e_106 (select a_99 i_105)))
(assert (= e_107 (select a_104 i_105)))
(assert (= e_93 (select a1 i0)))
(assert (= e_95 (select a1 i1)))
(assert (= e_97 (select a_96 i1)))
(assert (= i_105 (sk a_99 a_104)))
(assert (not (= e_106 e_107)))
(check-sat)
(exit)
