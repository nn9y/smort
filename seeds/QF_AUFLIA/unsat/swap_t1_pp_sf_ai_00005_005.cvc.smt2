(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_274 () (Array Int Int))
(declare-fun a_276 () (Array Int Int))
(declare-fun a_278 () (Array Int Int))
(declare-fun a_280 () (Array Int Int))
(declare-fun a_282 () (Array Int Int))
(declare-fun a_284 () (Array Int Int))
(declare-fun a_286 () (Array Int Int))
(declare-fun a_288 () (Array Int Int))
(declare-fun a_290 () (Array Int Int))
(declare-fun a_292 () (Array Int Int))
(declare-fun a_293 () (Array Int Int))
(declare-fun a_294 () (Array Int Int))
(declare-fun a_296 () (Array Int Int))
(declare-fun a_298 () (Array Int Int))
(declare-fun a_300 () (Array Int Int))
(declare-fun a_302 () (Array Int Int))
(declare-fun a_304 () (Array Int Int))
(declare-fun a_306 () (Array Int Int))
(declare-fun a_308 () (Array Int Int))
(declare-fun a_310 () (Array Int Int))
(declare-fun e_273 () Int)
(declare-fun e_275 () Int)
(declare-fun e_277 () Int)
(declare-fun e_279 () Int)
(declare-fun e_281 () Int)
(declare-fun e_283 () Int)
(declare-fun e_285 () Int)
(declare-fun e_287 () Int)
(declare-fun e_289 () Int)
(declare-fun e_291 () Int)
(declare-fun e_295 () Int)
(declare-fun e_297 () Int)
(declare-fun e_299 () Int)
(declare-fun e_301 () Int)
(declare-fun e_303 () Int)
(declare-fun e_305 () Int)
(declare-fun e_307 () Int)
(declare-fun e_309 () Int)
(declare-fun e_312 () Int)
(declare-fun e_313 () Int)
(declare-fun i_311 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_274 (store a1 i0 e_273)))
(assert (= a_276 (store a_274 i1 e_275)))
(assert (= a_278 (store a_276 i3 e_277)))
(assert (= a_280 (store a_278 i2 e_279)))
(assert (= a_282 (store a_280 i3 e_281)))
(assert (= a_284 (store a_282 i0 e_283)))
(assert (= a_286 (store a_284 i3 e_285)))
(assert (= a_288 (store a_286 i0 e_287)))
(assert (= a_290 (store a_288 i4 e_289)))
(assert (= a_292 (store a_290 i1 e_291)))
(assert (= a_293 (store a1 i1 e_275)))
(assert (= a_294 (store a_293 i0 e_273)))
(assert (= a_296 (store a_294 i3 e_295)))
(assert (= a_298 (store a_296 i2 e_297)))
(assert (= a_300 (store a_298 i0 e_299)))
(assert (= a_302 (store a_300 i3 e_301)))
(assert (= a_304 (store a_302 i3 e_303)))
(assert (= a_306 (store a_304 i0 e_305)))
(assert (= a_308 (store a_306 i1 e_307)))
(assert (= a_310 (store a_308 i4 e_309)))
(assert (= e_273 (select a1 i1)))
(assert (= e_275 (select a1 i0)))
(assert (= e_277 (select a_276 i2)))
(assert (= e_279 (select a_276 i3)))
(assert (= e_281 (select a_280 i0)))
(assert (= e_283 (select a_280 i3)))
(assert (= e_285 (select a_284 i0)))
(assert (= e_287 (select a_284 i3)))
(assert (= e_289 (select a_288 i1)))
(assert (= e_291 (select a_288 i4)))
(assert (= e_295 (select a_294 i2)))
(assert (= e_297 (select a_294 i3)))
(assert (= e_299 (select a_298 i3)))
(assert (= e_301 (select a_298 i0)))
(assert (= e_303 (select a_302 i0)))
(assert (= e_305 (select a_302 i3)))
(assert (= e_307 (select a_306 i4)))
(assert (= e_309 (select a_306 i1)))
(assert (= e_312 (select a_292 i_311)))
(assert (= e_313 (select a_310 i_311)))
(assert (= i_311 (sk a_292 a_310)))
(assert (not (= e_312 e_313)))
(check-sat)
(exit)
