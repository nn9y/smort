(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_113 () (Array Int Int))
(declare-fun a_115 () (Array Int Int))
(declare-fun a_117 () (Array Int Int))
(declare-fun a_119 () (Array Int Int))
(declare-fun a_121 () (Array Int Int))
(declare-fun a_122 () (Array Int Int))
(declare-fun a_123 () (Array Int Int))
(declare-fun a_124 () (Array Int Int))
(declare-fun a_126 () (Array Int Int))
(declare-fun a_128 () (Array Int Int))
(declare-fun a_130 () (Array Int Int))
(declare-fun a_131 () (Array Int Int))
(declare-fun e_112 () Int)
(declare-fun e_114 () Int)
(declare-fun e_116 () Int)
(declare-fun e_118 () Int)
(declare-fun e_120 () Int)
(declare-fun e_125 () Int)
(declare-fun e_127 () Int)
(declare-fun e_129 () Int)
(declare-fun e_133 () Int)
(declare-fun e_134 () Int)
(declare-fun i_132 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_113 (store a1 i2 e_112)))
(assert (= a_115 (store a_113 i1 e_114)))
(assert (= a_117 (store a_115 i2 e_116)))
(assert (= a_119 (store a_117 i1 e_118)))
(assert (= a_121 (store a_119 i2 e_120)))
(assert (= a_122 (store a_121 i2 e_120)))
(assert (= a_123 (store a1 i1 e_114)))
(assert (= a_124 (store a_123 i2 e_112)))
(assert (= a_126 (store a_124 i1 e_125)))
(assert (= a_128 (store a_126 i2 e_127)))
(assert (= a_130 (store a_128 i2 e_129)))
(assert (= a_131 (store a_130 i2 e_129)))
(assert (= e_112 (select a1 i1)))
(assert (= e_114 (select a1 i2)))
(assert (= e_116 (select a_115 i1)))
(assert (= e_118 (select a_115 i2)))
(assert (= e_120 (select a_119 i2)))
(assert (= e_125 (select a_124 i2)))
(assert (= e_127 (select a_124 i1)))
(assert (= e_129 (select a_128 i2)))
(assert (= e_133 (select a_122 i_132)))
(assert (= e_134 (select a_131 i_132)))
(assert (= i_132 (sk a_122 a_131)))
(assert (not (= e_133 e_134)))
(check-sat)
(exit)
