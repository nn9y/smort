(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_607 () (Array Int Int))
(declare-fun a_609 () (Array Int Int))
(declare-fun a_611 () (Array Int Int))
(declare-fun a_613 () (Array Int Int))
(declare-fun a_615 () (Array Int Int))
(declare-fun a_617 () (Array Int Int))
(declare-fun a_619 () (Array Int Int))
(declare-fun a_621 () (Array Int Int))
(declare-fun a_623 () (Array Int Int))
(declare-fun a_625 () (Array Int Int))
(declare-fun a_627 () (Array Int Int))
(declare-fun a_629 () (Array Int Int))
(declare-fun a_630 () (Array Int Int))
(declare-fun a_631 () (Array Int Int))
(declare-fun a_633 () (Array Int Int))
(declare-fun a_635 () (Array Int Int))
(declare-fun a_637 () (Array Int Int))
(declare-fun a_639 () (Array Int Int))
(declare-fun a_641 () (Array Int Int))
(declare-fun a_643 () (Array Int Int))
(declare-fun a_645 () (Array Int Int))
(declare-fun a_647 () (Array Int Int))
(declare-fun a_649 () (Array Int Int))
(declare-fun a_651 () (Array Int Int))
(declare-fun e_606 () Int)
(declare-fun e_608 () Int)
(declare-fun e_610 () Int)
(declare-fun e_612 () Int)
(declare-fun e_614 () Int)
(declare-fun e_616 () Int)
(declare-fun e_618 () Int)
(declare-fun e_620 () Int)
(declare-fun e_622 () Int)
(declare-fun e_624 () Int)
(declare-fun e_626 () Int)
(declare-fun e_628 () Int)
(declare-fun e_632 () Int)
(declare-fun e_634 () Int)
(declare-fun e_636 () Int)
(declare-fun e_638 () Int)
(declare-fun e_640 () Int)
(declare-fun e_642 () Int)
(declare-fun e_644 () Int)
(declare-fun e_646 () Int)
(declare-fun e_648 () Int)
(declare-fun e_650 () Int)
(declare-fun e_653 () Int)
(declare-fun e_654 () Int)
(declare-fun i_652 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_607 (store a1 i0 e_606)))
(assert (= a_609 (store a_607 i5 e_608)))
(assert (= a_611 (store a_609 i3 e_610)))
(assert (= a_613 (store a_611 i1 e_612)))
(assert (= a_615 (store a_613 i2 e_614)))
(assert (= a_617 (store a_615 i0 e_616)))
(assert (= a_619 (store a_617 i4 e_618)))
(assert (= a_621 (store a_619 i1 e_620)))
(assert (= a_623 (store a_621 i3 e_622)))
(assert (= a_625 (store a_623 i0 e_624)))
(assert (= a_627 (store a_625 i2 e_626)))
(assert (= a_629 (store a_627 i5 e_628)))
(assert (= a_630 (store a1 i5 e_608)))
(assert (= a_631 (store a_630 i0 e_606)))
(assert (= a_633 (store a_631 i3 e_632)))
(assert (= a_635 (store a_633 i1 e_634)))
(assert (= a_637 (store a_635 i2 e_636)))
(assert (= a_639 (store a_637 i0 e_638)))
(assert (= a_641 (store a_639 i4 e_640)))
(assert (= a_643 (store a_641 i1 e_642)))
(assert (= a_645 (store a_643 i3 e_644)))
(assert (= a_647 (store a_645 i0 e_646)))
(assert (= a_649 (store a_647 i5 e_648)))
(assert (= a_651 (store a_649 i2 e_650)))
(assert (= e_606 (select a1 i5)))
(assert (= e_608 (select a1 i0)))
(assert (= e_610 (select a_609 i1)))
(assert (= e_612 (select a_609 i3)))
(assert (= e_614 (select a_613 i0)))
(assert (= e_616 (select a_613 i2)))
(assert (= e_618 (select a_617 i1)))
(assert (= e_620 (select a_617 i4)))
(assert (= e_622 (select a_621 i0)))
(assert (= e_624 (select a_621 i3)))
(assert (= e_626 (select a_625 i5)))
(assert (= e_628 (select a_625 i2)))
(assert (= e_632 (select a_631 i1)))
(assert (= e_634 (select a_631 i3)))
(assert (= e_636 (select a_635 i0)))
(assert (= e_638 (select a_635 i2)))
(assert (= e_640 (select a_639 i1)))
(assert (= e_642 (select a_639 i4)))
(assert (= e_644 (select a_643 i0)))
(assert (= e_646 (select a_643 i3)))
(assert (= e_648 (select a_647 i2)))
(assert (= e_650 (select a_647 i5)))
(assert (= e_653 (select a_629 i_652)))
(assert (= e_654 (select a_651 i_652)))
(assert (= i_652 (sk a_629 a_651)))
(assert (not (= e_653 e_654)))
(check-sat)
(exit)
