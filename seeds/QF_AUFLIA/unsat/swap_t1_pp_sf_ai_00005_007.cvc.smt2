(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_134 () (Array Int Int))
(declare-fun a_136 () (Array Int Int))
(declare-fun a_138 () (Array Int Int))
(declare-fun a_140 () (Array Int Int))
(declare-fun a_142 () (Array Int Int))
(declare-fun a_144 () (Array Int Int))
(declare-fun a_146 () (Array Int Int))
(declare-fun a_148 () (Array Int Int))
(declare-fun a_150 () (Array Int Int))
(declare-fun a_152 () (Array Int Int))
(declare-fun a_153 () (Array Int Int))
(declare-fun a_154 () (Array Int Int))
(declare-fun a_156 () (Array Int Int))
(declare-fun a_158 () (Array Int Int))
(declare-fun a_160 () (Array Int Int))
(declare-fun a_162 () (Array Int Int))
(declare-fun a_164 () (Array Int Int))
(declare-fun a_166 () (Array Int Int))
(declare-fun a_168 () (Array Int Int))
(declare-fun a_170 () (Array Int Int))
(declare-fun e_133 () Int)
(declare-fun e_135 () Int)
(declare-fun e_137 () Int)
(declare-fun e_139 () Int)
(declare-fun e_141 () Int)
(declare-fun e_143 () Int)
(declare-fun e_145 () Int)
(declare-fun e_147 () Int)
(declare-fun e_149 () Int)
(declare-fun e_151 () Int)
(declare-fun e_155 () Int)
(declare-fun e_157 () Int)
(declare-fun e_159 () Int)
(declare-fun e_161 () Int)
(declare-fun e_163 () Int)
(declare-fun e_165 () Int)
(declare-fun e_167 () Int)
(declare-fun e_169 () Int)
(declare-fun e_172 () Int)
(declare-fun e_173 () Int)
(declare-fun i_171 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_134 (store a1 i4 e_133)))
(assert (= a_136 (store a_134 i2 e_135)))
(assert (= a_138 (store a_136 i0 e_137)))
(assert (= a_140 (store a_138 i3 e_139)))
(assert (= a_142 (store a_140 i2 e_141)))
(assert (= a_144 (store a_142 i1 e_143)))
(assert (= a_146 (store a_144 i4 e_145)))
(assert (= a_148 (store a_146 i3 e_147)))
(assert (= a_150 (store a_148 i3 e_149)))
(assert (= a_152 (store a_150 i2 e_151)))
(assert (= a_153 (store a1 i2 e_135)))
(assert (= a_154 (store a_153 i4 e_133)))
(assert (= a_156 (store a_154 i0 e_155)))
(assert (= a_158 (store a_156 i3 e_157)))
(assert (= a_160 (store a_158 i1 e_159)))
(assert (= a_162 (store a_160 i2 e_161)))
(assert (= a_164 (store a_162 i3 e_163)))
(assert (= a_166 (store a_164 i4 e_165)))
(assert (= a_168 (store a_166 i2 e_167)))
(assert (= a_170 (store a_168 i3 e_169)))
(assert (= e_133 (select a1 i2)))
(assert (= e_135 (select a1 i4)))
(assert (= e_137 (select a_136 i3)))
(assert (= e_139 (select a_136 i0)))
(assert (= e_141 (select a_140 i1)))
(assert (= e_143 (select a_140 i2)))
(assert (= e_145 (select a_144 i3)))
(assert (= e_147 (select a_144 i4)))
(assert (= e_149 (select a_148 i2)))
(assert (= e_151 (select a_148 i3)))
(assert (= e_155 (select a_154 i3)))
(assert (= e_157 (select a_154 i0)))
(assert (= e_159 (select a_158 i2)))
(assert (= e_161 (select a_158 i1)))
(assert (= e_163 (select a_162 i4)))
(assert (= e_165 (select a_162 i3)))
(assert (= e_167 (select a_166 i3)))
(assert (= e_169 (select a_166 i2)))
(assert (= e_172 (select a_152 i_171)))
(assert (= e_173 (select a_170 i_171)))
(assert (= i_171 (sk a_152 a_170)))
(assert (not (= e_172 e_173)))
(check-sat)
(exit)
