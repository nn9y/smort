(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_184 () (Array Int Int))
(declare-fun a_185 () (Array Int Int))
(declare-fun a_186 () (Array Int Int))
(declare-fun a_187 () (Array Int Int))
(declare-fun a_188 () (Array Int Int))
(declare-fun a_189 () (Array Int Int))
(declare-fun a_190 () (Array Int Int))
(declare-fun a_191 () (Array Int Int))
(declare-fun a_192 () (Array Int Int))
(declare-fun a_193 () (Array Int Int))
(declare-fun a_194 () (Array Int Int))
(declare-fun a_195 () (Array Int Int))
(declare-fun a_196 () (Array Int Int))
(declare-fun a_197 () (Array Int Int))
(declare-fun a_198 () (Array Int Int))
(declare-fun a_199 () (Array Int Int))
(declare-fun a_200 () (Array Int Int))
(declare-fun a_201 () (Array Int Int))
(declare-fun a_202 () (Array Int Int))
(declare-fun a_203 () (Array Int Int))
(declare-fun e_205 () Int)
(declare-fun e_206 () Int)
(declare-fun i_204 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_184 (store a1 1 e1)))
(assert (= a_185 (store a_184 2 e2)))
(assert (= a_186 (store a_185 3 e3)))
(assert (= a_187 (store a_186 4 e4)))
(assert (= a_188 (store a_187 5 e5)))
(assert (= a_189 (store a_188 6 e6)))
(assert (= a_190 (store a_189 7 e7)))
(assert (= a_191 (store a_190 8 e8)))
(assert (= a_192 (store a_191 9 e9)))
(assert (= a_193 (store a_192 10 e10)))
(assert (= a_194 (store a1 7 e7)))
(assert (= a_195 (store a_194 2 e2)))
(assert (= a_196 (store a_195 6 e6)))
(assert (= a_197 (store a_196 4 e4)))
(assert (= a_198 (store a_197 10 e10)))
(assert (= a_199 (store a_198 5 e5)))
(assert (= a_200 (store a_199 9 e9)))
(assert (= a_201 (store a_200 1 e1)))
(assert (= a_202 (store a_201 3 e3)))
(assert (= a_203 (store a_202 8 e8)))
(assert (= e_205 (select a_193 i_204)))
(assert (= e_206 (select a_203 i_204)))
(assert (= i_204 (sk a_193 a_203)))
(assert (not (= e_205 e_206)))
(check-sat)
(exit)
