(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_40 () (Array Int Int))
(declare-fun a_41 () (Array Int Int))
(declare-fun a_42 () (Array Int Int))
(declare-fun a_43 () (Array Int Int))
(declare-fun a_44 () (Array Int Int))
(declare-fun a_45 () (Array Int Int))
(declare-fun a_46 () (Array Int Int))
(declare-fun a_47 () (Array Int Int))
(declare-fun a_48 () (Array Int Int))
(declare-fun a_49 () (Array Int Int))
(declare-fun a_50 () (Array Int Int))
(declare-fun a_51 () (Array Int Int))
(declare-fun a_52 () (Array Int Int))
(declare-fun a_53 () (Array Int Int))
(declare-fun a_54 () (Array Int Int))
(declare-fun a_55 () (Array Int Int))
(declare-fun a_56 () (Array Int Int))
(declare-fun a_57 () (Array Int Int))
(declare-fun a_58 () (Array Int Int))
(declare-fun a_59 () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(assert (= a_40 (store a1 1 e1)))
(assert (= a_41 (store a_40 2 e2)))
(assert (= a_42 (store a_41 3 e3)))
(assert (= a_43 (store a_42 4 e4)))
(assert (= a_44 (store a_43 5 e5)))
(assert (= a_45 (store a_44 6 e6)))
(assert (= a_46 (store a_45 7 e7)))
(assert (= a_47 (store a_46 8 e8)))
(assert (= a_48 (store a_47 9 e9)))
(assert (= a_49 (store a_48 10 e10)))
(assert (= a_50 (store a1 2 e2)))
(assert (= a_51 (store a_50 4 e4)))
(assert (= a_52 (store a_51 1 e1)))
(assert (= a_53 (store a_52 9 e9)))
(assert (= a_54 (store a_53 5 e5)))
(assert (= a_55 (store a_54 3 e3)))
(assert (= a_56 (store a_55 8 e8)))
(assert (= a_57 (store a_56 7 e7)))
(assert (= a_58 (store a_57 10 e10)))
(assert (= a_59 (store a_58 6 e6)))
(assert (not (= a_49 a_59)))
(check-sat)
(exit)
