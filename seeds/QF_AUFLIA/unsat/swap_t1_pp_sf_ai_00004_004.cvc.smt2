(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_280 () (Array Int Int))
(declare-fun a_282 () (Array Int Int))
(declare-fun a_284 () (Array Int Int))
(declare-fun a_286 () (Array Int Int))
(declare-fun a_288 () (Array Int Int))
(declare-fun a_290 () (Array Int Int))
(declare-fun a_292 () (Array Int Int))
(declare-fun a_294 () (Array Int Int))
(declare-fun a_295 () (Array Int Int))
(declare-fun a_296 () (Array Int Int))
(declare-fun a_298 () (Array Int Int))
(declare-fun a_300 () (Array Int Int))
(declare-fun a_302 () (Array Int Int))
(declare-fun a_304 () (Array Int Int))
(declare-fun e_279 () Int)
(declare-fun e_281 () Int)
(declare-fun e_283 () Int)
(declare-fun e_285 () Int)
(declare-fun e_287 () Int)
(declare-fun e_289 () Int)
(declare-fun e_291 () Int)
(declare-fun e_293 () Int)
(declare-fun e_297 () Int)
(declare-fun e_299 () Int)
(declare-fun e_301 () Int)
(declare-fun e_303 () Int)
(declare-fun e_306 () Int)
(declare-fun e_307 () Int)
(declare-fun i_305 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_280 (store a1 i2 e_279)))
(assert (= a_282 (store a_280 i0 e_281)))
(assert (= a_284 (store a_282 i0 e_283)))
(assert (= a_286 (store a_284 i2 e_285)))
(assert (= a_288 (store a_286 i3 e_287)))
(assert (= a_290 (store a_288 i2 e_289)))
(assert (= a_292 (store a_290 i1 e_291)))
(assert (= a_294 (store a_292 i0 e_293)))
(assert (= a_295 (store a_282 i2 e_285)))
(assert (= a_296 (store a_295 i0 e_283)))
(assert (= a_298 (store a_296 i2 e_297)))
(assert (= a_300 (store a_298 i3 e_299)))
(assert (= a_302 (store a_300 i1 e_301)))
(assert (= a_304 (store a_302 i0 e_303)))
(assert (= e_279 (select a1 i0)))
(assert (= e_281 (select a1 i2)))
(assert (= e_283 (select a_282 i2)))
(assert (= e_285 (select a_282 i0)))
(assert (= e_287 (select a_286 i2)))
(assert (= e_289 (select a_286 i3)))
(assert (= e_291 (select a_290 i0)))
(assert (= e_293 (select a_290 i1)))
(assert (= e_297 (select a_296 i3)))
(assert (= e_299 (select a_296 i2)))
(assert (= e_301 (select a_300 i0)))
(assert (= e_303 (select a_300 i1)))
(assert (= e_306 (select a_294 i_305)))
(assert (= e_307 (select a_304 i_305)))
(assert (= i_305 (sk a_294 a_304)))
(assert (not (= e_306 e_307)))
(check-sat)
(exit)
