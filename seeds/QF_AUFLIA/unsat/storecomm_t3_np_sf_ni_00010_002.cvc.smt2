(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_278 () (Array Int Int))
(declare-fun a_279 () (Array Int Int))
(declare-fun a_280 () (Array Int Int))
(declare-fun a_281 () (Array Int Int))
(declare-fun a_282 () (Array Int Int))
(declare-fun a_283 () (Array Int Int))
(declare-fun a_284 () (Array Int Int))
(declare-fun a_285 () (Array Int Int))
(declare-fun a_286 () (Array Int Int))
(declare-fun a_287 () (Array Int Int))
(declare-fun a_288 () (Array Int Int))
(declare-fun a_289 () (Array Int Int))
(declare-fun a_290 () (Array Int Int))
(declare-fun a_291 () (Array Int Int))
(declare-fun a_292 () (Array Int Int))
(declare-fun a_293 () (Array Int Int))
(declare-fun a_294 () (Array Int Int))
(declare-fun a_295 () (Array Int Int))
(declare-fun a_296 () (Array Int Int))
(declare-fun a_297 () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(assert (= a_278 (store a1 1 e1)))
(assert (= a_279 (store a_278 2 e2)))
(assert (= a_280 (store a_279 3 e3)))
(assert (= a_281 (store a_280 4 e4)))
(assert (= a_282 (store a_281 5 e5)))
(assert (= a_283 (store a_282 6 e6)))
(assert (= a_284 (store a_283 7 e7)))
(assert (= a_285 (store a_284 8 e8)))
(assert (= a_286 (store a_285 9 e9)))
(assert (= a_287 (store a_286 10 e10)))
(assert (= a_288 (store a1 10 e10)))
(assert (= a_289 (store a_288 6 e6)))
(assert (= a_290 (store a_289 9 e9)))
(assert (= a_291 (store a_290 7 e7)))
(assert (= a_292 (store a_291 3 e3)))
(assert (= a_293 (store a_292 4 e4)))
(assert (= a_294 (store a_293 5 e5)))
(assert (= a_295 (store a_294 2 e2)))
(assert (= a_296 (store a_295 1 e1)))
(assert (= a_297 (store a_296 8 e8)))
(assert (not (= a_287 a_297)))
(check-sat)
(exit)
