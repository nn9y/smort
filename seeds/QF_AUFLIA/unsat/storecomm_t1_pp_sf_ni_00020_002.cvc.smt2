(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_600 () (Array Int Int))
(declare-fun a_601 () (Array Int Int))
(declare-fun a_602 () (Array Int Int))
(declare-fun a_603 () (Array Int Int))
(declare-fun a_604 () (Array Int Int))
(declare-fun a_605 () (Array Int Int))
(declare-fun a_606 () (Array Int Int))
(declare-fun a_607 () (Array Int Int))
(declare-fun a_608 () (Array Int Int))
(declare-fun a_609 () (Array Int Int))
(declare-fun a_610 () (Array Int Int))
(declare-fun a_611 () (Array Int Int))
(declare-fun a_612 () (Array Int Int))
(declare-fun a_613 () (Array Int Int))
(declare-fun a_614 () (Array Int Int))
(declare-fun a_615 () (Array Int Int))
(declare-fun a_616 () (Array Int Int))
(declare-fun a_617 () (Array Int Int))
(declare-fun a_618 () (Array Int Int))
(declare-fun a_619 () (Array Int Int))
(declare-fun a_620 () (Array Int Int))
(declare-fun a_621 () (Array Int Int))
(declare-fun a_622 () (Array Int Int))
(declare-fun a_623 () (Array Int Int))
(declare-fun a_624 () (Array Int Int))
(declare-fun a_625 () (Array Int Int))
(declare-fun a_626 () (Array Int Int))
(declare-fun a_627 () (Array Int Int))
(declare-fun a_628 () (Array Int Int))
(declare-fun a_629 () (Array Int Int))
(declare-fun a_630 () (Array Int Int))
(declare-fun a_631 () (Array Int Int))
(declare-fun a_632 () (Array Int Int))
(declare-fun a_633 () (Array Int Int))
(declare-fun a_634 () (Array Int Int))
(declare-fun a_635 () (Array Int Int))
(declare-fun a_636 () (Array Int Int))
(declare-fun a_637 () (Array Int Int))
(declare-fun a_638 () (Array Int Int))
(declare-fun a_639 () (Array Int Int))
(declare-fun e_641 () Int)
(declare-fun e_642 () Int)
(declare-fun i_640 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e11 () Int)
(declare-fun e12 () Int)
(declare-fun e13 () Int)
(declare-fun e14 () Int)
(declare-fun e15 () Int)
(declare-fun e16 () Int)
(declare-fun e17 () Int)
(declare-fun e18 () Int)
(declare-fun e19 () Int)
(declare-fun e2 () Int)
(declare-fun e20 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_600 (store a1 1 e1)))
(assert (= a_601 (store a_600 2 e2)))
(assert (= a_602 (store a_601 3 e3)))
(assert (= a_603 (store a_602 4 e4)))
(assert (= a_604 (store a_603 5 e5)))
(assert (= a_605 (store a_604 6 e6)))
(assert (= a_606 (store a_605 7 e7)))
(assert (= a_607 (store a_606 8 e8)))
(assert (= a_608 (store a_607 9 e9)))
(assert (= a_609 (store a_608 10 e10)))
(assert (= a_610 (store a_609 11 e11)))
(assert (= a_611 (store a_610 12 e12)))
(assert (= a_612 (store a_611 13 e13)))
(assert (= a_613 (store a_612 14 e14)))
(assert (= a_614 (store a_613 15 e15)))
(assert (= a_615 (store a_614 16 e16)))
(assert (= a_616 (store a_615 17 e17)))
(assert (= a_617 (store a_616 18 e18)))
(assert (= a_618 (store a_617 19 e19)))
(assert (= a_619 (store a_618 20 e20)))
(assert (= a_620 (store a1 4 e4)))
(assert (= a_621 (store a_620 17 e17)))
(assert (= a_622 (store a_621 7 e7)))
(assert (= a_623 (store a_622 8 e8)))
(assert (= a_624 (store a_623 3 e3)))
(assert (= a_625 (store a_624 18 e18)))
(assert (= a_626 (store a_625 14 e14)))
(assert (= a_627 (store a_626 11 e11)))
(assert (= a_628 (store a_627 15 e15)))
(assert (= a_629 (store a_628 10 e10)))
(assert (= a_630 (store a_629 16 e16)))
(assert (= a_631 (store a_630 19 e19)))
(assert (= a_632 (store a_631 1 e1)))
(assert (= a_633 (store a_632 12 e12)))
(assert (= a_634 (store a_633 5 e5)))
(assert (= a_635 (store a_634 6 e6)))
(assert (= a_636 (store a_635 2 e2)))
(assert (= a_637 (store a_636 20 e20)))
(assert (= a_638 (store a_637 9 e9)))
(assert (= a_639 (store a_638 13 e13)))
(assert (= e_641 (select a_619 i_640)))
(assert (= e_642 (select a_639 i_640)))
(assert (= i_640 (sk a_619 a_639)))
(assert (not (= e_641 e_642)))
(check-sat)
(exit)
