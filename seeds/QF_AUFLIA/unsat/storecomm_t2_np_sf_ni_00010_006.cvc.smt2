(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_120 () (Array Int Int))
(declare-fun a_121 () (Array Int Int))
(declare-fun a_122 () (Array Int Int))
(declare-fun a_123 () (Array Int Int))
(declare-fun a_124 () (Array Int Int))
(declare-fun a_125 () (Array Int Int))
(declare-fun a_126 () (Array Int Int))
(declare-fun a_127 () (Array Int Int))
(declare-fun a_128 () (Array Int Int))
(declare-fun a_129 () (Array Int Int))
(declare-fun a_130 () (Array Int Int))
(declare-fun a_131 () (Array Int Int))
(declare-fun a_132 () (Array Int Int))
(declare-fun a_133 () (Array Int Int))
(declare-fun a_134 () (Array Int Int))
(declare-fun a_135 () (Array Int Int))
(declare-fun a_136 () (Array Int Int))
(declare-fun a_137 () (Array Int Int))
(declare-fun a_138 () (Array Int Int))
(declare-fun a_139 () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(assert (= a_120 (store a1 1 e1)))
(assert (= a_121 (store a_120 2 e2)))
(assert (= a_122 (store a_121 3 e3)))
(assert (= a_123 (store a_122 4 e4)))
(assert (= a_124 (store a_123 5 e5)))
(assert (= a_125 (store a_124 6 e6)))
(assert (= a_126 (store a_125 7 e7)))
(assert (= a_127 (store a_126 8 e8)))
(assert (= a_128 (store a_127 9 e9)))
(assert (= a_129 (store a_128 10 e10)))
(assert (= a_130 (store a1 9 e9)))
(assert (= a_131 (store a_130 3 e3)))
(assert (= a_132 (store a_131 5 e5)))
(assert (= a_133 (store a_132 4 e4)))
(assert (= a_134 (store a_133 6 e6)))
(assert (= a_135 (store a_134 1 e1)))
(assert (= a_136 (store a_135 10 e10)))
(assert (= a_137 (store a_136 2 e2)))
(assert (= a_138 (store a_137 8 e8)))
(assert (= a_139 (store a_138 7 e7)))
(assert (not (= a_129 a_139)))
(check-sat)
(exit)
