(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_46 () (Array Int Int))
(declare-fun a_47 () (Array Int Int))
(declare-fun a_48 () (Array Int Int))
(declare-fun a_49 () (Array Int Int))
(declare-fun a_50 () (Array Int Int))
(declare-fun a_51 () (Array Int Int))
(declare-fun a_52 () (Array Int Int))
(declare-fun a_53 () (Array Int Int))
(declare-fun a_54 () (Array Int Int))
(declare-fun a_55 () (Array Int Int))
(declare-fun a_56 () (Array Int Int))
(declare-fun a_57 () (Array Int Int))
(declare-fun a_58 () (Array Int Int))
(declare-fun a_59 () (Array Int Int))
(declare-fun a_60 () (Array Int Int))
(declare-fun a_61 () (Array Int Int))
(declare-fun a_62 () (Array Int Int))
(declare-fun a_63 () (Array Int Int))
(declare-fun a_64 () (Array Int Int))
(declare-fun a_65 () (Array Int Int))
(declare-fun e_67 () Int)
(declare-fun e_68 () Int)
(declare-fun i_66 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_46 (store a1 i1 e1)))
(assert (= a_47 (store a_46 i2 e2)))
(assert (= a_48 (store a_47 i3 e3)))
(assert (= a_49 (store a_48 i4 e4)))
(assert (= a_50 (store a_49 i5 e5)))
(assert (= a_51 (store a_50 i6 e6)))
(assert (= a_52 (store a_51 i7 e7)))
(assert (= a_53 (store a_52 i8 e8)))
(assert (= a_54 (store a_53 i9 e9)))
(assert (= a_55 (store a_54 i10 e10)))
(assert (= a_56 (store a1 i2 e2)))
(assert (= a_57 (store a_56 i4 e4)))
(assert (= a_58 (store a_57 i1 e1)))
(assert (= a_59 (store a_58 i9 e9)))
(assert (= a_60 (store a_59 i5 e5)))
(assert (= a_61 (store a_60 i3 e3)))
(assert (= a_62 (store a_61 i8 e8)))
(assert (= a_63 (store a_62 i7 e7)))
(assert (= a_64 (store a_63 i10 e10)))
(assert (= a_65 (store a_64 i6 e6)))
(assert (= e_67 (select a_55 i_66)))
(assert (= e_68 (select a_65 i_66)))
(assert (= i_66 (sk a_55 a_65)))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= e_67 e_68)))
(check-sat)
(exit)
