(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_1 () (Array Int Int))
(declare-fun a_10 () (Array Int Int))
(declare-fun a_12 () (Array Int Int))
(declare-fun a_14 () (Array Int Int))
(declare-fun a_16 () (Array Int Int))
(declare-fun a_18 () (Array Int Int))
(declare-fun a_2 () (Array Int Int))
(declare-fun a_20 () (Array Int Int))
(declare-fun a_22 () (Array Int Int))
(declare-fun a_23 () (Array Int Int))
(declare-fun a_24 () (Array Int Int))
(declare-fun a_26 () (Array Int Int))
(declare-fun a_28 () (Array Int Int))
(declare-fun a_30 () (Array Int Int))
(declare-fun a_32 () (Array Int Int))
(declare-fun a_34 () (Array Int Int))
(declare-fun a_36 () (Array Int Int))
(declare-fun a_38 () (Array Int Int))
(declare-fun a_4 () (Array Int Int))
(declare-fun a_40 () (Array Int Int))
(declare-fun a_6 () (Array Int Int))
(declare-fun a_8 () (Array Int Int))
(declare-fun e_0 () Int)
(declare-fun e_11 () Int)
(declare-fun e_13 () Int)
(declare-fun e_15 () Int)
(declare-fun e_17 () Int)
(declare-fun e_19 () Int)
(declare-fun e_21 () Int)
(declare-fun e_25 () Int)
(declare-fun e_27 () Int)
(declare-fun e_29 () Int)
(declare-fun e_3 () Int)
(declare-fun e_31 () Int)
(declare-fun e_33 () Int)
(declare-fun e_35 () Int)
(declare-fun e_37 () Int)
(declare-fun e_39 () Int)
(declare-fun e_42 () Int)
(declare-fun e_43 () Int)
(declare-fun e_5 () Int)
(declare-fun e_7 () Int)
(declare-fun e_9 () Int)
(declare-fun i_41 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_1 (store a1 i1 e_0)))
(assert (= a_10 (store a_8 i2 e_9)))
(assert (= a_12 (store a_10 i3 e_11)))
(assert (= a_14 (store a_12 i1 e_13)))
(assert (= a_16 (store a_14 i2 e_15)))
(assert (= a_18 (store a_16 i4 e_17)))
(assert (= a_2 (store a_1 i1 e_0)))
(assert (= a_20 (store a_18 i0 e_19)))
(assert (= a_22 (store a_20 i1 e_21)))
(assert (= a_23 (store a_2 i2 e_5)))
(assert (= a_24 (store a_23 i5 e_3)))
(assert (= a_26 (store a_24 i4 e_25)))
(assert (= a_28 (store a_26 i2 e_27)))
(assert (= a_30 (store a_28 i1 e_29)))
(assert (= a_32 (store a_30 i3 e_31)))
(assert (= a_34 (store a_32 i2 e_33)))
(assert (= a_36 (store a_34 i4 e_35)))
(assert (= a_38 (store a_36 i0 e_37)))
(assert (= a_4 (store a_2 i5 e_3)))
(assert (= a_40 (store a_38 i1 e_39)))
(assert (= a_6 (store a_4 i2 e_5)))
(assert (= a_8 (store a_6 i4 e_7)))
(assert (= e_0 (select a1 i1)))
(assert (= e_11 (select a_10 i1)))
(assert (= e_13 (select a_10 i3)))
(assert (= e_15 (select a_14 i4)))
(assert (= e_17 (select a_14 i2)))
(assert (= e_19 (select a_18 i1)))
(assert (= e_21 (select a_18 i0)))
(assert (= e_25 (select a_24 i2)))
(assert (= e_27 (select a_24 i4)))
(assert (= e_29 (select a_28 i3)))
(assert (= e_3 (select a_2 i2)))
(assert (= e_31 (select a_28 i1)))
(assert (= e_33 (select a_32 i4)))
(assert (= e_35 (select a_32 i2)))
(assert (= e_37 (select a_36 i1)))
(assert (= e_39 (select a_36 i0)))
(assert (= e_42 (select a_22 i_41)))
(assert (= e_43 (select a_40 i_41)))
(assert (= e_5 (select a_2 i5)))
(assert (= e_7 (select a_6 i2)))
(assert (= e_9 (select a_6 i4)))
(assert (= i_41 (sk a_22 a_40)))
(assert (not (= e_42 e_43)))
(check-sat)
(exit)
