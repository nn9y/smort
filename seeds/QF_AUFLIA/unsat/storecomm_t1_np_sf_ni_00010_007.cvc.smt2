(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_80 () (Array Int Int))
(declare-fun a_81 () (Array Int Int))
(declare-fun a_82 () (Array Int Int))
(declare-fun a_83 () (Array Int Int))
(declare-fun a_84 () (Array Int Int))
(declare-fun a_85 () (Array Int Int))
(declare-fun a_86 () (Array Int Int))
(declare-fun a_87 () (Array Int Int))
(declare-fun a_88 () (Array Int Int))
(declare-fun a_89 () (Array Int Int))
(declare-fun a_90 () (Array Int Int))
(declare-fun a_91 () (Array Int Int))
(declare-fun a_92 () (Array Int Int))
(declare-fun a_93 () (Array Int Int))
(declare-fun a_94 () (Array Int Int))
(declare-fun a_95 () (Array Int Int))
(declare-fun a_96 () (Array Int Int))
(declare-fun a_97 () (Array Int Int))
(declare-fun a_98 () (Array Int Int))
(declare-fun a_99 () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(assert (= a_80 (store a1 1 e1)))
(assert (= a_81 (store a_80 2 e2)))
(assert (= a_82 (store a_81 3 e3)))
(assert (= a_83 (store a_82 4 e4)))
(assert (= a_84 (store a_83 5 e5)))
(assert (= a_85 (store a_84 6 e6)))
(assert (= a_86 (store a_85 7 e7)))
(assert (= a_87 (store a_86 8 e8)))
(assert (= a_88 (store a_87 9 e9)))
(assert (= a_89 (store a_88 10 e10)))
(assert (= a_90 (store a1 9 e9)))
(assert (= a_91 (store a_90 6 e6)))
(assert (= a_92 (store a_91 7 e7)))
(assert (= a_93 (store a_92 8 e8)))
(assert (= a_94 (store a_93 2 e2)))
(assert (= a_95 (store a_94 5 e5)))
(assert (= a_96 (store a_95 3 e3)))
(assert (= a_97 (store a_96 10 e10)))
(assert (= a_98 (store a_97 4 e4)))
(assert (= a_99 (store a_98 1 e1)))
(assert (not (= a_89 a_99)))
(check-sat)
(exit)
