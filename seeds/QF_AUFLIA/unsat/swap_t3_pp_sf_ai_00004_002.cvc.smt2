(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun a_384 () (Array Int Int))
(declare-fun a_386 () (Array Int Int))
(declare-fun a_388 () (Array Int Int))
(declare-fun a_390 () (Array Int Int))
(declare-fun a_392 () (Array Int Int))
(declare-fun a_394 () (Array Int Int))
(declare-fun a_396 () (Array Int Int))
(declare-fun a_398 () (Array Int Int))
(declare-fun a_399 () (Array Int Int))
(declare-fun a_400 () (Array Int Int))
(declare-fun a_402 () (Array Int Int))
(declare-fun a_404 () (Array Int Int))
(declare-fun a_406 () (Array Int Int))
(declare-fun a_408 () (Array Int Int))
(declare-fun e_383 () Int)
(declare-fun e_385 () Int)
(declare-fun e_387 () Int)
(declare-fun e_389 () Int)
(declare-fun e_391 () Int)
(declare-fun e_393 () Int)
(declare-fun e_395 () Int)
(declare-fun e_397 () Int)
(declare-fun e_401 () Int)
(declare-fun e_403 () Int)
(declare-fun e_405 () Int)
(declare-fun e_407 () Int)
(declare-fun e_410 () Int)
(declare-fun e_411 () Int)
(declare-fun i_409 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_384 (store a1 i1 e_383)))
(assert (= a_386 (store a_384 i3 e_385)))
(assert (= a_388 (store a_386 i0 e_387)))
(assert (= a_390 (store a_388 i2 e_389)))
(assert (= a_392 (store a_390 i2 e_391)))
(assert (= a_394 (store a_392 i1 e_393)))
(assert (= a_396 (store a_394 i2 e_395)))
(assert (= a_398 (store a_396 i0 e_397)))
(assert (= a_399 (store a_386 i2 e_389)))
(assert (= a_400 (store a_399 i0 e_387)))
(assert (= a_402 (store a_400 i1 e_401)))
(assert (= a_404 (store a_402 i2 e_403)))
(assert (= a_406 (store a_404 i2 e_405)))
(assert (= a_408 (store a_406 i0 e_407)))
(assert (= e_383 (select a1 i3)))
(assert (= e_385 (select a1 i1)))
(assert (= e_387 (select a_386 i2)))
(assert (= e_389 (select a_386 i0)))
(assert (= e_391 (select a_390 i1)))
(assert (= e_393 (select a_390 i2)))
(assert (= e_395 (select a_394 i0)))
(assert (= e_397 (select a_394 i2)))
(assert (= e_401 (select a_400 i2)))
(assert (= e_403 (select a_400 i1)))
(assert (= e_405 (select a_404 i0)))
(assert (= e_407 (select a_404 i2)))
(assert (= e_410 (select a_398 i_409)))
(assert (= e_411 (select a_408 i_409)))
(assert (= i_409 (sk a_398 a_408)))
(assert (not (= e_410 e_411)))
(check-sat)
(exit)
