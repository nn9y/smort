(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_258 () (Array Int Int))
(declare-fun a_259 () (Array Int Int))
(declare-fun a_261 () (Array Int Int))
(declare-fun a_263 () (Array Int Int))
(declare-fun a_265 () (Array Int Int))
(declare-fun a_267 () (Array Int Int))
(declare-fun a_269 () (Array Int Int))
(declare-fun a_271 () (Array Int Int))
(declare-fun a_273 () (Array Int Int))
(declare-fun a_275 () (Array Int Int))
(declare-fun a_277 () (Array Int Int))
(declare-fun a_279 () (Array Int Int))
(declare-fun a_280 () (Array Int Int))
(declare-fun a_281 () (Array Int Int))
(declare-fun a_283 () (Array Int Int))
(declare-fun a_285 () (Array Int Int))
(declare-fun a_287 () (Array Int Int))
(declare-fun a_288 () (Array Int Int))
(declare-fun e_257 () Int)
(declare-fun e_260 () Int)
(declare-fun e_262 () Int)
(declare-fun e_264 () Int)
(declare-fun e_266 () Int)
(declare-fun e_268 () Int)
(declare-fun e_270 () Int)
(declare-fun e_272 () Int)
(declare-fun e_274 () Int)
(declare-fun e_276 () Int)
(declare-fun e_278 () Int)
(declare-fun e_282 () Int)
(declare-fun e_284 () Int)
(declare-fun e_286 () Int)
(declare-fun e_290 () Int)
(declare-fun e_291 () Int)
(declare-fun i_289 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_258 (store a1 i1 e_257)))
(assert (= a_259 (store a_258 i1 e_257)))
(assert (= a_261 (store a_259 i3 e_260)))
(assert (= a_263 (store a_261 i5 e_262)))
(assert (= a_265 (store a_263 i5 e_264)))
(assert (= a_267 (store a_265 i0 e_266)))
(assert (= a_269 (store a_267 i1 e_268)))
(assert (= a_271 (store a_269 i5 e_270)))
(assert (= a_273 (store a_271 i5 e_272)))
(assert (= a_275 (store a_273 i1 e_274)))
(assert (= a_277 (store a_275 i4 e_276)))
(assert (= a_279 (store a_277 i5 e_278)))
(assert (= a_280 (store a_267 i5 e_270)))
(assert (= a_281 (store a_280 i1 e_268)))
(assert (= a_283 (store a_281 i5 e_282)))
(assert (= a_285 (store a_283 i1 e_284)))
(assert (= a_287 (store a_285 i5 e_286)))
(assert (= a_288 (store a_287 i5 e_286)))
(assert (= e_257 (select a1 i1)))
(assert (= e_260 (select a_259 i5)))
(assert (= e_262 (select a_259 i3)))
(assert (= e_264 (select a_263 i0)))
(assert (= e_266 (select a_263 i5)))
(assert (= e_268 (select a_267 i5)))
(assert (= e_270 (select a_267 i1)))
(assert (= e_272 (select a_271 i1)))
(assert (= e_274 (select a_271 i5)))
(assert (= e_276 (select a_275 i5)))
(assert (= e_278 (select a_275 i4)))
(assert (= e_282 (select a_281 i1)))
(assert (= e_284 (select a_281 i5)))
(assert (= e_286 (select a_285 i5)))
(assert (= e_290 (select a_279 i_289)))
(assert (= e_291 (select a_288 i_289)))
(assert (= i_289 (sk a_279 a_288)))
(assert (not (= e_290 e_291)))
(check-sat)
(exit)
