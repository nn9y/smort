(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_0 () (Array Int Int))
(declare-fun a_1 () (Array Int Int))
(declare-fun a_10 () (Array Int Int))
(declare-fun a_11 () (Array Int Int))
(declare-fun a_12 () (Array Int Int))
(declare-fun a_13 () (Array Int Int))
(declare-fun a_14 () (Array Int Int))
(declare-fun a_15 () (Array Int Int))
(declare-fun a_16 () (Array Int Int))
(declare-fun a_17 () (Array Int Int))
(declare-fun a_18 () (Array Int Int))
(declare-fun a_19 () (Array Int Int))
(declare-fun a_2 () (Array Int Int))
(declare-fun a_20 () (Array Int Int))
(declare-fun a_21 () (Array Int Int))
(declare-fun a_22 () (Array Int Int))
(declare-fun a_23 () (Array Int Int))
(declare-fun a_24 () (Array Int Int))
(declare-fun a_25 () (Array Int Int))
(declare-fun a_26 () (Array Int Int))
(declare-fun a_27 () (Array Int Int))
(declare-fun a_28 () (Array Int Int))
(declare-fun a_29 () (Array Int Int))
(declare-fun a_3 () (Array Int Int))
(declare-fun a_30 () (Array Int Int))
(declare-fun a_31 () (Array Int Int))
(declare-fun a_32 () (Array Int Int))
(declare-fun a_33 () (Array Int Int))
(declare-fun a_34 () (Array Int Int))
(declare-fun a_35 () (Array Int Int))
(declare-fun a_36 () (Array Int Int))
(declare-fun a_37 () (Array Int Int))
(declare-fun a_38 () (Array Int Int))
(declare-fun a_39 () (Array Int Int))
(declare-fun a_4 () (Array Int Int))
(declare-fun a_5 () (Array Int Int))
(declare-fun a_6 () (Array Int Int))
(declare-fun a_7 () (Array Int Int))
(declare-fun a_8 () (Array Int Int))
(declare-fun a_9 () (Array Int Int))
(declare-fun e_41 () Int)
(declare-fun e_42 () Int)
(declare-fun i_40 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e11 () Int)
(declare-fun e12 () Int)
(declare-fun e13 () Int)
(declare-fun e14 () Int)
(declare-fun e15 () Int)
(declare-fun e16 () Int)
(declare-fun e17 () Int)
(declare-fun e18 () Int)
(declare-fun e19 () Int)
(declare-fun e2 () Int)
(declare-fun e20 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_0 (store a1 1 e1)))
(assert (= a_1 (store a_0 2 e2)))
(assert (= a_10 (store a_9 11 e11)))
(assert (= a_11 (store a_10 12 e12)))
(assert (= a_12 (store a_11 13 e13)))
(assert (= a_13 (store a_12 14 e14)))
(assert (= a_14 (store a_13 15 e15)))
(assert (= a_15 (store a_14 16 e16)))
(assert (= a_16 (store a_15 17 e17)))
(assert (= a_17 (store a_16 18 e18)))
(assert (= a_18 (store a_17 19 e19)))
(assert (= a_19 (store a_18 1 e1)))
(assert (= a_2 (store a_1 3 e3)))
(assert (= a_20 (store a1 3 e3)))
(assert (= a_21 (store a_20 17 e17)))
(assert (= a_22 (store a_21 6 e6)))
(assert (= a_23 (store a_22 9 e9)))
(assert (= a_24 (store a_23 19 e19)))
(assert (= a_25 (store a_24 12 e12)))
(assert (= a_26 (store a_25 18 e18)))
(assert (= a_27 (store a_26 11 e11)))
(assert (= a_28 (store a_27 15 e15)))
(assert (= a_29 (store a_28 2 e2)))
(assert (= a_3 (store a_2 4 e4)))
(assert (= a_30 (store a_29 8 e8)))
(assert (= a_31 (store a_30 7 e7)))
(assert (= a_32 (store a_31 10 e10)))
(assert (= a_33 (store a_32 5 e5)))
(assert (= a_34 (store a_33 4 e4)))
(assert (= a_35 (store a_34 20 e20)))
(assert (= a_36 (store a_35 14 e14)))
(assert (= a_37 (store a_36 13 e13)))
(assert (= a_38 (store a_37 16 e16)))
(assert (= a_39 (store a_38 1 e1)))
(assert (= a_4 (store a_3 5 e5)))
(assert (= a_5 (store a_4 6 e6)))
(assert (= a_6 (store a_5 7 e7)))
(assert (= a_7 (store a_6 8 e8)))
(assert (= a_8 (store a_7 9 e9)))
(assert (= a_9 (store a_8 10 e10)))
(assert (= e_41 (select a_19 i_40)))
(assert (= e_42 (select a_39 i_40)))
(assert (= i_40 (sk a_19 a_39)))
(assert (not (= e_41 e_42)))
(check-sat)
(exit)
