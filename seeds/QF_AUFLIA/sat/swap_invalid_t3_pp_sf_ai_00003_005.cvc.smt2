(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_118 () (Array Int Int))
(declare-fun a_120 () (Array Int Int))
(declare-fun a_122 () (Array Int Int))
(declare-fun a_124 () (Array Int Int))
(declare-fun a_126 () (Array Int Int))
(declare-fun a_127 () (Array Int Int))
(declare-fun a_128 () (Array Int Int))
(declare-fun a_129 () (Array Int Int))
(declare-fun a_131 () (Array Int Int))
(declare-fun a_133 () (Array Int Int))
(declare-fun a_135 () (Array Int Int))
(declare-fun a_137 () (Array Int Int))
(declare-fun e_117 () Int)
(declare-fun e_119 () Int)
(declare-fun e_121 () Int)
(declare-fun e_123 () Int)
(declare-fun e_125 () Int)
(declare-fun e_130 () Int)
(declare-fun e_132 () Int)
(declare-fun e_134 () Int)
(declare-fun e_136 () Int)
(declare-fun e_139 () Int)
(declare-fun e_140 () Int)
(declare-fun i_138 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_118 (store a1 i2 e_117)))
(assert (= a_120 (store a_118 i1 e_119)))
(assert (= a_122 (store a_120 i2 e_121)))
(assert (= a_124 (store a_122 i1 e_123)))
(assert (= a_126 (store a_124 i2 e_125)))
(assert (= a_127 (store a_126 i2 e_125)))
(assert (= a_128 (store a1 i1 e_119)))
(assert (= a_129 (store a_128 i2 e_117)))
(assert (= a_131 (store a_129 i1 e_130)))
(assert (= a_133 (store a_131 i2 e_132)))
(assert (= a_135 (store a_133 i0 e_134)))
(assert (= a_137 (store a_135 i2 e_136)))
(assert (= e_117 (select a1 i1)))
(assert (= e_119 (select a1 i2)))
(assert (= e_121 (select a_120 i1)))
(assert (= e_123 (select a_120 i2)))
(assert (= e_125 (select a_124 i2)))
(assert (= e_130 (select a_129 i2)))
(assert (= e_132 (select a_129 i1)))
(assert (= e_134 (select a_133 i2)))
(assert (= e_136 (select a_133 i0)))
(assert (= e_139 (select a_127 i_138)))
(assert (= e_140 (select a_137 i_138)))
(assert (= i_138 (sk a_127 a_137)))
(assert (not (= e_139 e_140)))
(check-sat)
(exit)
