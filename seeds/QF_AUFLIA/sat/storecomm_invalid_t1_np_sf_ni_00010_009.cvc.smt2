(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_0 () (Array Int Int))
(declare-fun a_1 () (Array Int Int))
(declare-fun a_10 () (Array Int Int))
(declare-fun a_11 () (Array Int Int))
(declare-fun a_12 () (Array Int Int))
(declare-fun a_13 () (Array Int Int))
(declare-fun a_14 () (Array Int Int))
(declare-fun a_15 () (Array Int Int))
(declare-fun a_16 () (Array Int Int))
(declare-fun a_17 () (Array Int Int))
(declare-fun a_18 () (Array Int Int))
(declare-fun a_19 () (Array Int Int))
(declare-fun a_2 () (Array Int Int))
(declare-fun a_3 () (Array Int Int))
(declare-fun a_4 () (Array Int Int))
(declare-fun a_5 () (Array Int Int))
(declare-fun a_6 () (Array Int Int))
(declare-fun a_7 () (Array Int Int))
(declare-fun a_8 () (Array Int Int))
(declare-fun a_9 () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(assert (= a_0 (store a1 1 e1)))
(assert (= a_1 (store a_0 2 e2)))
(assert (= a_10 (store a1 9 e9)))
(assert (= a_11 (store a_10 6 e6)))
(assert (= a_12 (store a_11 4 e4)))
(assert (= a_13 (store a_12 5 e5)))
(assert (= a_14 (store a_13 3 e3)))
(assert (= a_15 (store a_14 2 e2)))
(assert (= a_16 (store a_15 10 e10)))
(assert (= a_17 (store a_16 7 e7)))
(assert (= a_18 (store a_17 8 e8)))
(assert (= a_19 (store a_18 1 e1)))
(assert (= a_2 (store a_1 3 e3)))
(assert (= a_3 (store a_2 4 e4)))
(assert (= a_4 (store a_3 5 e5)))
(assert (= a_5 (store a_4 6 e6)))
(assert (= a_6 (store a_5 7 e7)))
(assert (= a_7 (store a_6 8 e8)))
(assert (= a_8 (store a_7 9 e9)))
(assert (= a_9 (store a_8 1 e1)))
(assert (not (= a_9 a_19)))
(check-sat)
(exit)
