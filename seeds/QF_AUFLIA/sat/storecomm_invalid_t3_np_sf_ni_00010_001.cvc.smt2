(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_318 () (Array Int Int))
(declare-fun a_319 () (Array Int Int))
(declare-fun a_320 () (Array Int Int))
(declare-fun a_321 () (Array Int Int))
(declare-fun a_322 () (Array Int Int))
(declare-fun a_323 () (Array Int Int))
(declare-fun a_324 () (Array Int Int))
(declare-fun a_325 () (Array Int Int))
(declare-fun a_326 () (Array Int Int))
(declare-fun a_327 () (Array Int Int))
(declare-fun a_328 () (Array Int Int))
(declare-fun a_329 () (Array Int Int))
(declare-fun a_330 () (Array Int Int))
(declare-fun a_331 () (Array Int Int))
(declare-fun a_332 () (Array Int Int))
(declare-fun a_333 () (Array Int Int))
(declare-fun a_334 () (Array Int Int))
(declare-fun a_335 () (Array Int Int))
(declare-fun a_336 () (Array Int Int))
(declare-fun a_337 () (Array Int Int))
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(assert (= a_318 (store a1 1 e1)))
(assert (= a_319 (store a_318 2 e2)))
(assert (= a_320 (store a_319 3 e3)))
(assert (= a_321 (store a_320 4 e4)))
(assert (= a_322 (store a_321 5 e5)))
(assert (= a_323 (store a_322 6 e6)))
(assert (= a_324 (store a_323 7 e7)))
(assert (= a_325 (store a_324 8 e8)))
(assert (= a_326 (store a_325 9 e9)))
(assert (= a_327 (store a_326 1 e1)))
(assert (= a_328 (store a1 10 e10)))
(assert (= a_329 (store a_328 5 e5)))
(assert (= a_330 (store a_329 3 e3)))
(assert (= a_331 (store a_330 8 e8)))
(assert (= a_332 (store a_331 9 e9)))
(assert (= a_333 (store a_332 4 e4)))
(assert (= a_334 (store a_333 2 e2)))
(assert (= a_335 (store a_334 7 e7)))
(assert (= a_336 (store a_335 6 e6)))
(assert (= a_337 (store a_336 1 e1)))
(assert (not (= a_327 a_337)))
(check-sat)
(exit)
