(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_135 () (Array Int Int))
(declare-fun a_137 () (Array Int Int))
(declare-fun a_139 () (Array Int Int))
(declare-fun a_141 () (Array Int Int))
(declare-fun a_143 () (Array Int Int))
(declare-fun a_145 () (Array Int Int))
(declare-fun a_147 () (Array Int Int))
(declare-fun a_149 () (Array Int Int))
(declare-fun a_151 () (Array Int Int))
(declare-fun a_153 () (Array Int Int))
(declare-fun a_154 () (Array Int Int))
(declare-fun a_155 () (Array Int Int))
(declare-fun a_157 () (Array Int Int))
(declare-fun a_159 () (Array Int Int))
(declare-fun a_161 () (Array Int Int))
(declare-fun a_163 () (Array Int Int))
(declare-fun a_165 () (Array Int Int))
(declare-fun a_167 () (Array Int Int))
(declare-fun a_169 () (Array Int Int))
(declare-fun a_170 () (Array Int Int))
(declare-fun e_134 () Int)
(declare-fun e_136 () Int)
(declare-fun e_138 () Int)
(declare-fun e_140 () Int)
(declare-fun e_142 () Int)
(declare-fun e_144 () Int)
(declare-fun e_146 () Int)
(declare-fun e_148 () Int)
(declare-fun e_150 () Int)
(declare-fun e_152 () Int)
(declare-fun e_156 () Int)
(declare-fun e_158 () Int)
(declare-fun e_160 () Int)
(declare-fun e_162 () Int)
(declare-fun e_164 () Int)
(declare-fun e_166 () Int)
(declare-fun e_168 () Int)
(declare-fun e_172 () Int)
(declare-fun e_173 () Int)
(declare-fun i_171 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_135 (store a1 i4 e_134)))
(assert (= a_137 (store a_135 i2 e_136)))
(assert (= a_139 (store a_137 i0 e_138)))
(assert (= a_141 (store a_139 i3 e_140)))
(assert (= a_143 (store a_141 i2 e_142)))
(assert (= a_145 (store a_143 i1 e_144)))
(assert (= a_147 (store a_145 i4 e_146)))
(assert (= a_149 (store a_147 i3 e_148)))
(assert (= a_151 (store a_149 i3 e_150)))
(assert (= a_153 (store a_151 i2 e_152)))
(assert (= a_154 (store a1 i2 e_136)))
(assert (= a_155 (store a_154 i4 e_134)))
(assert (= a_157 (store a_155 i0 e_156)))
(assert (= a_159 (store a_157 i3 e_158)))
(assert (= a_161 (store a_159 i1 e_160)))
(assert (= a_163 (store a_161 i2 e_162)))
(assert (= a_165 (store a_163 i3 e_164)))
(assert (= a_167 (store a_165 i4 e_166)))
(assert (= a_169 (store a_167 i3 e_168)))
(assert (= a_170 (store a_169 i3 e_168)))
(assert (= e_134 (select a1 i2)))
(assert (= e_136 (select a1 i4)))
(assert (= e_138 (select a_137 i3)))
(assert (= e_140 (select a_137 i0)))
(assert (= e_142 (select a_141 i1)))
(assert (= e_144 (select a_141 i2)))
(assert (= e_146 (select a_145 i3)))
(assert (= e_148 (select a_145 i4)))
(assert (= e_150 (select a_149 i2)))
(assert (= e_152 (select a_149 i3)))
(assert (= e_156 (select a_155 i3)))
(assert (= e_158 (select a_155 i0)))
(assert (= e_160 (select a_159 i2)))
(assert (= e_162 (select a_159 i1)))
(assert (= e_164 (select a_163 i4)))
(assert (= e_166 (select a_163 i3)))
(assert (= e_168 (select a_167 i3)))
(assert (= e_172 (select a_153 i_171)))
(assert (= e_173 (select a_170 i_171)))
(assert (= i_171 (sk a_153 a_170)))
(assert (not (= e_172 e_173)))
(check-sat)
(exit)
