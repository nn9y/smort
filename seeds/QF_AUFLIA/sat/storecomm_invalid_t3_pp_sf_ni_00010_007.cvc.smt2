(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_100 () (Array Int Int))
(declare-fun a_101 () (Array Int Int))
(declare-fun a_102 () (Array Int Int))
(declare-fun a_103 () (Array Int Int))
(declare-fun a_104 () (Array Int Int))
(declare-fun a_105 () (Array Int Int))
(declare-fun a_106 () (Array Int Int))
(declare-fun a_107 () (Array Int Int))
(declare-fun a_108 () (Array Int Int))
(declare-fun a_109 () (Array Int Int))
(declare-fun a_110 () (Array Int Int))
(declare-fun a_111 () (Array Int Int))
(declare-fun a_92 () (Array Int Int))
(declare-fun a_93 () (Array Int Int))
(declare-fun a_94 () (Array Int Int))
(declare-fun a_95 () (Array Int Int))
(declare-fun a_96 () (Array Int Int))
(declare-fun a_97 () (Array Int Int))
(declare-fun a_98 () (Array Int Int))
(declare-fun a_99 () (Array Int Int))
(declare-fun e_113 () Int)
(declare-fun e_114 () Int)
(declare-fun i_112 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_100 (store a_99 9 e9)))
(assert (= a_101 (store a_100 1 e1)))
(assert (= a_102 (store a1 9 e9)))
(assert (= a_103 (store a_102 6 e6)))
(assert (= a_104 (store a_103 7 e7)))
(assert (= a_105 (store a_104 8 e8)))
(assert (= a_106 (store a_105 2 e2)))
(assert (= a_107 (store a_106 5 e5)))
(assert (= a_108 (store a_107 3 e3)))
(assert (= a_109 (store a_108 10 e10)))
(assert (= a_110 (store a_109 4 e4)))
(assert (= a_111 (store a_110 1 e1)))
(assert (= a_92 (store a1 1 e1)))
(assert (= a_93 (store a_92 2 e2)))
(assert (= a_94 (store a_93 3 e3)))
(assert (= a_95 (store a_94 4 e4)))
(assert (= a_96 (store a_95 5 e5)))
(assert (= a_97 (store a_96 6 e6)))
(assert (= a_98 (store a_97 7 e7)))
(assert (= a_99 (store a_98 8 e8)))
(assert (= e_113 (select a_101 i_112)))
(assert (= e_114 (select a_111 i_112)))
(assert (= i_112 (sk a_101 a_111)))
(assert (not (= e_113 e_114)))
(check-sat)
(exit)
