(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_116 () (Array Int Int))
(declare-fun a_118 () (Array Int Int))
(declare-fun a_120 () (Array Int Int))
(declare-fun a_122 () (Array Int Int))
(declare-fun a_124 () (Array Int Int))
(declare-fun a_126 () (Array Int Int))
(declare-fun a_128 () (Array Int Int))
(declare-fun a_130 () (Array Int Int))
(declare-fun a_131 () (Array Int Int))
(declare-fun a_132 () (Array Int Int))
(declare-fun a_134 () (Array Int Int))
(declare-fun a_135 () (Array Int Int))
(declare-fun e_115 () Int)
(declare-fun e_117 () Int)
(declare-fun e_119 () Int)
(declare-fun e_121 () Int)
(declare-fun e_123 () Int)
(declare-fun e_125 () Int)
(declare-fun e_127 () Int)
(declare-fun e_129 () Int)
(declare-fun e_133 () Int)
(declare-fun e_137 () Int)
(declare-fun e_138 () Int)
(declare-fun i_136 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_116 (store a1 i2 e_115)))
(assert (= a_118 (store a_116 i1 e_117)))
(assert (= a_120 (store a_118 i2 e_119)))
(assert (= a_122 (store a_120 i3 e_121)))
(assert (= a_124 (store a_122 i1 e_123)))
(assert (= a_126 (store a_124 i2 e_125)))
(assert (= a_128 (store a_126 i3 e_127)))
(assert (= a_130 (store a_128 i2 e_129)))
(assert (= a_131 (store a_122 i2 e_125)))
(assert (= a_132 (store a_131 i1 e_123)))
(assert (= a_134 (store a_132 i3 e_133)))
(assert (= a_135 (store a_134 i3 e_133)))
(assert (= e_115 (select a1 i1)))
(assert (= e_117 (select a1 i2)))
(assert (= e_119 (select a_118 i3)))
(assert (= e_121 (select a_118 i2)))
(assert (= e_123 (select a_122 i2)))
(assert (= e_125 (select a_122 i1)))
(assert (= e_127 (select a_126 i2)))
(assert (= e_129 (select a_126 i3)))
(assert (= e_133 (select a_132 i3)))
(assert (= e_137 (select a_130 i_136)))
(assert (= e_138 (select a_135 i_136)))
(assert (= i_136 (sk a_130 a_135)))
(assert (not (= e_137 e_138)))
(check-sat)
(exit)
