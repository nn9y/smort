(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_254 () (Array Int Int))
(declare-fun a_256 () (Array Int Int))
(declare-fun a_258 () (Array Int Int))
(declare-fun a_259 () (Array Int Int))
(declare-fun a_261 () (Array Int Int))
(declare-fun a_263 () (Array Int Int))
(declare-fun a_264 () (Array Int Int))
(declare-fun a_265 () (Array Int Int))
(declare-fun e_253 () Int)
(declare-fun e_255 () Int)
(declare-fun e_257 () Int)
(declare-fun e_260 () Int)
(declare-fun e_262 () Int)
(declare-fun e_267 () Int)
(declare-fun e_268 () Int)
(declare-fun i_266 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_254 (store a1 i1 e_253)))
(assert (= a_256 (store a_254 i2 e_255)))
(assert (= a_258 (store a_256 i0 e_257)))
(assert (= a_259 (store a_258 i0 e_257)))
(assert (= a_261 (store a_259 i0 e_260)))
(assert (= a_263 (store a_261 i1 e_262)))
(assert (= a_264 (store a_259 i1 e_260)))
(assert (= a_265 (store a_264 i1 e_260)))
(assert (= e_253 (select a1 i2)))
(assert (= e_255 (select a1 i1)))
(assert (= e_257 (select a_256 i0)))
(assert (= e_260 (select a_259 i1)))
(assert (= e_262 (select a_259 i0)))
(assert (= e_267 (select a_263 i_266)))
(assert (= e_268 (select a_265 i_266)))
(assert (= i_266 (sk a_263 a_265)))
(assert (not (= e_267 e_268)))
(check-sat)
(exit)
