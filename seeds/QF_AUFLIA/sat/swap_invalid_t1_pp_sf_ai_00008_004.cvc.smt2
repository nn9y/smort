(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_601 () (Array Int Int))
(declare-fun a_603 () (Array Int Int))
(declare-fun a_605 () (Array Int Int))
(declare-fun a_607 () (Array Int Int))
(declare-fun a_609 () (Array Int Int))
(declare-fun a_611 () (Array Int Int))
(declare-fun a_613 () (Array Int Int))
(declare-fun a_615 () (Array Int Int))
(declare-fun a_617 () (Array Int Int))
(declare-fun a_619 () (Array Int Int))
(declare-fun a_621 () (Array Int Int))
(declare-fun a_623 () (Array Int Int))
(declare-fun a_625 () (Array Int Int))
(declare-fun a_627 () (Array Int Int))
(declare-fun a_629 () (Array Int Int))
(declare-fun a_631 () (Array Int Int))
(declare-fun a_632 () (Array Int Int))
(declare-fun a_633 () (Array Int Int))
(declare-fun a_635 () (Array Int Int))
(declare-fun a_637 () (Array Int Int))
(declare-fun a_639 () (Array Int Int))
(declare-fun a_641 () (Array Int Int))
(declare-fun a_643 () (Array Int Int))
(declare-fun a_645 () (Array Int Int))
(declare-fun e_600 () Int)
(declare-fun e_602 () Int)
(declare-fun e_604 () Int)
(declare-fun e_606 () Int)
(declare-fun e_608 () Int)
(declare-fun e_610 () Int)
(declare-fun e_612 () Int)
(declare-fun e_614 () Int)
(declare-fun e_616 () Int)
(declare-fun e_618 () Int)
(declare-fun e_620 () Int)
(declare-fun e_622 () Int)
(declare-fun e_624 () Int)
(declare-fun e_626 () Int)
(declare-fun e_628 () Int)
(declare-fun e_630 () Int)
(declare-fun e_634 () Int)
(declare-fun e_636 () Int)
(declare-fun e_638 () Int)
(declare-fun e_640 () Int)
(declare-fun e_642 () Int)
(declare-fun e_644 () Int)
(declare-fun e_647 () Int)
(declare-fun e_648 () Int)
(declare-fun i_646 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_601 (store a1 i4 e_600)))
(assert (= a_603 (store a_601 i3 e_602)))
(assert (= a_605 (store a_603 i6 e_604)))
(assert (= a_607 (store a_605 i7 e_606)))
(assert (= a_609 (store a_607 i2 e_608)))
(assert (= a_611 (store a_609 i4 e_610)))
(assert (= a_613 (store a_611 i2 e_612)))
(assert (= a_615 (store a_613 i3 e_614)))
(assert (= a_617 (store a_615 i2 e_616)))
(assert (= a_619 (store a_617 i5 e_618)))
(assert (= a_621 (store a_619 i5 e_620)))
(assert (= a_623 (store a_621 i1 e_622)))
(assert (= a_625 (store a_623 i3 e_624)))
(assert (= a_627 (store a_625 i7 e_626)))
(assert (= a_629 (store a_627 i5 e_628)))
(assert (= a_631 (store a_629 i1 e_630)))
(assert (= a_632 (store a_615 i5 e_618)))
(assert (= a_633 (store a_632 i2 e_616)))
(assert (= a_635 (store a_633 i1 e_634)))
(assert (= a_637 (store a_635 i5 e_636)))
(assert (= a_639 (store a_637 i3 e_638)))
(assert (= a_641 (store a_639 i7 e_640)))
(assert (= a_643 (store a_641 i6 e_642)))
(assert (= a_645 (store a_643 i1 e_644)))
(assert (= e_600 (select a1 i3)))
(assert (= e_602 (select a1 i4)))
(assert (= e_604 (select a_603 i7)))
(assert (= e_606 (select a_603 i6)))
(assert (= e_608 (select a_607 i4)))
(assert (= e_610 (select a_607 i2)))
(assert (= e_612 (select a_611 i3)))
(assert (= e_614 (select a_611 i2)))
(assert (= e_616 (select a_615 i5)))
(assert (= e_618 (select a_615 i2)))
(assert (= e_620 (select a_619 i1)))
(assert (= e_622 (select a_619 i5)))
(assert (= e_624 (select a_623 i7)))
(assert (= e_626 (select a_623 i3)))
(assert (= e_628 (select a_627 i1)))
(assert (= e_630 (select a_627 i5)))
(assert (= e_634 (select a_633 i5)))
(assert (= e_636 (select a_633 i1)))
(assert (= e_638 (select a_637 i7)))
(assert (= e_640 (select a_637 i3)))
(assert (= e_642 (select a_641 i1)))
(assert (= e_644 (select a_641 i6)))
(assert (= e_647 (select a_631 i_646)))
(assert (= e_648 (select a_645 i_646)))
(assert (= i_646 (sk a_631 a_645)))
(assert (not (= e_647 e_648)))
(check-sat)
(exit)
