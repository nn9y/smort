(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_0 () (Array Int Int))
(declare-fun a_1 () (Array Int Int))
(declare-fun a_10 () (Array Int Int))
(declare-fun a_11 () (Array Int Int))
(declare-fun a_12 () (Array Int Int))
(declare-fun a_13 () (Array Int Int))
(declare-fun a_14 () (Array Int Int))
(declare-fun a_15 () (Array Int Int))
(declare-fun a_16 () (Array Int Int))
(declare-fun a_17 () (Array Int Int))
(declare-fun a_18 () (Array Int Int))
(declare-fun a_19 () (Array Int Int))
(declare-fun a_2 () (Array Int Int))
(declare-fun a_3 () (Array Int Int))
(declare-fun a_4 () (Array Int Int))
(declare-fun a_5 () (Array Int Int))
(declare-fun a_6 () (Array Int Int))
(declare-fun a_7 () (Array Int Int))
(declare-fun a_8 () (Array Int Int))
(declare-fun a_9 () (Array Int Int))
(declare-fun e_21 () Int)
(declare-fun e_22 () Int)
(declare-fun i_20 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun e1 () Int)
(declare-fun e10 () Int)
(declare-fun e2 () Int)
(declare-fun e3 () Int)
(declare-fun e4 () Int)
(declare-fun e5 () Int)
(declare-fun e6 () Int)
(declare-fun e7 () Int)
(declare-fun e8 () Int)
(declare-fun e9 () Int)
(declare-fun i1 () Int)
(declare-fun i10 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun i8 () Int)
(declare-fun i9 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_0 (store a1 i1 e1)))
(assert (= a_1 (store a_0 i2 e2)))
(assert (= a_10 (store a1 i9 e9)))
(assert (= a_11 (store a_10 i6 e6)))
(assert (= a_12 (store a_11 i4 e4)))
(assert (= a_13 (store a_12 i5 e5)))
(assert (= a_14 (store a_13 i3 e3)))
(assert (= a_15 (store a_14 i2 e2)))
(assert (= a_16 (store a_15 i10 e10)))
(assert (= a_17 (store a_16 i7 e7)))
(assert (= a_18 (store a_17 i8 e8)))
(assert (= a_19 (store a_18 i1 e1)))
(assert (= a_2 (store a_1 i3 e3)))
(assert (= a_3 (store a_2 i4 e4)))
(assert (= a_4 (store a_3 i5 e5)))
(assert (= a_5 (store a_4 i6 e6)))
(assert (= a_6 (store a_5 i7 e7)))
(assert (= a_7 (store a_6 i8 e8)))
(assert (= a_8 (store a_7 i9 e9)))
(assert (= a_9 (store a_8 i1 e1)))
(assert (= e_21 (select a_9 i_20)))
(assert (= e_22 (select a_19 i_20)))
(assert (= i_20 (sk a_9 a_19)))
(assert (not (= i9 i10)))
(assert (not (= i8 i10)))
(assert (not (= i8 i9)))
(assert (not (= i7 i10)))
(assert (not (= i7 i9)))
(assert (not (= i7 i8)))
(assert (not (= i6 i10)))
(assert (not (= i6 i9)))
(assert (not (= i6 i8)))
(assert (not (= i6 i7)))
(assert (not (= i5 i10)))
(assert (not (= i5 i9)))
(assert (not (= i5 i8)))
(assert (not (= i5 i7)))
(assert (not (= i5 i6)))
(assert (not (= i4 i10)))
(assert (not (= i4 i9)))
(assert (not (= i4 i8)))
(assert (not (= i4 i7)))
(assert (not (= i4 i6)))
(assert (not (= i4 i5)))
(assert (not (= i3 i10)))
(assert (not (= i3 i9)))
(assert (not (= i3 i8)))
(assert (not (= i3 i7)))
(assert (not (= i3 i6)))
(assert (not (= i3 i5)))
(assert (not (= i3 i4)))
(assert (not (= i2 i10)))
(assert (not (= i2 i9)))
(assert (not (= i2 i8)))
(assert (not (= i2 i7)))
(assert (not (= i2 i6)))
(assert (not (= i2 i5)))
(assert (not (= i2 i4)))
(assert (not (= i2 i3)))
(assert (not (= i1 i10)))
(assert (not (= i1 i9)))
(assert (not (= i1 i8)))
(assert (not (= i1 i7)))
(assert (not (= i1 i6)))
(assert (not (= i1 i5)))
(assert (not (= i1 i4)))
(assert (not (= i1 i3)))
(assert (not (= i1 i2)))
(assert (not (= e_21 e_22)))
(check-sat)
(exit)
