(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_1 () (Array Int Int))
(declare-fun a_11 () (Array Int Int))
(declare-fun a_13 () (Array Int Int))
(declare-fun a_15 () (Array Int Int))
(declare-fun a_17 () (Array Int Int))
(declare-fun a_18 () (Array Int Int))
(declare-fun a_19 () (Array Int Int))
(declare-fun a_20 () (Array Int Int))
(declare-fun a_22 () (Array Int Int))
(declare-fun a_24 () (Array Int Int))
(declare-fun a_26 () (Array Int Int))
(declare-fun a_28 () (Array Int Int))
(declare-fun a_3 () (Array Int Int))
(declare-fun a_30 () (Array Int Int))
(declare-fun a_32 () (Array Int Int))
(declare-fun a_34 () (Array Int Int))
(declare-fun a_36 () (Array Int Int))
(declare-fun a_5 () (Array Int Int))
(declare-fun a_7 () (Array Int Int))
(declare-fun a_9 () (Array Int Int))
(declare-fun e_0 () Int)
(declare-fun e_10 () Int)
(declare-fun e_12 () Int)
(declare-fun e_14 () Int)
(declare-fun e_16 () Int)
(declare-fun e_2 () Int)
(declare-fun e_21 () Int)
(declare-fun e_23 () Int)
(declare-fun e_25 () Int)
(declare-fun e_27 () Int)
(declare-fun e_29 () Int)
(declare-fun e_31 () Int)
(declare-fun e_33 () Int)
(declare-fun e_35 () Int)
(declare-fun e_38 () Int)
(declare-fun e_39 () Int)
(declare-fun e_4 () Int)
(declare-fun e_6 () Int)
(declare-fun e_8 () Int)
(declare-fun i_37 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_1 (store a1 i4 e_0)))
(assert (= a_11 (store a_9 i2 e_10)))
(assert (= a_13 (store a_11 i1 e_12)))
(assert (= a_15 (store a_13 i3 e_14)))
(assert (= a_17 (store a_15 i0 e_16)))
(assert (= a_18 (store a_17 i0 e_16)))
(assert (= a_19 (store a1 i2 e_2)))
(assert (= a_20 (store a_19 i4 e_0)))
(assert (= a_22 (store a_20 i3 e_21)))
(assert (= a_24 (store a_22 i1 e_23)))
(assert (= a_26 (store a_24 i3 e_25)))
(assert (= a_28 (store a_26 i2 e_27)))
(assert (= a_3 (store a_1 i2 e_2)))
(assert (= a_30 (store a_28 i3 e_29)))
(assert (= a_32 (store a_30 i1 e_31)))
(assert (= a_34 (store a_32 i0 e_33)))
(assert (= a_36 (store a_34 i1 e_35)))
(assert (= a_5 (store a_3 i1 e_4)))
(assert (= a_7 (store a_5 i3 e_6)))
(assert (= a_9 (store a_7 i3 e_8)))
(assert (= e_0 (select a1 i2)))
(assert (= e_10 (select a_7 i3)))
(assert (= e_12 (select a_11 i3)))
(assert (= e_14 (select a_11 i1)))
(assert (= e_16 (select a_15 i0)))
(assert (= e_2 (select a1 i4)))
(assert (= e_21 (select a_20 i1)))
(assert (= e_23 (select a_20 i3)))
(assert (= e_25 (select a_24 i2)))
(assert (= e_27 (select a_24 i3)))
(assert (= e_29 (select a_28 i1)))
(assert (= e_31 (select a_28 i3)))
(assert (= e_33 (select a_32 i1)))
(assert (= e_35 (select a_32 i0)))
(assert (= e_38 (select a_18 i_37)))
(assert (= e_39 (select a_36 i_37)))
(assert (= e_4 (select a_3 i3)))
(assert (= e_6 (select a_3 i1)))
(assert (= e_8 (select a_7 i2)))
(assert (= i_37 (sk a_18 a_36)))
(assert (not (= e_38 e_39)))
(check-sat)
(exit)
