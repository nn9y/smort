(set-info :smt-lib-version 2.6)
(set-logic QF_AUFLIA)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun a_348 () (Array Int Int))
(declare-fun a_350 () (Array Int Int))
(declare-fun a_352 () (Array Int Int))
(declare-fun a_353 () (Array Int Int))
(declare-fun a_355 () (Array Int Int))
(declare-fun a_357 () (Array Int Int))
(declare-fun a_359 () (Array Int Int))
(declare-fun a_361 () (Array Int Int))
(declare-fun a_363 () (Array Int Int))
(declare-fun a_365 () (Array Int Int))
(declare-fun a_366 () (Array Int Int))
(declare-fun a_367 () (Array Int Int))
(declare-fun a_369 () (Array Int Int))
(declare-fun a_370 () (Array Int Int))
(declare-fun a_372 () (Array Int Int))
(declare-fun a_374 () (Array Int Int))
(declare-fun a_376 () (Array Int Int))
(declare-fun a_378 () (Array Int Int))
(declare-fun a_380 () (Array Int Int))
(declare-fun a_381 () (Array Int Int))
(declare-fun e_347 () Int)
(declare-fun e_349 () Int)
(declare-fun e_351 () Int)
(declare-fun e_354 () Int)
(declare-fun e_356 () Int)
(declare-fun e_358 () Int)
(declare-fun e_360 () Int)
(declare-fun e_362 () Int)
(declare-fun e_364 () Int)
(declare-fun e_368 () Int)
(declare-fun e_371 () Int)
(declare-fun e_373 () Int)
(declare-fun e_375 () Int)
(declare-fun e_377 () Int)
(declare-fun e_379 () Int)
(declare-fun e_383 () Int)
(declare-fun e_384 () Int)
(declare-fun i_382 () Int)
(declare-fun a1 () (Array Int Int))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun sk ((Array Int Int) (Array Int Int)) Int)
(assert (= a_348 (store a1 i3 e_347)))
(assert (= a_350 (store a_348 i4 e_349)))
(assert (= a_352 (store a_350 i3 e_351)))
(assert (= a_353 (store a_352 i3 e_351)))
(assert (= a_355 (store a_353 i1 e_354)))
(assert (= a_357 (store a_355 i2 e_356)))
(assert (= a_359 (store a_357 i1 e_358)))
(assert (= a_361 (store a_359 i2 e_360)))
(assert (= a_363 (store a_361 i4 e_362)))
(assert (= a_365 (store a_363 i0 e_364)))
(assert (= a_366 (store a1 i4 e_349)))
(assert (= a_367 (store a_366 i3 e_347)))
(assert (= a_369 (store a_367 i3 e_368)))
(assert (= a_370 (store a_369 i3 e_368)))
(assert (= a_372 (store a_370 i2 e_371)))
(assert (= a_374 (store a_372 i1 e_373)))
(assert (= a_376 (store a_374 i2 e_375)))
(assert (= a_378 (store a_376 i1 e_377)))
(assert (= a_380 (store a_378 i0 e_379)))
(assert (= a_381 (store a_380 i0 e_379)))
(assert (= e_347 (select a1 i4)))
(assert (= e_349 (select a1 i3)))
(assert (= e_351 (select a_350 i3)))
(assert (= e_354 (select a_353 i2)))
(assert (= e_356 (select a_353 i1)))
(assert (= e_358 (select a_357 i2)))
(assert (= e_360 (select a_357 i1)))
(assert (= e_362 (select a_361 i0)))
(assert (= e_364 (select a_361 i4)))
(assert (= e_368 (select a_367 i3)))
(assert (= e_371 (select a_370 i1)))
(assert (= e_373 (select a_370 i2)))
(assert (= e_375 (select a_374 i1)))
(assert (= e_377 (select a_374 i2)))
(assert (= e_379 (select a_378 i0)))
(assert (= e_383 (select a_365 i_382)))
(assert (= e_384 (select a_381 i_382)))
(assert (= i_382 (sk a_365 a_381)))
(assert (not (= e_383 e_384)))
(check-sat)
(exit)
