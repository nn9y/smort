(set-info :smt-lib-version 2.6)
(set-logic AUFNIRA)
(set-info :source |Benchmarks from the paper: "Extending Sledgehammer with SMT Solvers" by Jasmin Blanchette, Sascha Bohme, and Lawrence C. Paulson, CADE 2011.  Translated to SMT2 by Andrew Reynolds and Morgan Deters.|)
(set-info :category "industrial")
(set-info :status unknown)
(declare-sort S1 0)
(declare-sort S2 0)
(declare-sort S3 0)
(declare-sort S4 0)
(declare-sort S5 0)
(declare-sort S6 0)
(declare-sort S7 0)
(declare-sort S8 0)
(declare-sort S9 0)
(declare-sort S10 0)
(declare-sort S11 0)
(declare-sort S12 0)
(declare-sort S13 0)
(declare-fun f1 () S1)
(declare-fun f2 () S1)
(declare-fun f3 (S2 S3) S4)
(declare-fun f4 () S2)
(declare-fun f5 () S3)
(declare-fun f6 () S4)
(declare-fun f7 (S5 Int) Int)
(declare-fun f8 () S5)
(declare-fun f9 (S6 Real) Real)
(declare-fun f10 () S6)
(declare-fun f11 (S7 Real) S4)
(declare-fun f12 (S8 Real) S7)
(declare-fun f13 () S8)
(declare-fun f14 () S4)
(declare-fun f15 () S7)
(declare-fun f16 () Real)
(declare-fun f17 (S9 S3) Real)
(declare-fun f18 () S9)
(declare-fun f19 (S4 S10) S1)
(declare-fun f20 () S10)
(declare-fun f21 (Int S11) S1)
(declare-fun f22 () S11)
(declare-fun f23 (Real S12) S1)
(declare-fun f24 () S12)
(declare-fun f25 (S4) S1)
(declare-fun f26 (Int) S1)
(declare-fun f27 (Real) S1)
(declare-fun f28 (S13 S4) S4)
(declare-fun f29 () S13)
(assert (not (= f1 f2)))
(assert (not (not (= (f3 f4 f5) f6))))
(assert (= (f7 f8 0) 0))
(assert (let ((?v_0 0.0)) (= (f9 f10 ?v_0) ?v_0)))
(assert (forall ((?v0 S4)) (= (= f6 ?v0) (= ?v0 f6))))
(assert (forall ((?v0 Int)) (= (= 0 ?v0) (= ?v0 0))))
(assert (forall ((?v0 Real)) (let ((?v_0 0.0)) (= (= ?v_0 ?v0) (= ?v0 ?v_0)))))
(assert (forall ((?v0 Int)) (= (= (f7 f8 ?v0) 0) (= ?v0 0))))
(assert (forall ((?v0 Real)) (let ((?v_0 0.0)) (= (= (f9 f10 ?v0) ?v_0) (= ?v0 ?v_0)))))
(assert (forall ((?v0 Real)) (= (f11 (f12 f13 0.0) ?v0) f6)))
(assert (not (= f14 f6)))
(assert (forall ((?v0 S3)) (= (f3 f4 ?v0) (f11 f15 (/ (* 2.0 f16) (f17 f18 ?v0))))))
(assert (= (f19 f6 f20) f1))
(assert (= (f21 0 f22) f1))
(assert (= (f23 0.0 f24) f1))
(assert (= (f25 f6) f1))
(assert (= (f26 0) f1))
(assert (= (f27 0.0) f1))
(assert (forall ((?v0 S4)) (= (= (f25 ?v0) f1) (= ?v0 f6))))
(assert (forall ((?v0 Int)) (= (= (f26 ?v0) f1) (= ?v0 0))))
(assert (forall ((?v0 Real)) (= (= (f27 ?v0) f1) (= ?v0 0.0))))
(assert (= (f28 f29 f6) f6))
(assert (forall ((?v0 S4)) (= (= (f28 f29 ?v0) f6) (= ?v0 f6))))
(assert (forall ((?v0 Real)) (= (f11 f15 ?v0) (f11 (f12 f13 1.0) ?v0))))
(assert (forall ((?v0 S4)) (= (f28 f29 (f28 f29 ?v0)) ?v0)))
(assert (forall ((?v0 S4) (?v1 S4)) (= (= (f28 f29 ?v0) (f28 f29 ?v1)) (= ?v0 ?v1))))
(assert (forall ((?v0 S3)) (<= 0.0 (f17 f18 ?v0))))
(check-sat)
(exit)
