(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |

   The benchmark encodes 2 simple processors
   receiving instructions to decode and execute.
   The processors compute the same function on 4 operands but
   their decoding units differ in the way they
   communicate the result.
   We check that, modulo reinterpretation of the
   decoded instructions, the result is the same.
   We added a "mode" flag to force the decoding
   unit to return the result in two different ways.

   The encoded design is a modification of Example 11.2, at page 20 of
   "Introduction to Verilog", by Peter M. Nyasulu
   available online.

   Generated by Roberto Bruttomesso <roberto.bruttomesso@gmail.com>

|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun opcode () (_ BitVec 8))
(declare-fun operator1 () (_ BitVec 32))
(declare-fun opr1_1 () (_ BitVec 32))
(declare-fun op1_1 () (_ BitVec 32))
(declare-fun opr1_2 () (_ BitVec 32))
(declare-fun op1_2 () (_ BitVec 32))
(declare-fun operator2 () (_ BitVec 32))
(declare-fun opr2_1 () (_ BitVec 32))
(declare-fun op2_1 () (_ BitVec 32))
(declare-fun opr2_2 () (_ BitVec 32))
(declare-fun op2_2 () (_ BitVec 32))
(declare-fun operator3 () (_ BitVec 32))
(declare-fun opr3_1 () (_ BitVec 32))
(declare-fun op3_1 () (_ BitVec 32))
(declare-fun opr3_2 () (_ BitVec 32))
(declare-fun op3_2 () (_ BitVec 32))
(declare-fun operator4 () (_ BitVec 32))
(declare-fun opr4_1 () (_ BitVec 32))
(declare-fun op4_1 () (_ BitVec 32))
(declare-fun opr4_2 () (_ BitVec 32))
(declare-fun op4_2 () (_ BitVec 32))
(declare-fun decode_1 () (_ BitVec 129))
(declare-fun dec_func_1 () (_ BitVec 1))
(declare-fun deci_func_1 () (_ BitVec 1))
(declare-fun func_1 () (_ BitVec 1))
(declare-fun out_1 () (_ BitVec 32))
(declare-fun mode_1 () (_ BitVec 1))
(declare-fun decode_2 () (_ BitVec 129))
(declare-fun dec_func_2 () (_ BitVec 1))
(declare-fun deci_func_2 () (_ BitVec 1))
(declare-fun func_2 () (_ BitVec 1))
(declare-fun out_2 () (_ BitVec 32))
(declare-fun mode_2 () (_ BitVec 1))
(assert (let ((?v_8 (= opr1_1 operator1)) (?v_9 (= opcode (_ bv136 8))) (?v_3 (= dec_func_1 (_ bv1 1))) (?v_0 (= opr2_1 operator2)) (?v_1 (= opr3_1 operator3)) (?v_2 (= opr4_1 operator4)) (?v_10 (= opcode (_ bv137 8))) (?v_4 (= dec_func_1 (_ bv0 1))) (?v_11 (= opcode (_ bv138 8))) (?v_5 (= opr2_1 (_ bv1 32))) (?v_6 (= opr3_1 (_ bv1 32))) (?v_7 (= opr4_1 (_ bv1 32))) (?v_12 (= deci_func_1 (_ bv1 1))) (?v_13 (= deci_func_1 (_ bv0 1))) (?v_14 (= mode_1 (_ bv0 1))) (?v_15 (= func_1 ((_ extract 128 128) decode_1))) (?v_16 ((_ extract 127 96) decode_1)) (?v_17 ((_ extract 95 64) decode_1)) (?v_18 ((_ extract 63 32) decode_1)) (?v_19 ((_ extract 31 0) decode_1)) (?v_28 (= opr1_2 operator1)) (?v_23 (= dec_func_2 (_ bv1 1))) (?v_20 (= opr2_2 operator2)) (?v_21 (= opr3_2 operator3)) (?v_22 (= opr4_2 operator4)) (?v_24 (= dec_func_2 (_ bv0 1))) (?v_25 (= opr2_2 (_ bv1 32))) (?v_26 (= opr3_2 (_ bv1 32))) (?v_27 (= opr4_2 (_ bv1 32))) (?v_29 (= deci_func_2 (_ bv1 1))) (?v_30 (= deci_func_2 (_ bv0 1))) (?v_31 (= mode_2 (_ bv0 1))) (?v_32 ((_ extract 128 97) decode_2)) (?v_33 (= func_2 ((_ extract 96 96) decode_2))) (?v_34 ((_ extract 95 64) decode_2)) (?v_35 ((_ extract 63 32) decode_2)) (?v_36 ((_ extract 31 0) decode_2))) (and ?v_8 (ite ?v_9 (and ?v_3 ?v_0 ?v_1 ?v_2) (ite ?v_10 (and ?v_4 ?v_0 ?v_1 ?v_2) (ite ?v_11 (and ?v_3 ?v_5 ?v_6 ?v_7) (and ?v_4 ?v_5 ?v_6 ?v_7)))) ?v_8 (ite ?v_9 (and ?v_12 ?v_0 ?v_1 ?v_2) (ite ?v_10 (and ?v_13 ?v_0 ?v_1 ?v_2) (ite ?v_11 (and ?v_12 ?v_5 ?v_6 ?v_7) (and ?v_13 ?v_5 ?v_6 ?v_7)))) (ite ?v_14 (= decode_1 (concat (concat (concat (concat dec_func_1 opr1_1) opr2_1) opr3_1) opr4_1)) (= decode_1 (concat (concat (concat (concat deci_func_1 opr4_1) opr3_1) opr2_1) opr1_1))) (ite ?v_14 (and ?v_15 (= op1_1 ?v_16) (= op2_1 ?v_17) (= op3_1 ?v_18) (= op4_1 ?v_19)) (and ?v_15 (= op4_1 ?v_16) (= op3_1 ?v_17) (= op2_1 ?v_18) (= op1_1 ?v_19))) (ite (= func_1 (_ bv1 1)) (= out_1 (bvadd (bvadd (bvadd op1_1 op2_1) op3_1) op4_1)) (= out_1 (bvor (bvor (bvor op1_1 op2_1) op3_1) op4_1))) ?v_28 (ite ?v_9 (and ?v_23 ?v_20 ?v_21 ?v_22) (ite ?v_10 (and ?v_24 ?v_20 ?v_21 ?v_22) (ite ?v_11 (and ?v_23 ?v_25 ?v_26 ?v_27) (and ?v_24 ?v_25 ?v_26 ?v_27)))) ?v_28 (ite ?v_9 (and ?v_29 ?v_20 ?v_21 ?v_22) (ite ?v_10 (and ?v_30 ?v_20 ?v_21 ?v_22) (ite ?v_11 (and ?v_29 ?v_25 ?v_26 ?v_27) (and ?v_30 ?v_25 ?v_26 ?v_27)))) (ite ?v_31 (= decode_2 (concat (concat (concat (concat opr1_2 dec_func_2) opr2_2) opr3_2) opr4_2)) (= decode_2 (concat (concat (concat (concat opr4_2 deci_func_2) opr3_2) opr2_2) opr1_2))) (ite ?v_31 (and (= op1_2 ?v_32) ?v_33 (= op2_2 ?v_34) (= op3_2 ?v_35) (= op4_2 ?v_36)) (and (= op4_2 ?v_32) ?v_33 (= op3_2 ?v_34) (= op2_2 ?v_35) (= op1_2 ?v_36))) (ite (= func_2 (_ bv1 1)) (= out_2 (bvadd (bvadd (bvadd op1_2 op2_2) op3_2) op4_2)) (= out_2 (bvor (bvor (bvor op1_2 op2_2) op3_2) op4_2))) (= mode_1 mode_2) (not (= out_1 out_2)))))
(check-sat)
(exit)
