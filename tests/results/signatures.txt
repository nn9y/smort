NUMERAL: [(None  Int), (None  Real)]
-: [(- Int Int), (- Int Int Int), (- Real Real), (- Real Real Real)]
+: [(+ Int Int Int), (+ Real Real Real)]
*: [(* Int Int Int), (* Real Real Real)]
div: [(div Int Int Int)]
mod: [(mod Int Int Int)]
abs: [(abs Int Int)]
<=: [(<= Int Int Bool), (<= Real Real Bool)]
<: [(< Int Int Bool), (< Real Real Bool)]
>=: [(>= Int Int Bool), (>= Real Real Bool)]
>: [(> Int Int Bool), (> Real Real Bool)]
divisible: [(divisible Int Bool)]
B_VALUE: [(None  Bool)]
not: [(not Bool Bool)]
=>: [(=> Bool Bool Bool)]
and: [(and Bool Bool Bool)]
or: [(or Bool Bool Bool)]
xor: [(xor Bool Bool Bool)]
=: [(par (A) (= A A Bool))]
distinct: [(par (A) (distinct A A Bool))]
ite: [(par (A) (ite Bool A A A))]
DECIMAL: [(None  Real)]
/: [(/ Real Real Real)]
to_real: [(to_real Int Real)]
to_int: [(to_int Real Int)]
is_int: [(is_int Real Bool)]
BINARY: [(None  BitVec)]
HEXADECIMAL: [(None  BitVec)]
concat: [(concat BitVec BitVec BitVec)]
extract: [(extract BitVec BitVec)]
bvnot: [(bvnot BitVec BitVec)]
bvneg: [(bvneg BitVec BitVec)]
bvand: [(bvand BitVec BitVec BitVec)]
bvadd: [(bvadd BitVec BitVec BitVec)]
bvmul: [(bvmul BitVec BitVec BitVec)]
bvudiv: [(bvudiv BitVec BitVec BitVec)]
bvurem: [(bvurem BitVec BitVec BitVec)]
bvshl: [(bvshl BitVec BitVec BitVec)]
bvlshr: [(bvlshr BitVec BitVec BitVec)]
bvult: [(bvult BitVec BitVec Bool)]
roundNearestTiesToEven: [(roundNearestTiesToEven  RoundingMode)]
RNE: [(RNE  RoundingMode)]
roundNearestTiesToAway: [(roundNearestTiesToAway  RoundingMode)]
RNA: [(RNA  RoundingMode)]
roundTowardPositive: [(roundTowardPositive  RoundingMode)]
RTP: [(RTP  RoundingMode)]
roundTowardNegative: [(roundTowardNegative  RoundingMode)]
RTN: [(RTN  RoundingMode)]
roundTowardZero: [(roundTowardZero  RoundingMode)]
RTZ: [(RTZ  RoundingMode)]
fp: [(fp BitVec BitVec BitVec FloatingPoint)]
+oo: [(+oo  FloatingPoint)]
-oo: [(-oo  FloatingPoint)]
+zero: [(+zero  FloatingPoint)]
-zero: [(-zero  FloatingPoint)]
NaN: [(NaN  FloatingPoint)]
fp.abs: [(fp.abs FloatingPoint FloatingPoint)]
fp.neg: [(fp.neg FloatingPoint FloatingPoint)]
fp.add: [(fp.add RoundingMode FloatingPoint FloatingPoint FloatingPoint)]
fp.sub: [(fp.sub RoundingMode FloatingPoint FloatingPoint FloatingPoint)]
fp.mul: [(fp.mul RoundingMode FloatingPoint FloatingPoint FloatingPoint)]
fp.div: [(fp.div RoundingMode FloatingPoint FloatingPoint FloatingPoint)]
fp.fma: [(fp.fma RoundingMode FloatingPoint FloatingPoint FloatingPoint FloatingPoint)]
fp.sqrt: [(fp.sqrt RoundingMode FloatingPoint FloatingPoint)]
fp.rem: [(fp.rem FloatingPoint FloatingPoint FloatingPoint)]
fp.roundToIntegral: [(fp.roundToIntegral RoundingMode FloatingPoint FloatingPoint)]
fp.min: [(fp.min FloatingPoint FloatingPoint FloatingPoint)]
fp.max: [(fp.max FloatingPoint FloatingPoint FloatingPoint)]
fp.leq: [(fp.leq FloatingPoint FloatingPoint Bool)]
fp.lt: [(fp.lt FloatingPoint FloatingPoint Bool)]
fp.geq: [(fp.geq FloatingPoint FloatingPoint Bool)]
fp.gt: [(fp.gt FloatingPoint FloatingPoint Bool)]
fp.eq: [(fp.eq FloatingPoint FloatingPoint Bool)]
fp.isNormal: [(fp.isNormal FloatingPoint Bool)]
fp.isSubnormal: [(fp.isSubnormal FloatingPoint Bool)]
fp.isZero: [(fp.isZero FloatingPoint Bool)]
fp.isInfinite: [(fp.isInfinite FloatingPoint Bool)]
fp.isNaN: [(fp.isNaN FloatingPoint Bool)]
fp.isNegative: [(fp.isNegative FloatingPoint Bool)]
fp.isPositive: [(fp.isPositive FloatingPoint Bool)]
to_fp: [(to_fp BitVec FloatingPoint), (to_fp RoundingMode FloatingPoint FloatingPoint), (to_fp RoundingMode Real FloatingPoint), (to_fp RoundingMode BitVec FloatingPoint)]
to_fp_unsigned: [(to_fp_unsigned RoundingMode BitVec FloatingPoint)]
fp.to_ubv: [(fp.to_ubv RoundingMode FloatingPoint BitVec)]
fp.to_sbv: [(fp.to_sbv RoundingMode FloatingPoint BitVec)]
fp.to_real: [(fp.to_real FloatingPoint Real)]
char: [(char  String)]
STRING: [(None  String)]
str.++: [(str.++ String String String)]
str.len: [(str.len String Int)]
str.<: [(str.< String String Bool)]
str.to_re: [(str.to_re String RegLan)]
str.in_re: [(str.in_re String RegLan Bool)]
re.none: [(re.none  RegLan)]
re.all: [(re.all  RegLan)]
re.allchar: [(re.allchar  RegLan)]
re.++: [(re.++ RegLan RegLan RegLan)]
re.union: [(re.union RegLan RegLan RegLan)]
re.inter: [(re.inter RegLan RegLan RegLan)]
re.*: [(re.* RegLan RegLan)]
str.<=: [(str.<= String String Bool)]
str.at: [(str.at String Int String)]
str.substr: [(str.substr String Int Int String)]
str.prefixof: [(str.prefixof String String Bool)]
str.suffixof: [(str.suffixof String String Bool)]
str.contains: [(str.contains String String Bool)]
str.indexof: [(str.indexof String String Int Int)]
str.replace: [(str.replace String String String String)]
str.replace_all: [(str.replace_all String String String String)]
str.replace_re: [(str.replace_re String RegLan String String)]
str.replace_re_all: [(str.replace_re_all String RegLan String String)]
re.comp: [(re.comp RegLan RegLan)]
re.diff: [(re.diff RegLan RegLan RegLan)]
re.+: [(re.+ RegLan RegLan)]
re.opt: [(re.opt RegLan RegLan)]
re.range: [(re.range String String RegLan)]
re.^: [(re.^ RegLan RegLan)]
re.loop: [(re.loop RegLan RegLan)]
str.is_digit: [(str.is_digit String Bool)]
str.to_code: [(str.to_code String Int)]
str.from_code: [(str.from_code Int String)]
str.to_int: [(str.to_int String Int)]
str.from_int: [(str.from_int Int String)]
select: [(par (X Y) (select (Array X Y) X Y))]
store: [(par (X Y) (store (Array X Y) X Y (Array X Y)))]
