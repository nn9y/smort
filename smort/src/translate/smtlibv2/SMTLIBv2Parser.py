# Generated from SMTLIBv2.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,114,1098,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,3,0,201,8,0,1,1,1,1,1,2,1,2,3,2,207,8,2,1,3,1,3,1,4,1,4,1,
        5,1,5,3,5,215,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
        1,11,1,11,3,11,230,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,238,8,
        12,1,13,1,13,1,13,1,13,1,13,5,13,245,8,13,10,13,12,13,248,9,13,1,
        13,3,13,251,8,13,1,14,1,14,3,14,255,8,14,1,15,1,15,1,15,1,15,1,15,
        4,15,262,8,15,11,15,12,15,263,1,15,1,15,3,15,268,8,15,1,16,1,16,
        1,16,1,16,5,16,274,8,16,10,16,12,16,277,9,16,1,16,3,16,280,8,16,
        1,17,1,17,1,17,1,17,3,17,286,8,17,1,18,1,18,1,18,1,18,4,18,292,8,
        18,11,18,12,18,293,1,18,1,18,3,18,298,8,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,3,19,307,8,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,22,1,22,4,22,323,8,22,11,22,12,22,324,1,
        22,1,22,3,22,329,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,4,24,341,8,24,11,24,12,24,342,1,24,1,24,1,24,1,24,1,24,1,
        24,4,24,351,8,24,11,24,12,24,352,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,4,24,363,8,24,11,24,12,24,364,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,4,24,375,8,24,11,24,12,24,376,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,4,24,388,8,24,11,24,12,24,389,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,4,24,399,8,24,11,24,12,24,400,1,24,1,24,3,
        24,405,8,24,1,25,1,25,1,25,1,25,5,25,411,8,25,10,25,12,25,414,9,
        25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,5,27,424,8,27,10,27,12,
        27,427,9,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,435,8,27,10,27,12,
        27,438,9,27,1,27,1,27,1,27,1,27,1,27,4,27,445,8,27,11,27,12,27,446,
        1,27,5,27,450,8,27,10,27,12,27,453,9,27,1,27,1,27,3,27,457,8,27,
        1,28,1,28,1,28,1,28,1,28,4,28,464,8,28,11,28,12,28,465,1,28,1,28,
        1,28,1,28,4,28,472,8,28,11,28,12,28,473,1,28,5,28,477,8,28,10,28,
        12,28,480,9,28,1,28,1,28,1,28,3,28,485,8,28,1,29,1,29,1,29,4,29,
        490,8,29,11,29,12,29,491,1,29,1,29,1,29,1,29,1,29,4,29,499,8,29,
        11,29,12,29,500,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,3,29,516,8,29,1,30,1,30,1,30,1,30,4,30,522,8,30,11,
        30,12,30,523,1,30,1,30,1,31,1,31,1,31,4,31,531,8,31,11,31,12,31,
        532,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
        546,8,31,1,32,1,32,1,32,1,32,4,32,552,8,32,11,32,12,32,553,1,32,
        1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,5,35,571,8,35,10,35,12,35,574,9,35,1,35,1,35,1,36,1,36,4,36,
        580,8,36,11,36,12,36,581,1,36,1,36,1,36,1,36,1,36,1,36,4,36,590,
        8,36,11,36,12,36,591,1,36,1,36,1,36,4,36,597,8,36,11,36,12,36,598,
        1,36,1,36,1,36,3,36,604,8,36,1,37,1,37,1,37,1,37,5,37,610,8,37,10,
        37,12,37,613,9,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,5,38,622,8,
        38,10,38,12,38,625,9,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,39,3,39,637,8,39,1,40,5,40,640,8,40,10,40,12,40,643,9,40,
        1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,43,5,43,653,8,43,10,43,12,43,
        656,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,
        1,46,1,46,4,46,671,8,46,11,46,12,46,672,1,46,1,46,1,46,4,46,678,
        8,46,11,46,12,46,679,1,46,1,46,1,47,1,47,1,47,1,47,5,47,688,8,47,
        10,47,12,47,691,9,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,
        1,49,1,50,1,50,1,50,1,51,1,51,1,51,4,51,709,8,51,11,51,12,51,710,
        1,51,1,51,1,51,4,51,716,8,51,11,51,12,51,717,1,51,1,51,1,52,1,52,
        1,52,1,52,5,52,726,8,52,10,52,12,52,729,9,52,1,52,1,52,1,52,1,53,
        1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,
        1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,4,63,
        760,8,63,11,63,12,63,761,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,
        1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,3,71,905,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,938,
        8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,948,8,74,1,75,
        1,75,1,76,1,76,1,76,3,76,955,8,76,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,3,77,969,8,77,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,984,8,78,1,79,
        1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,82,1,82,
        1,83,1,83,5,83,1002,8,83,10,83,12,83,1005,9,83,1,83,1,83,1,84,1,
        84,5,84,1011,8,84,10,84,12,84,1014,9,84,1,84,1,84,1,85,1,85,4,85,
        1020,8,85,11,85,12,85,1021,1,85,1,85,1,86,1,86,1,86,5,86,1029,8,
        86,10,86,12,86,1032,9,86,1,86,1,86,1,86,5,86,1037,8,86,10,86,12,
        86,1040,9,86,1,86,3,86,1043,8,86,1,87,1,87,1,88,1,88,1,89,1,89,5,
        89,1051,8,89,10,89,12,89,1054,9,89,1,89,1,89,1,90,1,90,5,90,1060,
        8,90,10,90,12,90,1063,9,90,1,90,1,90,1,91,1,91,4,91,1069,8,91,11,
        91,12,91,1070,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,3,92,1086,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,3,93,1096,8,93,1,93,0,0,94,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,0,7,2,0,53,65,112,112,1,0,7,22,1,0,71,
        111,3,0,57,57,63,63,65,65,2,0,11,11,19,19,2,0,9,9,12,12,3,0,16,16,
        20,20,22,22,1170,0,200,1,0,0,0,2,202,1,0,0,0,4,206,1,0,0,0,6,208,
        1,0,0,0,8,210,1,0,0,0,10,214,1,0,0,0,12,216,1,0,0,0,14,218,1,0,0,
        0,16,220,1,0,0,0,18,222,1,0,0,0,20,224,1,0,0,0,22,229,1,0,0,0,24,
        237,1,0,0,0,26,250,1,0,0,0,28,254,1,0,0,0,30,267,1,0,0,0,32,279,
        1,0,0,0,34,285,1,0,0,0,36,297,1,0,0,0,38,306,1,0,0,0,40,308,1,0,
        0,0,42,313,1,0,0,0,44,328,1,0,0,0,46,330,1,0,0,0,48,404,1,0,0,0,
        50,406,1,0,0,0,52,417,1,0,0,0,54,456,1,0,0,0,56,484,1,0,0,0,58,515,
        1,0,0,0,60,517,1,0,0,0,62,545,1,0,0,0,64,547,1,0,0,0,66,557,1,0,
        0,0,68,562,1,0,0,0,70,567,1,0,0,0,72,603,1,0,0,0,74,605,1,0,0,0,
        76,618,1,0,0,0,78,636,1,0,0,0,80,641,1,0,0,0,82,644,1,0,0,0,84,647,
        1,0,0,0,86,649,1,0,0,0,88,659,1,0,0,0,90,663,1,0,0,0,92,667,1,0,
        0,0,94,683,1,0,0,0,96,695,1,0,0,0,98,699,1,0,0,0,100,702,1,0,0,0,
        102,705,1,0,0,0,104,721,1,0,0,0,106,733,1,0,0,0,108,736,1,0,0,0,
        110,738,1,0,0,0,112,740,1,0,0,0,114,742,1,0,0,0,116,745,1,0,0,0,
        118,747,1,0,0,0,120,750,1,0,0,0,122,752,1,0,0,0,124,754,1,0,0,0,
        126,756,1,0,0,0,128,765,1,0,0,0,130,768,1,0,0,0,132,771,1,0,0,0,
        134,773,1,0,0,0,136,775,1,0,0,0,138,778,1,0,0,0,140,781,1,0,0,0,
        142,904,1,0,0,0,144,906,1,0,0,0,146,937,1,0,0,0,148,947,1,0,0,0,
        150,949,1,0,0,0,152,954,1,0,0,0,154,968,1,0,0,0,156,983,1,0,0,0,
        158,985,1,0,0,0,160,990,1,0,0,0,162,995,1,0,0,0,164,997,1,0,0,0,
        166,999,1,0,0,0,168,1008,1,0,0,0,170,1017,1,0,0,0,172,1042,1,0,0,
        0,174,1044,1,0,0,0,176,1046,1,0,0,0,178,1048,1,0,0,0,180,1057,1,
        0,0,0,182,1066,1,0,0,0,184,1085,1,0,0,0,186,1095,1,0,0,0,188,189,
        3,64,32,0,189,190,5,0,0,1,190,201,1,0,0,0,191,192,3,60,30,0,192,
        193,5,0,0,1,193,201,1,0,0,0,194,195,3,80,40,0,195,196,5,0,0,1,196,
        201,1,0,0,0,197,198,3,186,93,0,198,199,5,0,0,1,199,201,1,0,0,0,200,
        188,1,0,0,0,200,191,1,0,0,0,200,194,1,0,0,0,200,197,1,0,0,0,201,
        1,1,0,0,0,202,203,7,0,0,0,203,3,1,0,0,0,204,207,3,6,3,0,205,207,
        5,113,0,0,206,204,1,0,0,0,206,205,1,0,0,0,207,5,1,0,0,0,208,209,
        7,1,0,0,209,7,1,0,0,0,210,211,7,2,0,0,211,9,1,0,0,0,212,215,3,4,
        2,0,213,215,5,6,0,0,214,212,1,0,0,0,214,213,1,0,0,0,215,11,1,0,0,
        0,216,217,5,66,0,0,217,13,1,0,0,0,218,219,5,69,0,0,219,15,1,0,0,
        0,220,221,5,68,0,0,221,17,1,0,0,0,222,223,5,67,0,0,223,19,1,0,0,
        0,224,225,5,5,0,0,225,21,1,0,0,0,226,230,3,8,4,0,227,228,5,70,0,
        0,228,230,3,4,2,0,229,226,1,0,0,0,229,227,1,0,0,0,230,23,1,0,0,0,
        231,238,3,12,6,0,232,238,3,14,7,0,233,238,3,16,8,0,234,238,3,18,
        9,0,235,238,3,20,10,0,236,238,3,144,72,0,237,231,1,0,0,0,237,232,
        1,0,0,0,237,233,1,0,0,0,237,234,1,0,0,0,237,235,1,0,0,0,237,236,
        1,0,0,0,238,25,1,0,0,0,239,251,3,24,12,0,240,251,3,10,5,0,241,251,
        3,22,11,0,242,246,5,2,0,0,243,245,3,26,13,0,244,243,1,0,0,0,245,
        248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,
        246,1,0,0,0,249,251,5,3,0,0,250,239,1,0,0,0,250,240,1,0,0,0,250,
        241,1,0,0,0,250,242,1,0,0,0,251,27,1,0,0,0,252,255,3,12,6,0,253,
        255,3,10,5,0,254,252,1,0,0,0,254,253,1,0,0,0,255,29,1,0,0,0,256,
        268,3,10,5,0,257,258,5,2,0,0,258,259,5,54,0,0,259,261,3,10,5,0,260,
        262,3,28,14,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,
        264,1,0,0,0,264,265,1,0,0,0,265,266,5,3,0,0,266,268,1,0,0,0,267,
        256,1,0,0,0,267,257,1,0,0,0,268,31,1,0,0,0,269,280,3,24,12,0,270,
        280,3,10,5,0,271,275,5,2,0,0,272,274,3,26,13,0,273,272,1,0,0,0,274,
        277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,
        275,1,0,0,0,278,280,5,3,0,0,279,269,1,0,0,0,279,270,1,0,0,0,279,
        271,1,0,0,0,280,33,1,0,0,0,281,286,3,22,11,0,282,283,3,22,11,0,283,
        284,3,32,16,0,284,286,1,0,0,0,285,281,1,0,0,0,285,282,1,0,0,0,286,
        35,1,0,0,0,287,298,3,30,15,0,288,289,5,2,0,0,289,291,3,30,15,0,290,
        292,3,36,18,0,291,290,1,0,0,0,292,293,1,0,0,0,293,291,1,0,0,0,293,
        294,1,0,0,0,294,295,1,0,0,0,295,296,5,3,0,0,296,298,1,0,0,0,297,
        287,1,0,0,0,297,288,1,0,0,0,298,37,1,0,0,0,299,307,3,30,15,0,300,
        301,5,2,0,0,301,302,5,55,0,0,302,303,3,30,15,0,303,304,3,36,18,0,
        304,305,5,3,0,0,305,307,1,0,0,0,306,299,1,0,0,0,306,300,1,0,0,0,
        307,39,1,0,0,0,308,309,5,2,0,0,309,310,3,10,5,0,310,311,3,48,24,
        0,311,312,5,3,0,0,312,41,1,0,0,0,313,314,5,2,0,0,314,315,3,10,5,
        0,315,316,3,36,18,0,316,317,5,3,0,0,317,43,1,0,0,0,318,329,3,10,
        5,0,319,320,5,2,0,0,320,322,3,10,5,0,321,323,3,10,5,0,322,321,1,
        0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,326,1,
        0,0,0,326,327,5,3,0,0,327,329,1,0,0,0,328,318,1,0,0,0,328,319,1,
        0,0,0,329,45,1,0,0,0,330,331,5,2,0,0,331,332,3,44,22,0,332,333,3,
        48,24,0,333,334,5,3,0,0,334,47,1,0,0,0,335,405,3,24,12,0,336,405,
        3,38,19,0,337,338,5,2,0,0,338,340,3,38,19,0,339,341,3,48,24,0,340,
        339,1,0,0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,
        344,1,0,0,0,344,345,5,3,0,0,345,405,1,0,0,0,346,347,5,2,0,0,347,
        348,5,61,0,0,348,350,5,2,0,0,349,351,3,40,20,0,350,349,1,0,0,0,351,
        352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,
        355,5,3,0,0,355,356,3,48,24,0,356,357,5,3,0,0,357,405,1,0,0,0,358,
        359,5,2,0,0,359,360,5,60,0,0,360,362,5,2,0,0,361,363,3,42,21,0,362,
        361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,
        366,1,0,0,0,366,367,5,3,0,0,367,368,3,48,24,0,368,369,5,3,0,0,369,
        405,1,0,0,0,370,371,5,2,0,0,371,372,5,58,0,0,372,374,5,2,0,0,373,
        375,3,42,21,0,374,373,1,0,0,0,375,376,1,0,0,0,376,374,1,0,0,0,376,
        377,1,0,0,0,377,378,1,0,0,0,378,379,5,3,0,0,379,380,3,48,24,0,380,
        381,5,3,0,0,381,405,1,0,0,0,382,383,5,2,0,0,383,384,5,62,0,0,384,
        385,3,48,24,0,385,387,5,2,0,0,386,388,3,46,23,0,387,386,1,0,0,0,
        388,389,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,
        391,392,5,3,0,0,392,393,5,3,0,0,393,405,1,0,0,0,394,395,5,2,0,0,
        395,396,5,53,0,0,396,398,3,48,24,0,397,399,3,34,17,0,398,397,1,0,
        0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,402,1,0,
        0,0,402,403,5,3,0,0,403,405,1,0,0,0,404,335,1,0,0,0,404,336,1,0,
        0,0,404,337,1,0,0,0,404,346,1,0,0,0,404,358,1,0,0,0,404,370,1,0,
        0,0,404,382,1,0,0,0,404,394,1,0,0,0,405,49,1,0,0,0,406,407,5,2,0,
        0,407,408,3,30,15,0,408,412,3,12,6,0,409,411,3,34,17,0,410,409,1,
        0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,415,1,
        0,0,0,414,412,1,0,0,0,415,416,5,3,0,0,416,51,1,0,0,0,417,418,7,3,
        0,0,418,53,1,0,0,0,419,420,5,2,0,0,420,421,3,24,12,0,421,425,3,36,
        18,0,422,424,3,34,17,0,423,422,1,0,0,0,424,427,1,0,0,0,425,423,1,
        0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,429,5,
        3,0,0,429,457,1,0,0,0,430,431,5,2,0,0,431,432,3,52,26,0,432,436,
        3,36,18,0,433,435,3,34,17,0,434,433,1,0,0,0,435,438,1,0,0,0,436,
        434,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,436,1,0,0,0,439,
        440,5,3,0,0,440,457,1,0,0,0,441,442,5,2,0,0,442,444,3,30,15,0,443,
        445,3,36,18,0,444,443,1,0,0,0,445,446,1,0,0,0,446,444,1,0,0,0,446,
        447,1,0,0,0,447,451,1,0,0,0,448,450,3,34,17,0,449,448,1,0,0,0,450,
        453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,
        451,1,0,0,0,454,455,5,3,0,0,455,457,1,0,0,0,456,419,1,0,0,0,456,
        430,1,0,0,0,456,441,1,0,0,0,457,55,1,0,0,0,458,485,3,54,27,0,459,
        460,5,2,0,0,460,461,5,64,0,0,461,463,5,2,0,0,462,464,3,10,5,0,463,
        462,1,0,0,0,464,465,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,
        467,1,0,0,0,467,468,5,3,0,0,468,469,5,2,0,0,469,471,3,30,15,0,470,
        472,3,36,18,0,471,470,1,0,0,0,472,473,1,0,0,0,473,471,1,0,0,0,473,
        474,1,0,0,0,474,478,1,0,0,0,475,477,3,34,17,0,476,475,1,0,0,0,477,
        480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,481,1,0,0,0,480,
        478,1,0,0,0,481,482,5,3,0,0,482,483,5,3,0,0,483,485,1,0,0,0,484,
        458,1,0,0,0,484,459,1,0,0,0,485,57,1,0,0,0,486,487,5,104,0,0,487,
        489,5,2,0,0,488,490,3,50,25,0,489,488,1,0,0,0,490,491,1,0,0,0,491,
        489,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,494,5,3,0,0,494,
        516,1,0,0,0,495,496,5,80,0,0,496,498,5,2,0,0,497,499,3,56,28,0,498,
        497,1,0,0,0,499,500,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,
        502,1,0,0,0,502,503,5,3,0,0,503,516,1,0,0,0,504,505,5,105,0,0,505,
        516,3,20,10,0,506,507,5,81,0,0,507,516,3,20,10,0,508,509,5,76,0,
        0,509,516,3,20,10,0,510,511,5,109,0,0,511,516,3,20,10,0,512,513,
        5,89,0,0,513,516,3,20,10,0,514,516,3,34,17,0,515,486,1,0,0,0,515,
        495,1,0,0,0,515,504,1,0,0,0,515,506,1,0,0,0,515,508,1,0,0,0,515,
        510,1,0,0,0,515,512,1,0,0,0,515,514,1,0,0,0,516,59,1,0,0,0,517,518,
        5,2,0,0,518,519,5,18,0,0,519,521,3,10,5,0,520,522,3,58,29,0,521,
        520,1,0,0,0,522,523,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,
        525,1,0,0,0,525,526,5,3,0,0,526,61,1,0,0,0,527,528,5,108,0,0,528,
        530,5,2,0,0,529,531,3,10,5,0,530,529,1,0,0,0,531,532,1,0,0,0,532,
        530,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,3,0,0,535,
        546,1,0,0,0,536,537,5,84,0,0,537,546,3,20,10,0,538,539,5,79,0,0,
        539,546,3,20,10,0,540,541,5,109,0,0,541,546,3,20,10,0,542,543,5,
        89,0,0,543,546,3,20,10,0,544,546,3,34,17,0,545,527,1,0,0,0,545,536,
        1,0,0,0,545,538,1,0,0,0,545,540,1,0,0,0,545,542,1,0,0,0,545,544,
        1,0,0,0,546,63,1,0,0,0,547,548,5,2,0,0,548,549,5,14,0,0,549,551,
        3,10,5,0,550,552,3,62,31,0,551,550,1,0,0,0,552,553,1,0,0,0,553,551,
        1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,556,5,3,0,0,556,65,1,
        0,0,0,557,558,5,2,0,0,558,559,3,10,5,0,559,560,3,12,6,0,560,561,
        5,3,0,0,561,67,1,0,0,0,562,563,5,2,0,0,563,564,3,10,5,0,564,565,
        3,36,18,0,565,566,5,3,0,0,566,69,1,0,0,0,567,568,5,2,0,0,568,572,
        3,10,5,0,569,571,3,68,34,0,570,569,1,0,0,0,571,574,1,0,0,0,572,570,
        1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,572,1,0,0,0,575,576,
        5,3,0,0,576,71,1,0,0,0,577,579,5,2,0,0,578,580,3,70,35,0,579,578,
        1,0,0,0,580,581,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,583,
        1,0,0,0,583,584,5,3,0,0,584,604,1,0,0,0,585,586,5,2,0,0,586,587,
        5,64,0,0,587,589,5,2,0,0,588,590,3,10,5,0,589,588,1,0,0,0,590,591,
        1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,594,
        5,3,0,0,594,596,5,2,0,0,595,597,3,70,35,0,596,595,1,0,0,0,597,598,
        1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,601,
        5,3,0,0,601,602,5,3,0,0,602,604,1,0,0,0,603,577,1,0,0,0,603,585,
        1,0,0,0,604,73,1,0,0,0,605,606,5,2,0,0,606,607,3,10,5,0,607,611,
        5,2,0,0,608,610,3,42,21,0,609,608,1,0,0,0,610,613,1,0,0,0,611,609,
        1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,611,1,0,0,0,614,615,
        5,3,0,0,615,616,3,36,18,0,616,617,5,3,0,0,617,75,1,0,0,0,618,619,
        3,10,5,0,619,623,5,2,0,0,620,622,3,42,21,0,621,620,1,0,0,0,622,625,
        1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,623,
        1,0,0,0,626,627,5,3,0,0,627,628,3,36,18,0,628,629,3,48,24,0,629,
        77,1,0,0,0,630,637,3,10,5,0,631,632,5,2,0,0,632,633,5,7,0,0,633,
        634,3,10,5,0,634,635,5,3,0,0,635,637,1,0,0,0,636,630,1,0,0,0,636,
        631,1,0,0,0,637,79,1,0,0,0,638,640,3,142,71,0,639,638,1,0,0,0,640,
        643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,81,1,0,0,0,643,641,
        1,0,0,0,644,645,5,23,0,0,645,646,3,48,24,0,646,83,1,0,0,0,647,648,
        5,24,0,0,648,85,1,0,0,0,649,650,5,25,0,0,650,654,5,2,0,0,651,653,
        3,78,39,0,652,651,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,
        1,0,0,0,655,657,1,0,0,0,656,654,1,0,0,0,657,658,5,3,0,0,658,87,1,
        0,0,0,659,660,5,26,0,0,660,661,3,10,5,0,661,662,3,36,18,0,662,89,
        1,0,0,0,663,664,5,27,0,0,664,665,3,10,5,0,665,666,3,72,36,0,666,
        91,1,0,0,0,667,668,5,28,0,0,668,670,5,2,0,0,669,671,3,66,33,0,670,
        669,1,0,0,0,671,672,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,
        674,1,0,0,0,674,675,5,3,0,0,675,677,5,2,0,0,676,678,3,72,36,0,677,
        676,1,0,0,0,678,679,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,
        681,1,0,0,0,681,682,5,3,0,0,682,93,1,0,0,0,683,684,5,29,0,0,684,
        685,3,10,5,0,685,689,5,2,0,0,686,688,3,36,18,0,687,686,1,0,0,0,688,
        691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,
        689,1,0,0,0,692,693,5,3,0,0,693,694,3,36,18,0,694,95,1,0,0,0,695,
        696,5,30,0,0,696,697,3,10,5,0,697,698,3,12,6,0,698,97,1,0,0,0,699,
        700,5,31,0,0,700,701,3,76,38,0,701,99,1,0,0,0,702,703,5,32,0,0,703,
        704,3,76,38,0,704,101,1,0,0,0,705,706,5,33,0,0,706,708,5,2,0,0,707,
        709,3,74,37,0,708,707,1,0,0,0,709,710,1,0,0,0,710,708,1,0,0,0,710,
        711,1,0,0,0,711,712,1,0,0,0,712,713,5,3,0,0,713,715,5,2,0,0,714,
        716,3,48,24,0,715,714,1,0,0,0,716,717,1,0,0,0,717,715,1,0,0,0,717,
        718,1,0,0,0,718,719,1,0,0,0,719,720,5,3,0,0,720,103,1,0,0,0,721,
        722,5,34,0,0,722,723,3,10,5,0,723,727,5,2,0,0,724,726,3,10,5,0,725,
        724,1,0,0,0,726,729,1,0,0,0,727,725,1,0,0,0,727,728,1,0,0,0,728,
        730,1,0,0,0,729,727,1,0,0,0,730,731,5,3,0,0,731,732,3,36,18,0,732,
        105,1,0,0,0,733,734,5,35,0,0,734,735,3,20,10,0,735,107,1,0,0,0,736,
        737,5,36,0,0,737,109,1,0,0,0,738,739,5,37,0,0,739,111,1,0,0,0,740,
        741,5,38,0,0,741,113,1,0,0,0,742,743,5,39,0,0,743,744,3,148,74,0,
        744,115,1,0,0,0,745,746,5,40,0,0,746,117,1,0,0,0,747,748,5,41,0,
        0,748,749,3,22,11,0,749,119,1,0,0,0,750,751,5,42,0,0,751,121,1,0,
        0,0,752,753,5,43,0,0,753,123,1,0,0,0,754,755,5,44,0,0,755,125,1,
        0,0,0,756,757,5,45,0,0,757,759,5,2,0,0,758,760,3,48,24,0,759,758,
        1,0,0,0,760,761,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,763,
        1,0,0,0,763,764,5,3,0,0,764,127,1,0,0,0,765,766,5,46,0,0,766,767,
        3,12,6,0,767,129,1,0,0,0,768,769,5,47,0,0,769,770,3,12,6,0,770,131,
        1,0,0,0,771,772,5,48,0,0,772,133,1,0,0,0,773,774,5,49,0,0,774,135,
        1,0,0,0,775,776,5,50,0,0,776,777,3,34,17,0,777,137,1,0,0,0,778,779,
        5,51,0,0,779,780,3,10,5,0,780,139,1,0,0,0,781,782,5,52,0,0,782,783,
        3,146,73,0,783,141,1,0,0,0,784,785,5,2,0,0,785,786,3,82,41,0,786,
        787,5,3,0,0,787,905,1,0,0,0,788,789,5,2,0,0,789,790,3,84,42,0,790,
        791,5,3,0,0,791,905,1,0,0,0,792,793,5,2,0,0,793,794,3,86,43,0,794,
        795,5,3,0,0,795,905,1,0,0,0,796,797,5,2,0,0,797,798,3,88,44,0,798,
        799,5,3,0,0,799,905,1,0,0,0,800,801,5,2,0,0,801,802,3,90,45,0,802,
        803,5,3,0,0,803,905,1,0,0,0,804,805,5,2,0,0,805,806,3,92,46,0,806,
        807,5,3,0,0,807,905,1,0,0,0,808,809,5,2,0,0,809,810,3,94,47,0,810,
        811,5,3,0,0,811,905,1,0,0,0,812,813,5,2,0,0,813,814,3,96,48,0,814,
        815,5,3,0,0,815,905,1,0,0,0,816,817,5,2,0,0,817,818,3,98,49,0,818,
        819,5,3,0,0,819,905,1,0,0,0,820,821,5,2,0,0,821,822,3,100,50,0,822,
        823,5,3,0,0,823,905,1,0,0,0,824,825,5,2,0,0,825,826,3,102,51,0,826,
        827,5,3,0,0,827,905,1,0,0,0,828,829,5,2,0,0,829,830,3,104,52,0,830,
        831,5,3,0,0,831,905,1,0,0,0,832,833,5,2,0,0,833,834,3,106,53,0,834,
        835,5,3,0,0,835,905,1,0,0,0,836,837,5,2,0,0,837,838,3,108,54,0,838,
        839,5,3,0,0,839,905,1,0,0,0,840,841,5,2,0,0,841,842,3,110,55,0,842,
        843,5,3,0,0,843,905,1,0,0,0,844,845,5,2,0,0,845,846,3,112,56,0,846,
        847,5,3,0,0,847,905,1,0,0,0,848,849,5,2,0,0,849,850,3,114,57,0,850,
        851,5,3,0,0,851,905,1,0,0,0,852,853,5,2,0,0,853,854,3,116,58,0,854,
        855,5,3,0,0,855,905,1,0,0,0,856,857,5,2,0,0,857,858,3,118,59,0,858,
        859,5,3,0,0,859,905,1,0,0,0,860,861,5,2,0,0,861,862,3,120,60,0,862,
        863,5,3,0,0,863,905,1,0,0,0,864,865,5,2,0,0,865,866,3,122,61,0,866,
        867,5,3,0,0,867,905,1,0,0,0,868,869,5,2,0,0,869,870,3,124,62,0,870,
        871,5,3,0,0,871,905,1,0,0,0,872,873,5,2,0,0,873,874,3,126,63,0,874,
        875,5,3,0,0,875,905,1,0,0,0,876,877,5,2,0,0,877,878,3,128,64,0,878,
        879,5,3,0,0,879,905,1,0,0,0,880,881,5,2,0,0,881,882,3,130,65,0,882,
        883,5,3,0,0,883,905,1,0,0,0,884,885,5,2,0,0,885,886,3,132,66,0,886,
        887,5,3,0,0,887,905,1,0,0,0,888,889,5,2,0,0,889,890,3,134,67,0,890,
        891,5,3,0,0,891,905,1,0,0,0,892,893,5,2,0,0,893,894,3,136,68,0,894,
        895,5,3,0,0,895,905,1,0,0,0,896,897,5,2,0,0,897,898,3,138,69,0,898,
        899,5,3,0,0,899,905,1,0,0,0,900,901,5,2,0,0,901,902,3,140,70,0,902,
        903,5,3,0,0,903,905,1,0,0,0,904,784,1,0,0,0,904,788,1,0,0,0,904,
        792,1,0,0,0,904,796,1,0,0,0,904,800,1,0,0,0,904,804,1,0,0,0,904,
        808,1,0,0,0,904,812,1,0,0,0,904,816,1,0,0,0,904,820,1,0,0,0,904,
        824,1,0,0,0,904,828,1,0,0,0,904,832,1,0,0,0,904,836,1,0,0,0,904,
        840,1,0,0,0,904,844,1,0,0,0,904,848,1,0,0,0,904,852,1,0,0,0,904,
        856,1,0,0,0,904,860,1,0,0,0,904,864,1,0,0,0,904,868,1,0,0,0,904,
        872,1,0,0,0,904,876,1,0,0,0,904,880,1,0,0,0,904,884,1,0,0,0,904,
        888,1,0,0,0,904,892,1,0,0,0,904,896,1,0,0,0,904,900,1,0,0,0,905,
        143,1,0,0,0,906,907,7,4,0,0,907,145,1,0,0,0,908,909,5,77,0,0,909,
        938,3,20,10,0,910,911,5,82,0,0,911,938,3,144,72,0,912,913,5,83,0,
        0,913,938,3,144,72,0,914,915,5,91,0,0,915,938,3,144,72,0,916,917,
        5,92,0,0,917,938,3,144,72,0,918,919,5,93,0,0,919,938,3,144,72,0,
        920,921,5,94,0,0,921,938,3,144,72,0,922,923,5,95,0,0,923,938,3,144,
        72,0,924,925,5,96,0,0,925,938,3,144,72,0,926,927,5,97,0,0,927,938,
        3,144,72,0,928,929,5,98,0,0,929,938,3,12,6,0,930,931,5,100,0,0,931,
        938,3,20,10,0,932,933,5,101,0,0,933,938,3,12,6,0,934,935,5,110,0,
        0,935,938,3,12,6,0,936,938,3,34,17,0,937,908,1,0,0,0,937,910,1,0,
        0,0,937,912,1,0,0,0,937,914,1,0,0,0,937,916,1,0,0,0,937,918,1,0,
        0,0,937,920,1,0,0,0,937,922,1,0,0,0,937,924,1,0,0,0,937,926,1,0,
        0,0,937,928,1,0,0,0,937,930,1,0,0,0,937,932,1,0,0,0,937,934,1,0,
        0,0,937,936,1,0,0,0,938,147,1,0,0,0,939,948,5,71,0,0,940,948,5,72,
        0,0,941,948,5,73,0,0,942,948,5,78,0,0,943,948,5,88,0,0,944,948,5,
        99,0,0,945,948,5,111,0,0,946,948,3,22,11,0,947,939,1,0,0,0,947,940,
        1,0,0,0,947,941,1,0,0,0,947,942,1,0,0,0,947,943,1,0,0,0,947,944,
        1,0,0,0,947,945,1,0,0,0,947,946,1,0,0,0,948,149,1,0,0,0,949,950,
        7,5,0,0,950,151,1,0,0,0,951,955,5,15,0,0,952,955,5,13,0,0,953,955,
        3,26,13,0,954,951,1,0,0,0,954,952,1,0,0,0,954,953,1,0,0,0,955,153,
        1,0,0,0,956,957,5,2,0,0,957,958,3,98,49,0,958,959,5,3,0,0,959,969,
        1,0,0,0,960,961,5,2,0,0,961,962,3,100,50,0,962,963,5,3,0,0,963,969,
        1,0,0,0,964,965,5,2,0,0,965,966,3,102,51,0,966,967,5,3,0,0,967,969,
        1,0,0,0,968,956,1,0,0,0,968,960,1,0,0,0,968,964,1,0,0,0,969,155,
        1,0,0,0,970,971,5,72,0,0,971,984,3,12,6,0,972,973,5,73,0,0,973,984,
        3,20,10,0,974,975,5,78,0,0,975,984,3,150,75,0,976,977,5,88,0,0,977,
        984,3,20,10,0,978,979,5,99,0,0,979,984,3,152,76,0,980,981,5,111,
        0,0,981,984,3,20,10,0,982,984,3,34,17,0,983,970,1,0,0,0,983,972,
        1,0,0,0,983,974,1,0,0,0,983,976,1,0,0,0,983,978,1,0,0,0,983,980,
        1,0,0,0,983,982,1,0,0,0,984,157,1,0,0,0,985,986,5,2,0,0,986,987,
        3,48,24,0,987,988,3,48,24,0,988,989,5,3,0,0,989,159,1,0,0,0,990,
        991,5,2,0,0,991,992,3,10,5,0,992,993,3,144,72,0,993,994,5,3,0,0,
        994,161,1,0,0,0,995,996,7,6,0,0,996,163,1,0,0,0,997,998,3,20,10,
        0,998,165,1,0,0,0,999,1003,5,2,0,0,1000,1002,3,48,24,0,1001,1000,
        1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,
        1006,1,0,0,0,1005,1003,1,0,0,0,1006,1007,5,3,0,0,1007,167,1,0,0,
        0,1008,1012,5,2,0,0,1009,1011,3,160,80,0,1010,1009,1,0,0,0,1011,
        1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,1015,1,0,0,
        0,1014,1012,1,0,0,0,1015,1016,5,3,0,0,1016,169,1,0,0,0,1017,1019,
        5,2,0,0,1018,1020,3,156,78,0,1019,1018,1,0,0,0,1020,1021,1,0,0,0,
        1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1024,
        5,3,0,0,1024,171,1,0,0,0,1025,1026,5,2,0,0,1026,1030,5,112,0,0,1027,
        1029,3,154,77,0,1028,1027,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,
        0,0,0,1030,1031,1,0,0,0,1031,1033,1,0,0,0,1032,1030,1,0,0,0,1033,
        1043,5,3,0,0,1034,1038,5,2,0,0,1035,1037,3,154,77,0,1036,1035,1,
        0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,
        1041,1,0,0,0,1040,1038,1,0,0,0,1041,1043,5,3,0,0,1042,1025,1,0,0,
        0,1042,1034,1,0,0,0,1043,173,1,0,0,0,1044,1045,3,32,16,0,1045,175,
        1,0,0,0,1046,1047,3,26,13,0,1047,177,1,0,0,0,1048,1052,5,2,0,0,1049,
        1051,3,10,5,0,1050,1049,1,0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,
        0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,1054,1052,1,0,0,0,1055,1056,
        5,3,0,0,1056,179,1,0,0,0,1057,1061,5,2,0,0,1058,1060,3,10,5,0,1059,
        1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,
        0,1062,1064,1,0,0,0,1063,1061,1,0,0,0,1064,1065,5,3,0,0,1065,181,
        1,0,0,0,1066,1068,5,2,0,0,1067,1069,3,158,79,0,1068,1067,1,0,0,0,
        1069,1070,1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1072,
        1,0,0,0,1072,1073,5,3,0,0,1073,183,1,0,0,0,1074,1086,3,162,81,0,
        1075,1086,3,164,82,0,1076,1086,3,166,83,0,1077,1086,3,168,84,0,1078,
        1086,3,170,85,0,1079,1086,3,172,86,0,1080,1086,3,174,87,0,1081,1086,
        3,176,88,0,1082,1086,3,178,89,0,1083,1086,3,180,90,0,1084,1086,3,
        182,91,0,1085,1074,1,0,0,0,1085,1075,1,0,0,0,1085,1076,1,0,0,0,1085,
        1077,1,0,0,0,1085,1078,1,0,0,0,1085,1079,1,0,0,0,1085,1080,1,0,0,
        0,1085,1081,1,0,0,0,1085,1082,1,0,0,0,1085,1083,1,0,0,0,1085,1084,
        1,0,0,0,1086,185,1,0,0,0,1087,1096,5,17,0,0,1088,1096,3,184,92,0,
        1089,1096,5,21,0,0,1090,1091,5,2,0,0,1091,1092,5,10,0,0,1092,1093,
        3,20,10,0,1093,1094,5,3,0,0,1094,1096,1,0,0,0,1095,1087,1,0,0,0,
        1095,1088,1,0,0,0,1095,1089,1,0,0,0,1095,1090,1,0,0,0,1096,187,1,
        0,0,0,76,200,206,214,229,237,246,250,254,263,267,275,279,285,293,
        297,306,324,328,342,352,364,376,389,400,404,412,425,436,446,451,
        456,465,473,478,484,491,500,515,523,532,545,553,572,581,591,598,
        603,611,623,636,641,654,672,679,689,710,717,727,761,904,937,947,
        954,968,983,1003,1012,1021,1030,1038,1042,1052,1061,1070,1085,1095
    ]

class SMTLIBv2Parser ( Parser ):

    grammarFileName = "SMTLIBv2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'('", "')'", "';'", "<INVALID>", 
                     "<INVALID>", "'not'", "'Bool'", "'continued-execution'", 
                     "'error'", "'false'", "'immediate-exit'", "'incomplete'", 
                     "'logic'", "'memout'", "'sat'", "'success'", "'theory'", 
                     "'true'", "'unknown'", "'unsupported'", "'unsat'", 
                     "'assert'", "'check-sat'", "'check-sat-assuming'", 
                     "'declare-const'", "'declare-datatype'", "'declare-datatypes'", 
                     "'declare-fun'", "'declare-sort'", "'define-fun'", 
                     "'define-fun-rec'", "'define-funs-rec'", "'define-sort'", 
                     "'echo'", "'exit'", "'get-assertions'", "'get-assignment'", 
                     "'get-info'", "'get-model'", "'get-option'", "'get-proof'", 
                     "'get-unsat-assumptions'", "'get-unsat-core'", "'get-value'", 
                     "'pop'", "'push'", "'reset'", "'reset-assertions'", 
                     "'set-info'", "'set-logic'", "'set-option'", "'!'", 
                     "'_'", "'as'", "'BINARY'", "'DECIMAL'", "'exists'", 
                     "'HEXADECIMAL'", "'forall'", "'let'", "'match'", "'NUMERAL'", 
                     "'par'", "'string'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "':all-statistics'", "':assertion-stack-levels'", 
                     "':authors'", "':category'", "':chainable'", "':definition'", 
                     "':diagnostic-output-channel'", "':error-behavior'", 
                     "':extensions'", "':funs'", "':funs-description'", 
                     "':global-declarations'", "':interactive-mode'", "':language'", 
                     "':left-assoc'", "':license'", "':named'", "':name'", 
                     "':notes'", "':pattern'", "':print-success'", "':produce-assertions'", 
                     "':produce-assignments'", "':produce-models'", "':produce-proofs'", 
                     "':produce-unsat-assumptions'", "':produce-unsat-cores'", 
                     "':random-seed'", "':reason-unknown'", "':regular-output-channel'", 
                     "':reproducible-resource-limit'", "':right-assoc'", 
                     "':smt-lib-version'", "':sorts'", "':sorts-description'", 
                     "':source'", "':status'", "':theories'", "':values'", 
                     "':verbosity'", "':version'", "'model'" ]

    symbolicNames = [ "<INVALID>", "Comment", "ParOpen", "ParClose", "Semicolon", 
                      "String", "QuotedSymbol", "PS_Not", "PS_Bool", "PS_ContinuedExecution", 
                      "PS_Error", "PS_False", "PS_ImmediateExit", "PS_Incomplete", 
                      "PS_Logic", "PS_Memout", "PS_Sat", "PS_Success", "PS_Theory", 
                      "PS_True", "PS_Unknown", "PS_Unsupported", "PS_Unsat", 
                      "CMD_Assert", "CMD_CheckSat", "CMD_CheckSatAssuming", 
                      "CMD_DeclareConst", "CMD_DeclareDatatype", "CMD_DeclareDatatypes", 
                      "CMD_DeclareFun", "CMD_DeclareSort", "CMD_DefineFun", 
                      "CMD_DefineFunRec", "CMD_DefineFunsRec", "CMD_DefineSort", 
                      "CMD_Echo", "CMD_Exit", "CMD_GetAssertions", "CMD_GetAssignment", 
                      "CMD_GetInfo", "CMD_GetModel", "CMD_GetOption", "CMD_GetProof", 
                      "CMD_GetUnsatAssumptions", "CMD_GetUnsatCore", "CMD_GetValue", 
                      "CMD_Pop", "CMD_Push", "CMD_Reset", "CMD_ResetAssertions", 
                      "CMD_SetInfo", "CMD_SetLogic", "CMD_SetOption", "GRW_Exclamation", 
                      "GRW_Underscore", "GRW_As", "GRW_Binary", "GRW_Decimal", 
                      "GRW_Exists", "GRW_Hexadecimal", "GRW_Forall", "GRW_Let", 
                      "GRW_Match", "GRW_Numeral", "GRW_Par", "GRW_String", 
                      "Numeral", "Binary", "HexDecimal", "Decimal", "Colon", 
                      "PK_AllStatistics", "PK_AssertionStackLevels", "PK_Authors", 
                      "PK_Category", "PK_Chainable", "PK_Definition", "PK_DiagnosticOutputChannel", 
                      "PK_ErrorBehaviour", "PK_Extension", "PK_Funs", "PK_FunsDescription", 
                      "PK_GlobalDeclarations", "PK_InteractiveMode", "PK_Language", 
                      "PK_LeftAssoc", "PK_License", "PK_Named", "PK_Name", 
                      "PK_Notes", "PK_Pattern", "PK_PrintSuccess", "PK_ProduceAssertions", 
                      "PK_ProduceAssignments", "PK_ProduceModels", "PK_ProduceProofs", 
                      "PK_ProduceUnsatAssumptions", "PK_ProduceUnsatCores", 
                      "PK_RandomSeed", "PK_ReasonUnknown", "PK_RegularOutputChannel", 
                      "PK_ReproducibleResourceLimit", "PK_RightAssoc", "PK_SmtLibVersion", 
                      "PK_Sorts", "PK_SortsDescription", "PK_Source", "PK_Status", 
                      "PK_Theories", "PK_Values", "PK_Verbosity", "PK_Version", 
                      "RS_Model", "UndefinedSymbol", "WS" ]

    RULE_start = 0
    RULE_generalReservedWord = 1
    RULE_simpleSymbol = 2
    RULE_predefSymbol = 3
    RULE_predefKeyword = 4
    RULE_symbol = 5
    RULE_numeral = 6
    RULE_decimal = 7
    RULE_hexadecimal = 8
    RULE_binary = 9
    RULE_string = 10
    RULE_keyword = 11
    RULE_spec_constant = 12
    RULE_s_expr = 13
    RULE_index = 14
    RULE_identifier = 15
    RULE_attribute_value = 16
    RULE_attribute = 17
    RULE_sort = 18
    RULE_qual_identifier = 19
    RULE_var_binding = 20
    RULE_sorted_var = 21
    RULE_pattern = 22
    RULE_match_case = 23
    RULE_term = 24
    RULE_sort_symbol_decl = 25
    RULE_meta_spec_constant = 26
    RULE_fun_symbol_decl = 27
    RULE_par_fun_symbol_decl = 28
    RULE_theory_attribute = 29
    RULE_theory_decl = 30
    RULE_logic_attribue = 31
    RULE_logic = 32
    RULE_sort_dec = 33
    RULE_selector_dec = 34
    RULE_constructor_dec = 35
    RULE_datatype_dec = 36
    RULE_function_dec = 37
    RULE_function_def = 38
    RULE_prop_literal = 39
    RULE_script = 40
    RULE_cmd_assert = 41
    RULE_cmd_checkSat = 42
    RULE_cmd_checkSatAssuming = 43
    RULE_cmd_declareConst = 44
    RULE_cmd_declareDatatype = 45
    RULE_cmd_declareDatatypes = 46
    RULE_cmd_declareFun = 47
    RULE_cmd_declareSort = 48
    RULE_cmd_defineFun = 49
    RULE_cmd_defineFunRec = 50
    RULE_cmd_defineFunsRec = 51
    RULE_cmd_defineSort = 52
    RULE_cmd_echo = 53
    RULE_cmd_exit = 54
    RULE_cmd_getAssertions = 55
    RULE_cmd_getAssignment = 56
    RULE_cmd_getInfo = 57
    RULE_cmd_getModel = 58
    RULE_cmd_getOption = 59
    RULE_cmd_getProof = 60
    RULE_cmd_getUnsatAssumptions = 61
    RULE_cmd_getUnsatCore = 62
    RULE_cmd_getValue = 63
    RULE_cmd_pop = 64
    RULE_cmd_push = 65
    RULE_cmd_reset = 66
    RULE_cmd_resetAssertions = 67
    RULE_cmd_setInfo = 68
    RULE_cmd_setLogic = 69
    RULE_cmd_setOption = 70
    RULE_command = 71
    RULE_b_value = 72
    RULE_option = 73
    RULE_info_flag = 74
    RULE_error_behaviour = 75
    RULE_reason_unknown = 76
    RULE_model_response = 77
    RULE_info_response = 78
    RULE_valuation_pair = 79
    RULE_t_valuation_pair = 80
    RULE_check_sat_response = 81
    RULE_echo_response = 82
    RULE_get_assertions_response = 83
    RULE_get_assignment_response = 84
    RULE_get_info_response = 85
    RULE_get_model_response = 86
    RULE_get_option_response = 87
    RULE_get_proof_response = 88
    RULE_get_unsat_assump_response = 89
    RULE_get_unsat_core_response = 90
    RULE_get_value_response = 91
    RULE_specific_success_response = 92
    RULE_general_response = 93

    ruleNames =  [ "start", "generalReservedWord", "simpleSymbol", "predefSymbol", 
                   "predefKeyword", "symbol", "numeral", "decimal", "hexadecimal", 
                   "binary", "string", "keyword", "spec_constant", "s_expr", 
                   "index", "identifier", "attribute_value", "attribute", 
                   "sort", "qual_identifier", "var_binding", "sorted_var", 
                   "pattern", "match_case", "term", "sort_symbol_decl", 
                   "meta_spec_constant", "fun_symbol_decl", "par_fun_symbol_decl", 
                   "theory_attribute", "theory_decl", "logic_attribue", 
                   "logic", "sort_dec", "selector_dec", "constructor_dec", 
                   "datatype_dec", "function_dec", "function_def", "prop_literal", 
                   "script", "cmd_assert", "cmd_checkSat", "cmd_checkSatAssuming", 
                   "cmd_declareConst", "cmd_declareDatatype", "cmd_declareDatatypes", 
                   "cmd_declareFun", "cmd_declareSort", "cmd_defineFun", 
                   "cmd_defineFunRec", "cmd_defineFunsRec", "cmd_defineSort", 
                   "cmd_echo", "cmd_exit", "cmd_getAssertions", "cmd_getAssignment", 
                   "cmd_getInfo", "cmd_getModel", "cmd_getOption", "cmd_getProof", 
                   "cmd_getUnsatAssumptions", "cmd_getUnsatCore", "cmd_getValue", 
                   "cmd_pop", "cmd_push", "cmd_reset", "cmd_resetAssertions", 
                   "cmd_setInfo", "cmd_setLogic", "cmd_setOption", "command", 
                   "b_value", "option", "info_flag", "error_behaviour", 
                   "reason_unknown", "model_response", "info_response", 
                   "valuation_pair", "t_valuation_pair", "check_sat_response", 
                   "echo_response", "get_assertions_response", "get_assignment_response", 
                   "get_info_response", "get_model_response", "get_option_response", 
                   "get_proof_response", "get_unsat_assump_response", "get_unsat_core_response", 
                   "get_value_response", "specific_success_response", "general_response" ]

    EOF = Token.EOF
    Comment=1
    ParOpen=2
    ParClose=3
    Semicolon=4
    String=5
    QuotedSymbol=6
    PS_Not=7
    PS_Bool=8
    PS_ContinuedExecution=9
    PS_Error=10
    PS_False=11
    PS_ImmediateExit=12
    PS_Incomplete=13
    PS_Logic=14
    PS_Memout=15
    PS_Sat=16
    PS_Success=17
    PS_Theory=18
    PS_True=19
    PS_Unknown=20
    PS_Unsupported=21
    PS_Unsat=22
    CMD_Assert=23
    CMD_CheckSat=24
    CMD_CheckSatAssuming=25
    CMD_DeclareConst=26
    CMD_DeclareDatatype=27
    CMD_DeclareDatatypes=28
    CMD_DeclareFun=29
    CMD_DeclareSort=30
    CMD_DefineFun=31
    CMD_DefineFunRec=32
    CMD_DefineFunsRec=33
    CMD_DefineSort=34
    CMD_Echo=35
    CMD_Exit=36
    CMD_GetAssertions=37
    CMD_GetAssignment=38
    CMD_GetInfo=39
    CMD_GetModel=40
    CMD_GetOption=41
    CMD_GetProof=42
    CMD_GetUnsatAssumptions=43
    CMD_GetUnsatCore=44
    CMD_GetValue=45
    CMD_Pop=46
    CMD_Push=47
    CMD_Reset=48
    CMD_ResetAssertions=49
    CMD_SetInfo=50
    CMD_SetLogic=51
    CMD_SetOption=52
    GRW_Exclamation=53
    GRW_Underscore=54
    GRW_As=55
    GRW_Binary=56
    GRW_Decimal=57
    GRW_Exists=58
    GRW_Hexadecimal=59
    GRW_Forall=60
    GRW_Let=61
    GRW_Match=62
    GRW_Numeral=63
    GRW_Par=64
    GRW_String=65
    Numeral=66
    Binary=67
    HexDecimal=68
    Decimal=69
    Colon=70
    PK_AllStatistics=71
    PK_AssertionStackLevels=72
    PK_Authors=73
    PK_Category=74
    PK_Chainable=75
    PK_Definition=76
    PK_DiagnosticOutputChannel=77
    PK_ErrorBehaviour=78
    PK_Extension=79
    PK_Funs=80
    PK_FunsDescription=81
    PK_GlobalDeclarations=82
    PK_InteractiveMode=83
    PK_Language=84
    PK_LeftAssoc=85
    PK_License=86
    PK_Named=87
    PK_Name=88
    PK_Notes=89
    PK_Pattern=90
    PK_PrintSuccess=91
    PK_ProduceAssertions=92
    PK_ProduceAssignments=93
    PK_ProduceModels=94
    PK_ProduceProofs=95
    PK_ProduceUnsatAssumptions=96
    PK_ProduceUnsatCores=97
    PK_RandomSeed=98
    PK_ReasonUnknown=99
    PK_RegularOutputChannel=100
    PK_ReproducibleResourceLimit=101
    PK_RightAssoc=102
    PK_SmtLibVersion=103
    PK_Sorts=104
    PK_SortsDescription=105
    PK_Source=106
    PK_Status=107
    PK_Theories=108
    PK_Values=109
    PK_Verbosity=110
    PK_Version=111
    RS_Model=112
    UndefinedSymbol=113
    WS=114

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logic(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.LogicContext,0)


        def EOF(self):
            return self.getToken(SMTLIBv2Parser.EOF, 0)

        def theory_decl(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Theory_declContext,0)


        def script(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.ScriptContext,0)


        def general_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.General_responseContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = SMTLIBv2Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.state = 200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.logic()
                self.state = 189
                self.match(SMTLIBv2Parser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.theory_decl()
                self.state = 192
                self.match(SMTLIBv2Parser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.script()
                self.state = 195
                self.match(SMTLIBv2Parser.EOF)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 197
                self.general_response()
                self.state = 198
                self.match(SMTLIBv2Parser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRW_Exclamation(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exclamation, 0)

        def GRW_Underscore(self):
            return self.getToken(SMTLIBv2Parser.GRW_Underscore, 0)

        def GRW_As(self):
            return self.getToken(SMTLIBv2Parser.GRW_As, 0)

        def GRW_Binary(self):
            return self.getToken(SMTLIBv2Parser.GRW_Binary, 0)

        def GRW_Decimal(self):
            return self.getToken(SMTLIBv2Parser.GRW_Decimal, 0)

        def GRW_Exists(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exists, 0)

        def GRW_Hexadecimal(self):
            return self.getToken(SMTLIBv2Parser.GRW_Hexadecimal, 0)

        def GRW_Forall(self):
            return self.getToken(SMTLIBv2Parser.GRW_Forall, 0)

        def GRW_Let(self):
            return self.getToken(SMTLIBv2Parser.GRW_Let, 0)

        def GRW_Match(self):
            return self.getToken(SMTLIBv2Parser.GRW_Match, 0)

        def GRW_Numeral(self):
            return self.getToken(SMTLIBv2Parser.GRW_Numeral, 0)

        def GRW_Par(self):
            return self.getToken(SMTLIBv2Parser.GRW_Par, 0)

        def GRW_String(self):
            return self.getToken(SMTLIBv2Parser.GRW_String, 0)

        def RS_Model(self):
            return self.getToken(SMTLIBv2Parser.RS_Model, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_generalReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralReservedWord" ):
                listener.enterGeneralReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralReservedWord" ):
                listener.exitGeneralReservedWord(self)




    def generalReservedWord(self):

        localctx = SMTLIBv2Parser.GeneralReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_generalReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 576460752303431679) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefSymbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.PredefSymbolContext,0)


        def UndefinedSymbol(self):
            return self.getToken(SMTLIBv2Parser.UndefinedSymbol, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_simpleSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSymbol" ):
                listener.enterSimpleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSymbol" ):
                listener.exitSimpleSymbol(self)




    def simpleSymbol(self):

        localctx = SMTLIBv2Parser.SimpleSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_simpleSymbol)
        try:
            self.state = 206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 204
                self.predefSymbol()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 205
                self.match(SMTLIBv2Parser.UndefinedSymbol)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Not(self):
            return self.getToken(SMTLIBv2Parser.PS_Not, 0)

        def PS_Bool(self):
            return self.getToken(SMTLIBv2Parser.PS_Bool, 0)

        def PS_ContinuedExecution(self):
            return self.getToken(SMTLIBv2Parser.PS_ContinuedExecution, 0)

        def PS_Error(self):
            return self.getToken(SMTLIBv2Parser.PS_Error, 0)

        def PS_False(self):
            return self.getToken(SMTLIBv2Parser.PS_False, 0)

        def PS_ImmediateExit(self):
            return self.getToken(SMTLIBv2Parser.PS_ImmediateExit, 0)

        def PS_Incomplete(self):
            return self.getToken(SMTLIBv2Parser.PS_Incomplete, 0)

        def PS_Logic(self):
            return self.getToken(SMTLIBv2Parser.PS_Logic, 0)

        def PS_Memout(self):
            return self.getToken(SMTLIBv2Parser.PS_Memout, 0)

        def PS_Sat(self):
            return self.getToken(SMTLIBv2Parser.PS_Sat, 0)

        def PS_Success(self):
            return self.getToken(SMTLIBv2Parser.PS_Success, 0)

        def PS_Theory(self):
            return self.getToken(SMTLIBv2Parser.PS_Theory, 0)

        def PS_True(self):
            return self.getToken(SMTLIBv2Parser.PS_True, 0)

        def PS_Unknown(self):
            return self.getToken(SMTLIBv2Parser.PS_Unknown, 0)

        def PS_Unsupported(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsupported, 0)

        def PS_Unsat(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsat, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_predefSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefSymbol" ):
                listener.enterPredefSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefSymbol" ):
                listener.exitPredefSymbol(self)




    def predefSymbol(self):

        localctx = SMTLIBv2Parser.PredefSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_predefSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388480) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AllStatistics(self):
            return self.getToken(SMTLIBv2Parser.PK_AllStatistics, 0)

        def PK_AssertionStackLevels(self):
            return self.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0)

        def PK_Authors(self):
            return self.getToken(SMTLIBv2Parser.PK_Authors, 0)

        def PK_Category(self):
            return self.getToken(SMTLIBv2Parser.PK_Category, 0)

        def PK_Chainable(self):
            return self.getToken(SMTLIBv2Parser.PK_Chainable, 0)

        def PK_Definition(self):
            return self.getToken(SMTLIBv2Parser.PK_Definition, 0)

        def PK_DiagnosticOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0)

        def PK_ErrorBehaviour(self):
            return self.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0)

        def PK_Extension(self):
            return self.getToken(SMTLIBv2Parser.PK_Extension, 0)

        def PK_Funs(self):
            return self.getToken(SMTLIBv2Parser.PK_Funs, 0)

        def PK_FunsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_FunsDescription, 0)

        def PK_GlobalDeclarations(self):
            return self.getToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0)

        def PK_InteractiveMode(self):
            return self.getToken(SMTLIBv2Parser.PK_InteractiveMode, 0)

        def PK_Language(self):
            return self.getToken(SMTLIBv2Parser.PK_Language, 0)

        def PK_LeftAssoc(self):
            return self.getToken(SMTLIBv2Parser.PK_LeftAssoc, 0)

        def PK_License(self):
            return self.getToken(SMTLIBv2Parser.PK_License, 0)

        def PK_Named(self):
            return self.getToken(SMTLIBv2Parser.PK_Named, 0)

        def PK_Name(self):
            return self.getToken(SMTLIBv2Parser.PK_Name, 0)

        def PK_Notes(self):
            return self.getToken(SMTLIBv2Parser.PK_Notes, 0)

        def PK_Pattern(self):
            return self.getToken(SMTLIBv2Parser.PK_Pattern, 0)

        def PK_PrintSuccess(self):
            return self.getToken(SMTLIBv2Parser.PK_PrintSuccess, 0)

        def PK_ProduceAssertions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssertions, 0)

        def PK_ProduceAssignments(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssignments, 0)

        def PK_ProduceModels(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceModels, 0)

        def PK_ProduceProofs(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceProofs, 0)

        def PK_ProduceUnsatAssumptions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0)

        def PK_ProduceUnsatCores(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0)

        def PK_RandomSeed(self):
            return self.getToken(SMTLIBv2Parser.PK_RandomSeed, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0)

        def PK_RegularOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0)

        def PK_ReproducibleResourceLimit(self):
            return self.getToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0)

        def PK_RightAssoc(self):
            return self.getToken(SMTLIBv2Parser.PK_RightAssoc, 0)

        def PK_SmtLibVersion(self):
            return self.getToken(SMTLIBv2Parser.PK_SmtLibVersion, 0)

        def PK_Sorts(self):
            return self.getToken(SMTLIBv2Parser.PK_Sorts, 0)

        def PK_SortsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_SortsDescription, 0)

        def PK_Source(self):
            return self.getToken(SMTLIBv2Parser.PK_Source, 0)

        def PK_Status(self):
            return self.getToken(SMTLIBv2Parser.PK_Status, 0)

        def PK_Theories(self):
            return self.getToken(SMTLIBv2Parser.PK_Theories, 0)

        def PK_Values(self):
            return self.getToken(SMTLIBv2Parser.PK_Values, 0)

        def PK_Verbosity(self):
            return self.getToken(SMTLIBv2Parser.PK_Verbosity, 0)

        def PK_Version(self):
            return self.getToken(SMTLIBv2Parser.PK_Version, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_predefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefKeyword" ):
                listener.enterPredefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefKeyword" ):
                listener.exitPredefKeyword(self)




    def predefKeyword(self):

        localctx = SMTLIBv2Parser.PredefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_predefKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2199023255551) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleSymbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SimpleSymbolContext,0)


        def QuotedSymbol(self):
            return self.getToken(SMTLIBv2Parser.QuotedSymbol, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = SMTLIBv2Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_symbol)
        try:
            self.state = 214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 212
                self.simpleSymbol()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 213
                self.match(SMTLIBv2Parser.QuotedSymbol)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumeralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Numeral(self):
            return self.getToken(SMTLIBv2Parser.Numeral, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_numeral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeral" ):
                listener.enterNumeral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeral" ):
                listener.exitNumeral(self)




    def numeral(self):

        localctx = SMTLIBv2Parser.NumeralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_numeral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(SMTLIBv2Parser.Numeral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(SMTLIBv2Parser.Decimal, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)




    def decimal(self):

        localctx = SMTLIBv2Parser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(SMTLIBv2Parser.Decimal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexDecimal(self):
            return self.getToken(SMTLIBv2Parser.HexDecimal, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_hexadecimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimal" ):
                listener.enterHexadecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimal" ):
                listener.exitHexadecimal(self)




    def hexadecimal(self):

        localctx = SMTLIBv2Parser.HexadecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_hexadecimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(SMTLIBv2Parser.HexDecimal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Binary(self):
            return self.getToken(SMTLIBv2Parser.Binary, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)




    def binary(self):

        localctx = SMTLIBv2Parser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_binary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(SMTLIBv2Parser.Binary)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def String(self):
            return self.getToken(SMTLIBv2Parser.String, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = SMTLIBv2Parser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(SMTLIBv2Parser.String)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefKeyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.PredefKeywordContext,0)


        def Colon(self):
            return self.getToken(SMTLIBv2Parser.Colon, 0)

        def simpleSymbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SimpleSymbolContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SMTLIBv2Parser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_keyword)
        try:
            self.state = 229
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.predefKeyword()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.match(SMTLIBv2Parser.Colon)
                self.state = 228
                self.simpleSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spec_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def decimal(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.DecimalContext,0)


        def hexadecimal(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.HexadecimalContext,0)


        def binary(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.BinaryContext,0)


        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def b_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.B_valueContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_spec_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpec_constant" ):
                listener.enterSpec_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpec_constant" ):
                listener.exitSpec_constant(self)




    def spec_constant(self):

        localctx = SMTLIBv2Parser.Spec_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_spec_constant)
        try:
            self.state = 237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                self.numeral()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self.decimal()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 233
                self.hexadecimal()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 4)
                self.state = 234
                self.binary()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 235
                self.string()
                pass
            elif token in [11, 19]:
                self.enterOuterAlt(localctx, 6)
                self.state = 236
                self.b_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def s_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.S_exprContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_s_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_expr" ):
                listener.enterS_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_expr" ):
                listener.exitS_expr(self)




    def s_expr(self):

        localctx = SMTLIBv2Parser.S_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_expr)
        self._la = 0 # Token type
        try:
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 239
                self.spec_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 240
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 241
                self.keyword()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 242
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388580) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 211106232532991) != 0):
                    self.state = 243
                    self.s_expr()
                    self.state = 248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 249
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)




    def index(self):

        localctx = SMTLIBv2Parser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_index)
        try:
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.numeral()
                pass
            elif token in [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def GRW_Underscore(self):
            return self.getToken(SMTLIBv2Parser.GRW_Underscore, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.IndexContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.IndexContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SMTLIBv2Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.symbol()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 258
                self.match(SMTLIBv2Parser.GRW_Underscore)
                self.state = 259
                self.symbol()
                self.state = 261 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 260
                    self.index()
                    self.state = 263 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==66 or _la==113):
                        break

                self.state = 265
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def s_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.S_exprContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_attribute_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_value" ):
                listener.enterAttribute_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_value" ):
                listener.exitAttribute_value(self)




    def attribute_value(self):

        localctx = SMTLIBv2Parser.Attribute_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attribute_value)
        self._la = 0 # Token type
        try:
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.spec_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 270
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 271
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388580) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 211106232532991) != 0):
                    self.state = 272
                    self.s_expr()
                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 278
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def attribute_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Attribute_valueContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = SMTLIBv2Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_attribute)
        try:
            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.keyword()
                self.state = 283
                self.attribute_value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort" ):
                listener.enterSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort" ):
                listener.exitSort(self)




    def sort(self):

        localctx = SMTLIBv2Parser.SortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_sort)
        self._la = 0 # Token type
        try:
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 289
                self.identifier()
                self.state = 291 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 290
                    self.sort()
                    self.state = 293 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388548) != 0) or _la==113):
                        break

                self.state = 295
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qual_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def GRW_As(self):
            return self.getToken(SMTLIBv2Parser.GRW_As, 0)

        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_qual_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQual_identifier" ):
                listener.enterQual_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQual_identifier" ):
                listener.exitQual_identifier(self)




    def qual_identifier(self):

        localctx = SMTLIBv2Parser.Qual_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_qual_identifier)
        try:
            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 299
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 301
                self.match(SMTLIBv2Parser.GRW_As)
                self.state = 302
                self.identifier()
                self.state = 303
                self.sort()
                self.state = 304
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_bindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def term(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_var_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_binding" ):
                listener.enterVar_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_binding" ):
                listener.exitVar_binding(self)




    def var_binding(self):

        localctx = SMTLIBv2Parser.Var_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_var_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 309
            self.symbol()
            self.state = 310
            self.term()
            self.state = 311
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sorted_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sorted_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_var" ):
                listener.enterSorted_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_var" ):
                listener.exitSorted_var(self)




    def sorted_var(self):

        localctx = SMTLIBv2Parser.Sorted_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sorted_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 314
            self.symbol()
            self.state = 315
            self.sort()
            self.state = 316
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = SMTLIBv2Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self.symbol()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 320
                self.symbol()
                self.state = 322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 321
                    self.symbol()
                    self.state = 324 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==113):
                        break

                self.state = 326
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def pattern(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.PatternContext,0)


        def term(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_match_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_case" ):
                listener.enterMatch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_case" ):
                listener.exitMatch_case(self)




    def match_case(self):

        localctx = SMTLIBv2Parser.Match_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_match_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 331
            self.pattern()
            self.state = 332
            self.term()
            self.state = 333
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def qual_identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Qual_identifierContext,0)


        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def GRW_Let(self):
            return self.getToken(SMTLIBv2Parser.GRW_Let, 0)

        def var_binding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Var_bindingContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Var_bindingContext,i)


        def GRW_Forall(self):
            return self.getToken(SMTLIBv2Parser.GRW_Forall, 0)

        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sorted_varContext,i)


        def GRW_Exists(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exists, 0)

        def GRW_Match(self):
            return self.getToken(SMTLIBv2Parser.GRW_Match, 0)

        def match_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Match_caseContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Match_caseContext,i)


        def GRW_Exclamation(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exclamation, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = SMTLIBv2Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.spec_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.qual_identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 337
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 338
                self.qual_identifier()
                self.state = 340 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 339
                    self.term()
                    self.state = 342 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388580) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 140737488355343) != 0)):
                        break

                self.state = 344
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 346
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 347
                self.match(SMTLIBv2Parser.GRW_Let)
                self.state = 348
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 350 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 349
                    self.var_binding()
                    self.state = 352 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 354
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 355
                self.term()
                self.state = 356
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 358
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 359
                self.match(SMTLIBv2Parser.GRW_Forall)
                self.state = 360
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 362 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 361
                    self.sorted_var()
                    self.state = 364 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 366
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 367
                self.term()
                self.state = 368
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 370
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 371
                self.match(SMTLIBv2Parser.GRW_Exists)
                self.state = 372
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 374 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 373
                    self.sorted_var()
                    self.state = 376 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 378
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 379
                self.term()
                self.state = 380
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 382
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 383
                self.match(SMTLIBv2Parser.GRW_Match)
                self.state = 384
                self.term()
                self.state = 385
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 387 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 386
                    self.match_case()
                    self.state = 389 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 391
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 392
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 394
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 395
                self.match(SMTLIBv2Parser.GRW_Exclamation)
                self.state = 396
                self.term()
                self.state = 398 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 397
                    self.attribute()
                    self.state = 400 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0)):
                        break

                self.state = 402
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_symbol_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sort_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_symbol_decl" ):
                listener.enterSort_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_symbol_decl" ):
                listener.exitSort_symbol_decl(self)




    def sort_symbol_decl(self):

        localctx = SMTLIBv2Parser.Sort_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sort_symbol_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 407
            self.identifier()
            self.state = 408
            self.numeral()
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0):
                self.state = 409
                self.attribute()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 415
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Meta_spec_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRW_Numeral(self):
            return self.getToken(SMTLIBv2Parser.GRW_Numeral, 0)

        def GRW_Decimal(self):
            return self.getToken(SMTLIBv2Parser.GRW_Decimal, 0)

        def GRW_String(self):
            return self.getToken(SMTLIBv2Parser.GRW_String, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_meta_spec_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta_spec_constant" ):
                listener.enterMeta_spec_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta_spec_constant" ):
                listener.exitMeta_spec_constant(self)




    def meta_spec_constant(self):

        localctx = SMTLIBv2Parser.Meta_spec_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_meta_spec_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 321) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fun_symbol_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def meta_spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Meta_spec_constantContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_fun_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFun_symbol_decl" ):
                listener.enterFun_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFun_symbol_decl" ):
                listener.exitFun_symbol_decl(self)




    def fun_symbol_decl(self):

        localctx = SMTLIBv2Parser.Fun_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fun_symbol_decl)
        self._la = 0 # Token type
        try:
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 420
                self.spec_constant()
                self.state = 421
                self.sort()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0):
                    self.state = 422
                    self.attribute()
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 428
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 431
                self.meta_spec_constant()
                self.state = 432
                self.sort()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0):
                    self.state = 433
                    self.attribute()
                    self.state = 438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 439
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 441
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 442
                self.identifier()
                self.state = 444 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 443
                    self.sort()
                    self.state = 446 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388548) != 0) or _la==113):
                        break

                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0):
                    self.state = 448
                    self.attribute()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 454
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Par_fun_symbol_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fun_symbol_decl(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Fun_symbol_declContext,0)


        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def GRW_Par(self):
            return self.getToken(SMTLIBv2Parser.GRW_Par, 0)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_par_fun_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_fun_symbol_decl" ):
                listener.enterPar_fun_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_fun_symbol_decl" ):
                listener.exitPar_fun_symbol_decl(self)




    def par_fun_symbol_decl(self):

        localctx = SMTLIBv2Parser.Par_fun_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_par_fun_symbol_decl)
        self._la = 0 # Token type
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                self.fun_symbol_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 460
                self.match(SMTLIBv2Parser.GRW_Par)
                self.state = 461
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 463 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 462
                    self.symbol()
                    self.state = 465 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==113):
                        break

                self.state = 467
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 468
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 469
                self.identifier()
                self.state = 471 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 470
                    self.sort()
                    self.state = 473 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388548) != 0) or _la==113):
                        break

                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0):
                    self.state = 475
                    self.attribute()
                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 481
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 482
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Theory_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_Sorts(self):
            return self.getToken(SMTLIBv2Parser.PK_Sorts, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort_symbol_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sort_symbol_declContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sort_symbol_declContext,i)


        def PK_Funs(self):
            return self.getToken(SMTLIBv2Parser.PK_Funs, 0)

        def par_fun_symbol_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Par_fun_symbol_declContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Par_fun_symbol_declContext,i)


        def PK_SortsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_SortsDescription, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_FunsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_FunsDescription, 0)

        def PK_Definition(self):
            return self.getToken(SMTLIBv2Parser.PK_Definition, 0)

        def PK_Values(self):
            return self.getToken(SMTLIBv2Parser.PK_Values, 0)

        def PK_Notes(self):
            return self.getToken(SMTLIBv2Parser.PK_Notes, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_theory_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory_attribute" ):
                listener.enterTheory_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory_attribute" ):
                listener.exitTheory_attribute(self)




    def theory_attribute(self):

        localctx = SMTLIBv2Parser.Theory_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_theory_attribute)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.match(SMTLIBv2Parser.PK_Sorts)
                self.state = 487
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 489 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 488
                    self.sort_symbol_decl()
                    self.state = 491 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 493
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.match(SMTLIBv2Parser.PK_Funs)
                self.state = 496
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 498 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 497
                    self.par_fun_symbol_decl()
                    self.state = 500 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 502
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 504
                self.match(SMTLIBv2Parser.PK_SortsDescription)
                self.state = 505
                self.string()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 506
                self.match(SMTLIBv2Parser.PK_FunsDescription)
                self.state = 507
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 508
                self.match(SMTLIBv2Parser.PK_Definition)
                self.state = 509
                self.string()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 510
                self.match(SMTLIBv2Parser.PK_Values)
                self.state = 511
                self.string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 512
                self.match(SMTLIBv2Parser.PK_Notes)
                self.state = 513
                self.string()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 514
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Theory_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Theory(self):
            return self.getToken(SMTLIBv2Parser.PS_Theory, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def theory_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Theory_attributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Theory_attributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_theory_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory_decl" ):
                listener.enterTheory_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory_decl" ):
                listener.exitTheory_decl(self)




    def theory_decl(self):

        localctx = SMTLIBv2Parser.Theory_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_theory_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 518
            self.match(SMTLIBv2Parser.PS_Theory)
            self.state = 519
            self.symbol()
            self.state = 521 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 520
                self.theory_attribute()
                self.state = 523 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0)):
                    break

            self.state = 525
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logic_attribueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_Theories(self):
            return self.getToken(SMTLIBv2Parser.PK_Theories, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def PK_Language(self):
            return self.getToken(SMTLIBv2Parser.PK_Language, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_Extension(self):
            return self.getToken(SMTLIBv2Parser.PK_Extension, 0)

        def PK_Values(self):
            return self.getToken(SMTLIBv2Parser.PK_Values, 0)

        def PK_Notes(self):
            return self.getToken(SMTLIBv2Parser.PK_Notes, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_logic_attribue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic_attribue" ):
                listener.enterLogic_attribue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic_attribue" ):
                listener.exitLogic_attribue(self)




    def logic_attribue(self):

        localctx = SMTLIBv2Parser.Logic_attribueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_logic_attribue)
        self._la = 0 # Token type
        try:
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.match(SMTLIBv2Parser.PK_Theories)
                self.state = 528
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 530 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 529
                    self.symbol()
                    self.state = 532 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==113):
                        break

                self.state = 534
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self.match(SMTLIBv2Parser.PK_Language)
                self.state = 537
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 538
                self.match(SMTLIBv2Parser.PK_Extension)
                self.state = 539
                self.string()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 540
                self.match(SMTLIBv2Parser.PK_Values)
                self.state = 541
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 542
                self.match(SMTLIBv2Parser.PK_Notes)
                self.state = 543
                self.string()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 544
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Logic(self):
            return self.getToken(SMTLIBv2Parser.PS_Logic, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def logic_attribue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Logic_attribueContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Logic_attribueContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)




    def logic(self):

        localctx = SMTLIBv2Parser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_logic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 548
            self.match(SMTLIBv2Parser.PS_Logic)
            self.state = 549
            self.symbol()
            self.state = 551 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 550
                self.logic_attribue()
                self.state = 553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0)):
                    break

            self.state = 555
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sort_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_dec" ):
                listener.enterSort_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_dec" ):
                listener.exitSort_dec(self)




    def sort_dec(self):

        localctx = SMTLIBv2Parser.Sort_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sort_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 558
            self.symbol()
            self.state = 559
            self.numeral()
            self.state = 560
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selector_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_selector_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector_dec" ):
                listener.enterSelector_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector_dec" ):
                listener.exitSelector_dec(self)




    def selector_dec(self):

        localctx = SMTLIBv2Parser.Selector_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_selector_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 563
            self.symbol()
            self.state = 564
            self.sort()
            self.state = 565
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def selector_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Selector_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Selector_decContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_constructor_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_dec" ):
                listener.enterConstructor_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_dec" ):
                listener.exitConstructor_dec(self)




    def constructor_dec(self):

        localctx = SMTLIBv2Parser.Constructor_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_constructor_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 568
            self.symbol()
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 569
                self.selector_dec()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 575
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datatype_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def constructor_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Constructor_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Constructor_decContext,i)


        def GRW_Par(self):
            return self.getToken(SMTLIBv2Parser.GRW_Par, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_datatype_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype_dec" ):
                listener.enterDatatype_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype_dec" ):
                listener.exitDatatype_dec(self)




    def datatype_dec(self):

        localctx = SMTLIBv2Parser.Datatype_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_datatype_dec)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 579 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 578
                    self.constructor_dec()
                    self.state = 581 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 583
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 585
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 586
                self.match(SMTLIBv2Parser.GRW_Par)
                self.state = 587
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 589 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 588
                    self.symbol()
                    self.state = 591 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==113):
                        break

                self.state = 593
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 594
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 595
                    self.constructor_dec()
                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==2):
                        break

                self.state = 600
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 601
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sorted_varContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_function_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_dec" ):
                listener.enterFunction_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_dec" ):
                listener.exitFunction_dec(self)




    def function_dec(self):

        localctx = SMTLIBv2Parser.Function_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_function_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 606
            self.symbol()
            self.state = 607
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 608
                self.sorted_var()
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 614
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 615
            self.sort()
            self.state = 616
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def term(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,0)


        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sorted_varContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_function_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_def" ):
                listener.enterFunction_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_def" ):
                listener.exitFunction_def(self)




    def function_def(self):

        localctx = SMTLIBv2Parser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_function_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.symbol()
            self.state = 619
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 620
                self.sorted_var()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 627
            self.sort()
            self.state = 628
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prop_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Not(self):
            return self.getToken(SMTLIBv2Parser.PS_Not, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_prop_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProp_literal" ):
                listener.enterProp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProp_literal" ):
                listener.exitProp_literal(self)




    def prop_literal(self):

        localctx = SMTLIBv2Parser.Prop_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_prop_literal)
        try:
            self.state = 636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.symbol()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 632
                self.match(SMTLIBv2Parser.PS_Not)
                self.state = 633
                self.symbol()
                self.state = 634
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.CommandContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.CommandContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)




    def script(self):

        localctx = SMTLIBv2Parser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 638
                self.command()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_assertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Assert(self):
            return self.getToken(SMTLIBv2Parser.CMD_Assert, 0)

        def term(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_assert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_assert" ):
                listener.enterCmd_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_assert" ):
                listener.exitCmd_assert(self)




    def cmd_assert(self):

        localctx = SMTLIBv2Parser.Cmd_assertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_cmd_assert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(SMTLIBv2Parser.CMD_Assert)
            self.state = 645
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_checkSatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CheckSat(self):
            return self.getToken(SMTLIBv2Parser.CMD_CheckSat, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_checkSat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_checkSat" ):
                listener.enterCmd_checkSat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_checkSat" ):
                listener.exitCmd_checkSat(self)




    def cmd_checkSat(self):

        localctx = SMTLIBv2Parser.Cmd_checkSatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_cmd_checkSat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(SMTLIBv2Parser.CMD_CheckSat)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_checkSatAssumingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CheckSatAssuming(self):
            return self.getToken(SMTLIBv2Parser.CMD_CheckSatAssuming, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def prop_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Prop_literalContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Prop_literalContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_checkSatAssuming

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_checkSatAssuming" ):
                listener.enterCmd_checkSatAssuming(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_checkSatAssuming" ):
                listener.exitCmd_checkSatAssuming(self)




    def cmd_checkSatAssuming(self):

        localctx = SMTLIBv2Parser.Cmd_checkSatAssumingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_cmd_checkSatAssuming)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(SMTLIBv2Parser.CMD_CheckSatAssuming)
            self.state = 650
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388548) != 0) or _la==113:
                self.state = 651
                self.prop_literal()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 657
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareConst(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareConst, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareConst" ):
                listener.enterCmd_declareConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareConst" ):
                listener.exitCmd_declareConst(self)




    def cmd_declareConst(self):

        localctx = SMTLIBv2Parser.Cmd_declareConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_cmd_declareConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(SMTLIBv2Parser.CMD_DeclareConst)
            self.state = 660
            self.symbol()
            self.state = 661
            self.sort()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareDatatypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareDatatype(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareDatatype, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def datatype_dec(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Datatype_decContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareDatatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareDatatype" ):
                listener.enterCmd_declareDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareDatatype" ):
                listener.exitCmd_declareDatatype(self)




    def cmd_declareDatatype(self):

        localctx = SMTLIBv2Parser.Cmd_declareDatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_cmd_declareDatatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(SMTLIBv2Parser.CMD_DeclareDatatype)
            self.state = 664
            self.symbol()
            self.state = 665
            self.datatype_dec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareDatatypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareDatatypes(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareDatatypes, 0)

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def sort_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sort_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sort_decContext,i)


        def datatype_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Datatype_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Datatype_decContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareDatatypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareDatatypes" ):
                listener.enterCmd_declareDatatypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareDatatypes" ):
                listener.exitCmd_declareDatatypes(self)




    def cmd_declareDatatypes(self):

        localctx = SMTLIBv2Parser.Cmd_declareDatatypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_cmd_declareDatatypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(SMTLIBv2Parser.CMD_DeclareDatatypes)
            self.state = 668
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 670 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 669
                self.sort_dec()
                self.state = 672 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2):
                    break

            self.state = 674
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 675
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 677 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 676
                self.datatype_dec()
                self.state = 679 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2):
                    break

            self.state = 681
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareFunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareFun(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareFun, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareFun" ):
                listener.enterCmd_declareFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareFun" ):
                listener.exitCmd_declareFun(self)




    def cmd_declareFun(self):

        localctx = SMTLIBv2Parser.Cmd_declareFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cmd_declareFun)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(SMTLIBv2Parser.CMD_DeclareFun)
            self.state = 684
            self.symbol()
            self.state = 685
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388548) != 0) or _la==113:
                self.state = 686
                self.sort()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 692
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 693
            self.sort()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareSort(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareSort, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareSort" ):
                listener.enterCmd_declareSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareSort" ):
                listener.exitCmd_declareSort(self)




    def cmd_declareSort(self):

        localctx = SMTLIBv2Parser.Cmd_declareSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_cmd_declareSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(SMTLIBv2Parser.CMD_DeclareSort)
            self.state = 696
            self.symbol()
            self.state = 697
            self.numeral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineFunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFun(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFun, 0)

        def function_def(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Function_defContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFun" ):
                listener.enterCmd_defineFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFun" ):
                listener.exitCmd_defineFun(self)




    def cmd_defineFun(self):

        localctx = SMTLIBv2Parser.Cmd_defineFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cmd_defineFun)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(SMTLIBv2Parser.CMD_DefineFun)
            self.state = 700
            self.function_def()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineFunRecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFunRec(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFunRec, 0)

        def function_def(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Function_defContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineFunRec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFunRec" ):
                listener.enterCmd_defineFunRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFunRec" ):
                listener.exitCmd_defineFunRec(self)




    def cmd_defineFunRec(self):

        localctx = SMTLIBv2Parser.Cmd_defineFunRecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_cmd_defineFunRec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(SMTLIBv2Parser.CMD_DefineFunRec)
            self.state = 703
            self.function_def()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineFunsRecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFunsRec(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0)

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def function_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Function_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Function_decContext,i)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineFunsRec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFunsRec" ):
                listener.enterCmd_defineFunsRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFunsRec" ):
                listener.exitCmd_defineFunsRec(self)




    def cmd_defineFunsRec(self):

        localctx = SMTLIBv2Parser.Cmd_defineFunsRecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_cmd_defineFunsRec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(SMTLIBv2Parser.CMD_DefineFunsRec)
            self.state = 706
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 708 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 707
                self.function_dec()
                self.state = 710 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2):
                    break

            self.state = 712
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 713
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 715 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 714
                self.term()
                self.state = 717 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388580) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 140737488355343) != 0)):
                    break

            self.state = 719
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineSort(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineSort, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineSort" ):
                listener.enterCmd_defineSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineSort" ):
                listener.exitCmd_defineSort(self)




    def cmd_defineSort(self):

        localctx = SMTLIBv2Parser.Cmd_defineSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_cmd_defineSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(SMTLIBv2Parser.CMD_DefineSort)
            self.state = 722
            self.symbol()
            self.state = 723
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==113:
                self.state = 724
                self.symbol()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 730
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 731
            self.sort()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_echoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Echo(self):
            return self.getToken(SMTLIBv2Parser.CMD_Echo, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_echo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_echo" ):
                listener.enterCmd_echo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_echo" ):
                listener.exitCmd_echo(self)




    def cmd_echo(self):

        localctx = SMTLIBv2Parser.Cmd_echoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_cmd_echo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(SMTLIBv2Parser.CMD_Echo)
            self.state = 734
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_exitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Exit(self):
            return self.getToken(SMTLIBv2Parser.CMD_Exit, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_exit" ):
                listener.enterCmd_exit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_exit" ):
                listener.exitCmd_exit(self)




    def cmd_exit(self):

        localctx = SMTLIBv2Parser.Cmd_exitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_cmd_exit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(SMTLIBv2Parser.CMD_Exit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getAssertionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetAssertions(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetAssertions, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getAssertions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getAssertions" ):
                listener.enterCmd_getAssertions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getAssertions" ):
                listener.exitCmd_getAssertions(self)




    def cmd_getAssertions(self):

        localctx = SMTLIBv2Parser.Cmd_getAssertionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_cmd_getAssertions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(SMTLIBv2Parser.CMD_GetAssertions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetAssignment(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetAssignment, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getAssignment" ):
                listener.enterCmd_getAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getAssignment" ):
                listener.exitCmd_getAssignment(self)




    def cmd_getAssignment(self):

        localctx = SMTLIBv2Parser.Cmd_getAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cmd_getAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(SMTLIBv2Parser.CMD_GetAssignment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetInfo(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetInfo, 0)

        def info_flag(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Info_flagContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getInfo" ):
                listener.enterCmd_getInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getInfo" ):
                listener.exitCmd_getInfo(self)




    def cmd_getInfo(self):

        localctx = SMTLIBv2Parser.Cmd_getInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cmd_getInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(SMTLIBv2Parser.CMD_GetInfo)
            self.state = 743
            self.info_flag()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getModelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetModel(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetModel, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getModel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getModel" ):
                listener.enterCmd_getModel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getModel" ):
                listener.exitCmd_getModel(self)




    def cmd_getModel(self):

        localctx = SMTLIBv2Parser.Cmd_getModelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cmd_getModel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(SMTLIBv2Parser.CMD_GetModel)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetOption(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetOption, 0)

        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getOption" ):
                listener.enterCmd_getOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getOption" ):
                listener.exitCmd_getOption(self)




    def cmd_getOption(self):

        localctx = SMTLIBv2Parser.Cmd_getOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_cmd_getOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(SMTLIBv2Parser.CMD_GetOption)
            self.state = 748
            self.keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getProofContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetProof(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetProof, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getProof

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getProof" ):
                listener.enterCmd_getProof(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getProof" ):
                listener.exitCmd_getProof(self)




    def cmd_getProof(self):

        localctx = SMTLIBv2Parser.Cmd_getProofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_cmd_getProof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(SMTLIBv2Parser.CMD_GetProof)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getUnsatAssumptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetUnsatAssumptions(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetUnsatAssumptions, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getUnsatAssumptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getUnsatAssumptions" ):
                listener.enterCmd_getUnsatAssumptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getUnsatAssumptions" ):
                listener.exitCmd_getUnsatAssumptions(self)




    def cmd_getUnsatAssumptions(self):

        localctx = SMTLIBv2Parser.Cmd_getUnsatAssumptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_cmd_getUnsatAssumptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(SMTLIBv2Parser.CMD_GetUnsatAssumptions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getUnsatCoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetUnsatCore(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetUnsatCore, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getUnsatCore

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getUnsatCore" ):
                listener.enterCmd_getUnsatCore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getUnsatCore" ):
                listener.exitCmd_getUnsatCore(self)




    def cmd_getUnsatCore(self):

        localctx = SMTLIBv2Parser.Cmd_getUnsatCoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_cmd_getUnsatCore)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(SMTLIBv2Parser.CMD_GetUnsatCore)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetValue(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetValue, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getValue" ):
                listener.enterCmd_getValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getValue" ):
                listener.exitCmd_getValue(self)




    def cmd_getValue(self):

        localctx = SMTLIBv2Parser.Cmd_getValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_cmd_getValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(SMTLIBv2Parser.CMD_GetValue)
            self.state = 757
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 759 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 758
                self.term()
                self.state = 761 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8388580) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 140737488355343) != 0)):
                    break

            self.state = 763
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_popContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Pop(self):
            return self.getToken(SMTLIBv2Parser.CMD_Pop, 0)

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_pop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_pop" ):
                listener.enterCmd_pop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_pop" ):
                listener.exitCmd_pop(self)




    def cmd_pop(self):

        localctx = SMTLIBv2Parser.Cmd_popContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_cmd_pop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(SMTLIBv2Parser.CMD_Pop)
            self.state = 766
            self.numeral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_pushContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Push(self):
            return self.getToken(SMTLIBv2Parser.CMD_Push, 0)

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_push

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_push" ):
                listener.enterCmd_push(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_push" ):
                listener.exitCmd_push(self)




    def cmd_push(self):

        localctx = SMTLIBv2Parser.Cmd_pushContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_cmd_push)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(SMTLIBv2Parser.CMD_Push)
            self.state = 769
            self.numeral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_resetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Reset(self):
            return self.getToken(SMTLIBv2Parser.CMD_Reset, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_reset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_reset" ):
                listener.enterCmd_reset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_reset" ):
                listener.exitCmd_reset(self)




    def cmd_reset(self):

        localctx = SMTLIBv2Parser.Cmd_resetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_cmd_reset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(SMTLIBv2Parser.CMD_Reset)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_resetAssertionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_ResetAssertions(self):
            return self.getToken(SMTLIBv2Parser.CMD_ResetAssertions, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_resetAssertions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_resetAssertions" ):
                listener.enterCmd_resetAssertions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_resetAssertions" ):
                listener.exitCmd_resetAssertions(self)




    def cmd_resetAssertions(self):

        localctx = SMTLIBv2Parser.Cmd_resetAssertionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_cmd_resetAssertions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(SMTLIBv2Parser.CMD_ResetAssertions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_setInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetInfo(self):
            return self.getToken(SMTLIBv2Parser.CMD_SetInfo, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_setInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setInfo" ):
                listener.enterCmd_setInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setInfo" ):
                listener.exitCmd_setInfo(self)




    def cmd_setInfo(self):

        localctx = SMTLIBv2Parser.Cmd_setInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_cmd_setInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(SMTLIBv2Parser.CMD_SetInfo)
            self.state = 776
            self.attribute()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_setLogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetLogic(self):
            return self.getToken(SMTLIBv2Parser.CMD_SetLogic, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_setLogic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setLogic" ):
                listener.enterCmd_setLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setLogic" ):
                listener.exitCmd_setLogic(self)




    def cmd_setLogic(self):

        localctx = SMTLIBv2Parser.Cmd_setLogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cmd_setLogic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(SMTLIBv2Parser.CMD_SetLogic)
            self.state = 779
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_setOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetOption(self):
            return self.getToken(SMTLIBv2Parser.CMD_SetOption, 0)

        def option(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.OptionContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_setOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setOption" ):
                listener.enterCmd_setOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setOption" ):
                listener.exitCmd_setOption(self)




    def cmd_setOption(self):

        localctx = SMTLIBv2Parser.Cmd_setOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_cmd_setOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(SMTLIBv2Parser.CMD_SetOption)
            self.state = 782
            self.option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def cmd_assert(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_assertContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def cmd_checkSat(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_checkSatContext,0)


        def cmd_checkSatAssuming(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_checkSatAssumingContext,0)


        def cmd_declareConst(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareConstContext,0)


        def cmd_declareDatatype(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareDatatypeContext,0)


        def cmd_declareDatatypes(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareDatatypesContext,0)


        def cmd_declareFun(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareFunContext,0)


        def cmd_declareSort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareSortContext,0)


        def cmd_defineFun(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunContext,0)


        def cmd_defineFunRec(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunRecContext,0)


        def cmd_defineFunsRec(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunsRecContext,0)


        def cmd_defineSort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineSortContext,0)


        def cmd_echo(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_echoContext,0)


        def cmd_exit(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_exitContext,0)


        def cmd_getAssertions(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getAssertionsContext,0)


        def cmd_getAssignment(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getAssignmentContext,0)


        def cmd_getInfo(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getInfoContext,0)


        def cmd_getModel(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getModelContext,0)


        def cmd_getOption(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getOptionContext,0)


        def cmd_getProof(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getProofContext,0)


        def cmd_getUnsatAssumptions(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getUnsatAssumptionsContext,0)


        def cmd_getUnsatCore(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getUnsatCoreContext,0)


        def cmd_getValue(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getValueContext,0)


        def cmd_pop(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_popContext,0)


        def cmd_push(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_pushContext,0)


        def cmd_reset(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_resetContext,0)


        def cmd_resetAssertions(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_resetAssertionsContext,0)


        def cmd_setInfo(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_setInfoContext,0)


        def cmd_setLogic(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_setLogicContext,0)


        def cmd_setOption(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_setOptionContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)




    def command(self):

        localctx = SMTLIBv2Parser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_command)
        try:
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 785
                self.cmd_assert()
                self.state = 786
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 789
                self.cmd_checkSat()
                self.state = 790
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 793
                self.cmd_checkSatAssuming()
                self.state = 794
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 796
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 797
                self.cmd_declareConst()
                self.state = 798
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 800
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 801
                self.cmd_declareDatatype()
                self.state = 802
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 804
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 805
                self.cmd_declareDatatypes()
                self.state = 806
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 808
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 809
                self.cmd_declareFun()
                self.state = 810
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 812
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 813
                self.cmd_declareSort()
                self.state = 814
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 816
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 817
                self.cmd_defineFun()
                self.state = 818
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 820
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 821
                self.cmd_defineFunRec()
                self.state = 822
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 824
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 825
                self.cmd_defineFunsRec()
                self.state = 826
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 828
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 829
                self.cmd_defineSort()
                self.state = 830
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 832
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 833
                self.cmd_echo()
                self.state = 834
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 836
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 837
                self.cmd_exit()
                self.state = 838
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 840
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 841
                self.cmd_getAssertions()
                self.state = 842
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 844
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 845
                self.cmd_getAssignment()
                self.state = 846
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 848
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 849
                self.cmd_getInfo()
                self.state = 850
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 852
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 853
                self.cmd_getModel()
                self.state = 854
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 856
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 857
                self.cmd_getOption()
                self.state = 858
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 860
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 861
                self.cmd_getProof()
                self.state = 862
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 864
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 865
                self.cmd_getUnsatAssumptions()
                self.state = 866
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 868
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 869
                self.cmd_getUnsatCore()
                self.state = 870
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 872
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 873
                self.cmd_getValue()
                self.state = 874
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 876
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 877
                self.cmd_pop()
                self.state = 878
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 880
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 881
                self.cmd_push()
                self.state = 882
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 884
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 885
                self.cmd_reset()
                self.state = 886
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 888
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 889
                self.cmd_resetAssertions()
                self.state = 890
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 892
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 893
                self.cmd_setInfo()
                self.state = 894
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 896
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 897
                self.cmd_setLogic()
                self.state = 898
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 900
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 901
                self.cmd_setOption()
                self.state = 902
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class B_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_True(self):
            return self.getToken(SMTLIBv2Parser.PS_True, 0)

        def PS_False(self):
            return self.getToken(SMTLIBv2Parser.PS_False, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_b_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB_value" ):
                listener.enterB_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB_value" ):
                listener.exitB_value(self)




    def b_value(self):

        localctx = SMTLIBv2Parser.B_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_b_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            _la = self._input.LA(1)
            if not(_la==11 or _la==19):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_DiagnosticOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_GlobalDeclarations(self):
            return self.getToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0)

        def b_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.B_valueContext,0)


        def PK_InteractiveMode(self):
            return self.getToken(SMTLIBv2Parser.PK_InteractiveMode, 0)

        def PK_PrintSuccess(self):
            return self.getToken(SMTLIBv2Parser.PK_PrintSuccess, 0)

        def PK_ProduceAssertions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssertions, 0)

        def PK_ProduceAssignments(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssignments, 0)

        def PK_ProduceModels(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceModels, 0)

        def PK_ProduceProofs(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceProofs, 0)

        def PK_ProduceUnsatAssumptions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0)

        def PK_ProduceUnsatCores(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0)

        def PK_RandomSeed(self):
            return self.getToken(SMTLIBv2Parser.PK_RandomSeed, 0)

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def PK_RegularOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0)

        def PK_ReproducibleResourceLimit(self):
            return self.getToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0)

        def PK_Verbosity(self):
            return self.getToken(SMTLIBv2Parser.PK_Verbosity, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)




    def option(self):

        localctx = SMTLIBv2Parser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_option)
        try:
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.match(SMTLIBv2Parser.PK_DiagnosticOutputChannel)
                self.state = 909
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(SMTLIBv2Parser.PK_GlobalDeclarations)
                self.state = 911
                self.b_value()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(SMTLIBv2Parser.PK_InteractiveMode)
                self.state = 913
                self.b_value()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 914
                self.match(SMTLIBv2Parser.PK_PrintSuccess)
                self.state = 915
                self.b_value()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 916
                self.match(SMTLIBv2Parser.PK_ProduceAssertions)
                self.state = 917
                self.b_value()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 918
                self.match(SMTLIBv2Parser.PK_ProduceAssignments)
                self.state = 919
                self.b_value()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 920
                self.match(SMTLIBv2Parser.PK_ProduceModels)
                self.state = 921
                self.b_value()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 922
                self.match(SMTLIBv2Parser.PK_ProduceProofs)
                self.state = 923
                self.b_value()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 924
                self.match(SMTLIBv2Parser.PK_ProduceUnsatAssumptions)
                self.state = 925
                self.b_value()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 926
                self.match(SMTLIBv2Parser.PK_ProduceUnsatCores)
                self.state = 927
                self.b_value()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 928
                self.match(SMTLIBv2Parser.PK_RandomSeed)
                self.state = 929
                self.numeral()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 930
                self.match(SMTLIBv2Parser.PK_RegularOutputChannel)
                self.state = 931
                self.string()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 932
                self.match(SMTLIBv2Parser.PK_ReproducibleResourceLimit)
                self.state = 933
                self.numeral()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 934
                self.match(SMTLIBv2Parser.PK_Verbosity)
                self.state = 935
                self.numeral()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 936
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Info_flagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AllStatistics(self):
            return self.getToken(SMTLIBv2Parser.PK_AllStatistics, 0)

        def PK_AssertionStackLevels(self):
            return self.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0)

        def PK_Authors(self):
            return self.getToken(SMTLIBv2Parser.PK_Authors, 0)

        def PK_ErrorBehaviour(self):
            return self.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0)

        def PK_Name(self):
            return self.getToken(SMTLIBv2Parser.PK_Name, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0)

        def PK_Version(self):
            return self.getToken(SMTLIBv2Parser.PK_Version, 0)

        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_info_flag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfo_flag" ):
                listener.enterInfo_flag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfo_flag" ):
                listener.exitInfo_flag(self)




    def info_flag(self):

        localctx = SMTLIBv2Parser.Info_flagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_info_flag)
        try:
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                self.match(SMTLIBv2Parser.PK_AllStatistics)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.match(SMTLIBv2Parser.PK_AssertionStackLevels)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.match(SMTLIBv2Parser.PK_Authors)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 942
                self.match(SMTLIBv2Parser.PK_ErrorBehaviour)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 943
                self.match(SMTLIBv2Parser.PK_Name)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 944
                self.match(SMTLIBv2Parser.PK_ReasonUnknown)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 945
                self.match(SMTLIBv2Parser.PK_Version)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 946
                self.keyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_behaviourContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_ImmediateExit(self):
            return self.getToken(SMTLIBv2Parser.PS_ImmediateExit, 0)

        def PS_ContinuedExecution(self):
            return self.getToken(SMTLIBv2Parser.PS_ContinuedExecution, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_error_behaviour

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_behaviour" ):
                listener.enterError_behaviour(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_behaviour" ):
                listener.exitError_behaviour(self)




    def error_behaviour(self):

        localctx = SMTLIBv2Parser.Error_behaviourContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_error_behaviour)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            _la = self._input.LA(1)
            if not(_la==9 or _la==12):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reason_unknownContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Memout(self):
            return self.getToken(SMTLIBv2Parser.PS_Memout, 0)

        def PS_Incomplete(self):
            return self.getToken(SMTLIBv2Parser.PS_Incomplete, 0)

        def s_expr(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_reason_unknown

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReason_unknown" ):
                listener.enterReason_unknown(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReason_unknown" ):
                listener.exitReason_unknown(self)




    def reason_unknown(self):

        localctx = SMTLIBv2Parser.Reason_unknownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_reason_unknown)
        try:
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 951
                self.match(SMTLIBv2Parser.PS_Memout)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 952
                self.match(SMTLIBv2Parser.PS_Incomplete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 953
                self.s_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def cmd_defineFun(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def cmd_defineFunRec(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunRecContext,0)


        def cmd_defineFunsRec(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunsRecContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_model_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_response" ):
                listener.enterModel_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_response" ):
                listener.exitModel_response(self)




    def model_response(self):

        localctx = SMTLIBv2Parser.Model_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_model_response)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 957
                self.cmd_defineFun()
                self.state = 958
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 961
                self.cmd_defineFunRec()
                self.state = 962
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 964
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 965
                self.cmd_defineFunsRec()
                self.state = 966
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Info_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AssertionStackLevels(self):
            return self.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0)

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def PK_Authors(self):
            return self.getToken(SMTLIBv2Parser.PK_Authors, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_ErrorBehaviour(self):
            return self.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0)

        def error_behaviour(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Error_behaviourContext,0)


        def PK_Name(self):
            return self.getToken(SMTLIBv2Parser.PK_Name, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0)

        def reason_unknown(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Reason_unknownContext,0)


        def PK_Version(self):
            return self.getToken(SMTLIBv2Parser.PK_Version, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_info_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfo_response" ):
                listener.enterInfo_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfo_response" ):
                listener.exitInfo_response(self)




    def info_response(self):

        localctx = SMTLIBv2Parser.Info_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_info_response)
        try:
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.match(SMTLIBv2Parser.PK_AssertionStackLevels)
                self.state = 971
                self.numeral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 972
                self.match(SMTLIBv2Parser.PK_Authors)
                self.state = 973
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.match(SMTLIBv2Parser.PK_ErrorBehaviour)
                self.state = 975
                self.error_behaviour()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 976
                self.match(SMTLIBv2Parser.PK_Name)
                self.state = 977
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 978
                self.match(SMTLIBv2Parser.PK_ReasonUnknown)
                self.state = 979
                self.reason_unknown()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 980
                self.match(SMTLIBv2Parser.PK_Version)
                self.state = 981
                self.string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 982
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valuation_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_valuation_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuation_pair" ):
                listener.enterValuation_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuation_pair" ):
                listener.exitValuation_pair(self)




    def valuation_pair(self):

        localctx = SMTLIBv2Parser.Valuation_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_valuation_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 986
            self.term()
            self.state = 987
            self.term()
            self.state = 988
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class T_valuation_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def b_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.B_valueContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_t_valuation_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterT_valuation_pair" ):
                listener.enterT_valuation_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitT_valuation_pair" ):
                listener.exitT_valuation_pair(self)




    def t_valuation_pair(self):

        localctx = SMTLIBv2Parser.T_valuation_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_t_valuation_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 991
            self.symbol()
            self.state = 992
            self.b_value()
            self.state = 993
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_sat_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Sat(self):
            return self.getToken(SMTLIBv2Parser.PS_Sat, 0)

        def PS_Unsat(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsat, 0)

        def PS_Unknown(self):
            return self.getToken(SMTLIBv2Parser.PS_Unknown, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_check_sat_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_sat_response" ):
                listener.enterCheck_sat_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_sat_response" ):
                listener.exitCheck_sat_response(self)




    def check_sat_response(self):

        localctx = SMTLIBv2Parser.Check_sat_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_check_sat_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 5308416) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Echo_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_echo_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEcho_response" ):
                listener.enterEcho_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEcho_response" ):
                listener.exitEcho_response(self)




    def echo_response(self):

        localctx = SMTLIBv2Parser.Echo_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_echo_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_assertions_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_assertions_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_assertions_response" ):
                listener.enterGet_assertions_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_assertions_response" ):
                listener.exitGet_assertions_response(self)




    def get_assertions_response(self):

        localctx = SMTLIBv2Parser.Get_assertions_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_get_assertions_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388580) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 140737488355343) != 0):
                self.state = 1000
                self.term()
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1006
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_assignment_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def t_valuation_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.T_valuation_pairContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.T_valuation_pairContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_assignment_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_assignment_response" ):
                listener.enterGet_assignment_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_assignment_response" ):
                listener.exitGet_assignment_response(self)




    def get_assignment_response(self):

        localctx = SMTLIBv2Parser.Get_assignment_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_get_assignment_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 1009
                self.t_valuation_pair()
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1015
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_info_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def info_response(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Info_responseContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Info_responseContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_info_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_info_response" ):
                listener.enterGet_info_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_info_response" ):
                listener.exitGet_info_response(self)




    def get_info_response(self):

        localctx = SMTLIBv2Parser.Get_info_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_get_info_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1019 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1018
                self.info_response()
                self.state = 1021 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 4398046511103) != 0)):
                    break

            self.state = 1023
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_model_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def RS_Model(self):
            return self.getToken(SMTLIBv2Parser.RS_Model, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def model_response(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Model_responseContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Model_responseContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_model_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_model_response" ):
                listener.enterGet_model_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_model_response" ):
                listener.exitGet_model_response(self)




    def get_model_response(self):

        localctx = SMTLIBv2Parser.Get_model_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_get_model_response)
        self._la = 0 # Token type
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 1026
                self.match(SMTLIBv2Parser.RS_Model)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1027
                    self.model_response()
                    self.state = 1032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1033
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1035
                    self.model_response()
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1041
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_option_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Attribute_valueContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_option_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_option_response" ):
                listener.enterGet_option_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_option_response" ):
                listener.exitGet_option_response(self)




    def get_option_response(self):

        localctx = SMTLIBv2Parser.Get_option_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_get_option_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.attribute_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_proof_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_expr(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_proof_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_proof_response" ):
                listener.enterGet_proof_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_proof_response" ):
                listener.exitGet_proof_response(self)




    def get_proof_response(self):

        localctx = SMTLIBv2Parser.Get_proof_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_get_proof_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.s_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_unsat_assump_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_unsat_assump_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_unsat_assump_response" ):
                listener.enterGet_unsat_assump_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_unsat_assump_response" ):
                listener.exitGet_unsat_assump_response(self)




    def get_unsat_assump_response(self):

        localctx = SMTLIBv2Parser.Get_unsat_assump_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_get_unsat_assump_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==113:
                self.state = 1049
                self.symbol()
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1055
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_unsat_core_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_unsat_core_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_unsat_core_response" ):
                listener.enterGet_unsat_core_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_unsat_core_response" ):
                listener.exitGet_unsat_core_response(self)




    def get_unsat_core_response(self):

        localctx = SMTLIBv2Parser.Get_unsat_core_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_get_unsat_core_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8388544) != 0) or _la==113:
                self.state = 1058
                self.symbol()
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1064
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_value_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def valuation_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Valuation_pairContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Valuation_pairContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_value_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_value_response" ):
                listener.enterGet_value_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_value_response" ):
                listener.exitGet_value_response(self)




    def get_value_response(self):

        localctx = SMTLIBv2Parser.Get_value_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_get_value_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1068 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1067
                self.valuation_pair()
                self.state = 1070 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2):
                    break

            self.state = 1072
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_success_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def check_sat_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Check_sat_responseContext,0)


        def echo_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Echo_responseContext,0)


        def get_assertions_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_assertions_responseContext,0)


        def get_assignment_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_assignment_responseContext,0)


        def get_info_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_info_responseContext,0)


        def get_model_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_model_responseContext,0)


        def get_option_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_option_responseContext,0)


        def get_proof_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_proof_responseContext,0)


        def get_unsat_assump_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_unsat_assump_responseContext,0)


        def get_unsat_core_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_unsat_core_responseContext,0)


        def get_value_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_value_responseContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_specific_success_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_success_response" ):
                listener.enterSpecific_success_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_success_response" ):
                listener.exitSpecific_success_response(self)




    def specific_success_response(self):

        localctx = SMTLIBv2Parser.Specific_success_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_specific_success_response)
        try:
            self.state = 1085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.check_sat_response()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.echo_response()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1076
                self.get_assertions_response()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1077
                self.get_assignment_response()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1078
                self.get_info_response()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1079
                self.get_model_response()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1080
                self.get_option_response()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1081
                self.get_proof_response()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1082
                self.get_unsat_assump_response()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1083
                self.get_unsat_core_response()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1084
                self.get_value_response()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Success(self):
            return self.getToken(SMTLIBv2Parser.PS_Success, 0)

        def specific_success_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Specific_success_responseContext,0)


        def PS_Unsupported(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsupported, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Error(self):
            return self.getToken(SMTLIBv2Parser.PS_Error, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_general_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_response" ):
                listener.enterGeneral_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_response" ):
                listener.exitGeneral_response(self)




    def general_response(self):

        localctx = SMTLIBv2Parser.General_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_general_response)
        try:
            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1087
                self.match(SMTLIBv2Parser.PS_Success)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self.specific_success_response()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1089
                self.match(SMTLIBv2Parser.PS_Unsupported)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1090
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 1091
                self.match(SMTLIBv2Parser.PS_Error)
                self.state = 1092
                self.string()
                self.state = 1093
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





