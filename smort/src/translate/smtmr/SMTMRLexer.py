# Generated from SMTMR.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,446,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,5,0,118,
        8,0,10,0,12,0,121,9,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        4,5,4,134,8,4,10,4,12,4,137,9,4,1,4,1,4,1,5,1,5,1,5,4,5,144,8,5,
        11,5,12,5,145,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
        24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
        28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,5,34,328,8,34,10,
        34,12,34,331,9,34,3,34,333,8,34,1,35,1,35,1,35,1,35,4,35,339,8,35,
        11,35,12,35,340,1,36,1,36,1,36,1,36,4,36,347,8,36,11,36,12,36,348,
        1,37,1,37,1,37,5,37,354,8,37,10,37,12,37,357,9,37,1,37,1,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,3,43,373,
        8,43,1,44,1,44,3,44,377,8,44,1,45,1,45,3,45,381,8,45,1,46,1,46,1,
        46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,
        50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,
        53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,5,55,435,8,
        55,10,55,12,55,438,9,55,1,56,4,56,441,8,56,11,56,12,56,442,1,56,
        1,56,0,0,57,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,0,79,39,81,0,83,0,85,0,87,0,89,
        0,91,0,93,0,95,0,97,40,99,41,101,42,103,43,105,44,107,45,109,46,
        111,47,113,48,1,0,10,2,0,10,10,13,13,1,0,49,57,3,0,48,57,65,70,97,
        102,1,0,48,57,8,0,33,33,36,38,42,43,45,47,60,90,94,95,97,122,126,
        126,1,0,48,49,2,0,32,126,128,65535,3,0,32,33,35,126,128,65535,4,
        0,32,91,93,123,125,126,128,65535,3,0,9,10,13,13,32,32,452,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,79,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
        0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,3,124,1,0,0,0,
        5,126,1,0,0,0,7,128,1,0,0,0,9,130,1,0,0,0,11,140,1,0,0,0,13,149,
        1,0,0,0,15,153,1,0,0,0,17,158,1,0,0,0,19,164,1,0,0,0,21,170,1,0,
        0,0,23,177,1,0,0,0,25,182,1,0,0,0,27,186,1,0,0,0,29,192,1,0,0,0,
        31,200,1,0,0,0,33,202,1,0,0,0,35,204,1,0,0,0,37,207,1,0,0,0,39,214,
        1,0,0,0,41,222,1,0,0,0,43,229,1,0,0,0,45,241,1,0,0,0,47,248,1,0,
        0,0,49,252,1,0,0,0,51,258,1,0,0,0,53,266,1,0,0,0,55,270,1,0,0,0,
        57,277,1,0,0,0,59,282,1,0,0,0,61,288,1,0,0,0,63,297,1,0,0,0,65,312,
        1,0,0,0,67,319,1,0,0,0,69,332,1,0,0,0,71,334,1,0,0,0,73,342,1,0,
        0,0,75,350,1,0,0,0,77,360,1,0,0,0,79,362,1,0,0,0,81,364,1,0,0,0,
        83,366,1,0,0,0,85,368,1,0,0,0,87,372,1,0,0,0,89,376,1,0,0,0,91,380,
        1,0,0,0,93,382,1,0,0,0,95,385,1,0,0,0,97,387,1,0,0,0,99,392,1,0,
        0,0,101,397,1,0,0,0,103,403,1,0,0,0,105,412,1,0,0,0,107,418,1,0,
        0,0,109,424,1,0,0,0,111,431,1,0,0,0,113,440,1,0,0,0,115,119,3,7,
        3,0,116,118,8,0,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,
        0,0,119,120,1,0,0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,123,6,0,
        0,0,123,2,1,0,0,0,124,125,5,40,0,0,125,4,1,0,0,0,126,127,5,41,0,
        0,127,6,1,0,0,0,128,129,5,59,0,0,129,8,1,0,0,0,130,135,5,34,0,0,
        131,134,3,89,44,0,132,134,3,95,47,0,133,131,1,0,0,0,133,132,1,0,
        0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,138,1,0,
        0,0,137,135,1,0,0,0,138,139,5,34,0,0,139,10,1,0,0,0,140,143,5,124,
        0,0,141,144,3,91,45,0,142,144,3,95,47,0,143,141,1,0,0,0,143,142,
        1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,147,
        1,0,0,0,147,148,5,124,0,0,148,12,1,0,0,0,149,150,5,110,0,0,150,151,
        5,111,0,0,151,152,5,116,0,0,152,14,1,0,0,0,153,154,5,66,0,0,154,
        155,5,111,0,0,155,156,5,111,0,0,156,157,5,108,0,0,157,16,1,0,0,0,
        158,159,5,102,0,0,159,160,5,97,0,0,160,161,5,108,0,0,161,162,5,115,
        0,0,162,163,5,101,0,0,163,18,1,0,0,0,164,165,5,108,0,0,165,166,5,
        111,0,0,166,167,5,103,0,0,167,168,5,105,0,0,168,169,5,99,0,0,169,
        20,1,0,0,0,170,171,5,116,0,0,171,172,5,104,0,0,172,173,5,101,0,0,
        173,174,5,111,0,0,174,175,5,114,0,0,175,176,5,121,0,0,176,22,1,0,
        0,0,177,178,5,116,0,0,178,179,5,114,0,0,179,180,5,117,0,0,180,181,
        5,101,0,0,181,24,1,0,0,0,182,183,5,115,0,0,183,184,5,97,0,0,184,
        185,5,116,0,0,185,26,1,0,0,0,186,187,5,117,0,0,187,188,5,110,0,0,
        188,189,5,115,0,0,189,190,5,97,0,0,190,191,5,116,0,0,191,28,1,0,
        0,0,192,193,5,117,0,0,193,194,5,110,0,0,194,195,5,107,0,0,195,196,
        5,110,0,0,196,197,5,111,0,0,197,198,5,119,0,0,198,199,5,110,0,0,
        199,30,1,0,0,0,200,201,5,33,0,0,201,32,1,0,0,0,202,203,5,95,0,0,
        203,34,1,0,0,0,204,205,5,97,0,0,205,206,5,115,0,0,206,36,1,0,0,0,
        207,208,5,66,0,0,208,209,5,73,0,0,209,210,5,78,0,0,210,211,5,65,
        0,0,211,212,5,82,0,0,212,213,5,89,0,0,213,38,1,0,0,0,214,215,5,68,
        0,0,215,216,5,69,0,0,216,217,5,67,0,0,217,218,5,73,0,0,218,219,5,
        77,0,0,219,220,5,65,0,0,220,221,5,76,0,0,221,40,1,0,0,0,222,223,
        5,101,0,0,223,224,5,120,0,0,224,225,5,105,0,0,225,226,5,115,0,0,
        226,227,5,116,0,0,227,228,5,115,0,0,228,42,1,0,0,0,229,230,5,72,
        0,0,230,231,5,69,0,0,231,232,5,88,0,0,232,233,5,65,0,0,233,234,5,
        68,0,0,234,235,5,69,0,0,235,236,5,67,0,0,236,237,5,73,0,0,237,238,
        5,77,0,0,238,239,5,65,0,0,239,240,5,76,0,0,240,44,1,0,0,0,241,242,
        5,102,0,0,242,243,5,111,0,0,243,244,5,114,0,0,244,245,5,97,0,0,245,
        246,5,108,0,0,246,247,5,108,0,0,247,46,1,0,0,0,248,249,5,108,0,0,
        249,250,5,101,0,0,250,251,5,116,0,0,251,48,1,0,0,0,252,253,5,109,
        0,0,253,254,5,97,0,0,254,255,5,116,0,0,255,256,5,99,0,0,256,257,
        5,104,0,0,257,50,1,0,0,0,258,259,5,78,0,0,259,260,5,85,0,0,260,261,
        5,77,0,0,261,262,5,69,0,0,262,263,5,82,0,0,263,264,5,65,0,0,264,
        265,5,76,0,0,265,52,1,0,0,0,266,267,5,112,0,0,267,268,5,97,0,0,268,
        269,5,114,0,0,269,54,1,0,0,0,270,271,5,115,0,0,271,272,5,116,0,0,
        272,273,5,114,0,0,273,274,5,105,0,0,274,275,5,110,0,0,275,276,5,
        103,0,0,276,56,1,0,0,0,277,278,5,115,0,0,278,279,5,101,0,0,279,280,
        5,101,0,0,280,281,5,100,0,0,281,58,1,0,0,0,282,283,5,109,0,0,283,
        284,5,111,0,0,284,285,5,114,0,0,285,286,5,112,0,0,286,287,5,104,
        0,0,287,60,1,0,0,0,288,289,5,110,0,0,289,290,5,111,0,0,290,291,5,
        116,0,0,291,292,5,97,0,0,292,293,5,116,0,0,293,294,5,105,0,0,294,
        295,5,111,0,0,295,296,5,110,0,0,296,62,1,0,0,0,297,298,5,115,0,0,
        298,299,5,117,0,0,299,300,5,98,0,0,300,301,5,115,0,0,301,302,5,116,
        0,0,302,303,5,45,0,0,303,304,5,116,0,0,304,305,5,101,0,0,305,306,
        5,109,0,0,306,307,5,112,0,0,307,308,5,108,0,0,308,309,5,97,0,0,309,
        310,5,116,0,0,310,311,5,101,0,0,311,64,1,0,0,0,312,313,5,109,0,0,
        313,314,5,101,0,0,314,315,5,116,0,0,315,316,5,104,0,0,316,317,5,
        111,0,0,317,318,5,100,0,0,318,66,1,0,0,0,319,320,5,102,0,0,320,321,
        5,117,0,0,321,322,5,115,0,0,322,323,5,101,0,0,323,68,1,0,0,0,324,
        333,5,48,0,0,325,329,7,1,0,0,326,328,3,81,40,0,327,326,1,0,0,0,328,
        331,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,333,1,0,0,0,331,
        329,1,0,0,0,332,324,1,0,0,0,332,325,1,0,0,0,333,70,1,0,0,0,334,335,
        5,35,0,0,335,336,5,48,0,0,336,338,1,0,0,0,337,339,3,85,42,0,338,
        337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,
        72,1,0,0,0,342,343,5,35,0,0,343,344,5,120,0,0,344,346,1,0,0,0,345,
        347,3,77,38,0,346,345,1,0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,
        349,1,0,0,0,349,74,1,0,0,0,350,351,3,69,34,0,351,355,5,46,0,0,352,
        354,5,48,0,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,
        356,1,0,0,0,356,358,1,0,0,0,357,355,1,0,0,0,358,359,3,69,34,0,359,
        76,1,0,0,0,360,361,7,2,0,0,361,78,1,0,0,0,362,363,5,58,0,0,363,80,
        1,0,0,0,364,365,7,3,0,0,365,82,1,0,0,0,366,367,7,4,0,0,367,84,1,
        0,0,0,368,369,7,5,0,0,369,86,1,0,0,0,370,373,7,6,0,0,371,373,3,93,
        46,0,372,370,1,0,0,0,372,371,1,0,0,0,373,88,1,0,0,0,374,377,7,7,
        0,0,375,377,3,93,46,0,376,374,1,0,0,0,376,375,1,0,0,0,377,90,1,0,
        0,0,378,381,7,8,0,0,379,381,3,93,46,0,380,378,1,0,0,0,380,379,1,
        0,0,0,381,92,1,0,0,0,382,383,5,34,0,0,383,384,5,34,0,0,384,94,1,
        0,0,0,385,386,7,9,0,0,386,96,1,0,0,0,387,388,5,58,0,0,388,389,5,
        103,0,0,389,390,5,101,0,0,390,391,5,110,0,0,391,98,1,0,0,0,392,393,
        5,58,0,0,393,394,5,118,0,0,394,395,5,97,0,0,395,396,5,114,0,0,396,
        100,1,0,0,0,397,398,5,58,0,0,398,399,5,99,0,0,399,400,5,111,0,0,
        400,401,5,110,0,0,401,402,5,115,0,0,402,102,1,0,0,0,403,404,5,58,
        0,0,404,405,5,115,0,0,405,406,5,110,0,0,406,407,5,105,0,0,407,408,
        5,112,0,0,408,409,5,112,0,0,409,410,5,101,0,0,410,411,5,116,0,0,
        411,104,1,0,0,0,412,413,5,58,0,0,413,414,5,115,0,0,414,415,5,101,
        0,0,415,416,5,101,0,0,416,417,5,100,0,0,417,106,1,0,0,0,418,419,
        5,58,0,0,419,420,5,102,0,0,420,421,5,114,0,0,421,422,5,101,0,0,422,
        423,5,101,0,0,423,108,1,0,0,0,424,425,5,58,0,0,425,426,5,98,0,0,
        426,427,5,111,0,0,427,428,5,117,0,0,428,429,5,110,0,0,429,430,5,
        100,0,0,430,110,1,0,0,0,431,436,3,83,41,0,432,435,3,81,40,0,433,
        435,3,83,41,0,434,432,1,0,0,0,434,433,1,0,0,0,435,438,1,0,0,0,436,
        434,1,0,0,0,436,437,1,0,0,0,437,112,1,0,0,0,438,436,1,0,0,0,439,
        441,7,9,0,0,440,439,1,0,0,0,441,442,1,0,0,0,442,440,1,0,0,0,442,
        443,1,0,0,0,443,444,1,0,0,0,444,445,6,56,0,0,445,114,1,0,0,0,17,
        0,119,133,135,143,145,329,332,340,348,355,372,376,380,434,436,442,
        1,6,0,0
    ]

class SMTMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Comment = 1
    ParOpen = 2
    ParClose = 3
    Semicolon = 4
    String = 5
    QuotedSymbol = 6
    PS_Not = 7
    PS_Bool = 8
    PS_False = 9
    PS_Logic = 10
    PS_Theory = 11
    PS_True = 12
    PS_Sat = 13
    PS_Unsat = 14
    PS_Unknown = 15
    GRW_Exclamation = 16
    GRW_Underscore = 17
    GRW_As = 18
    GRW_Binary = 19
    GRW_Decimal = 20
    GRW_Exists = 21
    GRW_Hexadecimal = 22
    GRW_Forall = 23
    GRW_Let = 24
    GRW_Match = 25
    GRW_Numeral = 26
    GRW_Par = 27
    GRW_String = 28
    GRW_Seed = 29
    GRW_Morph = 30
    GRW_Notation = 31
    GRW_SubstTemplate = 32
    GRW_Method = 33
    GRW_Fuse = 34
    Numeral = 35
    Binary = 36
    HexDecimal = 37
    Decimal = 38
    Colon = 39
    PK_Gen = 40
    PK_Var = 41
    PK_Cons = 42
    PK_Snippet = 43
    PK_Seed = 44
    PK_Free = 45
    PK_Bound = 46
    UndefinedSymbol = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "';'", "'not'", "'Bool'", "'false'", "'logic'", 
            "'theory'", "'true'", "'sat'", "'unsat'", "'unknown'", "'!'", 
            "'_'", "'as'", "'BINARY'", "'DECIMAL'", "'exists'", "'HEXADECIMAL'", 
            "'forall'", "'let'", "'match'", "'NUMERAL'", "'par'", "'string'", 
            "'seed'", "'morph'", "'notation'", "'subst-template'", "'method'", 
            "'fuse'", "':'", "':gen'", "':var'", "':cons'", "':snippet'", 
            "':seed'", "':free'", "':bound'" ]

    symbolicNames = [ "<INVALID>",
            "Comment", "ParOpen", "ParClose", "Semicolon", "String", "QuotedSymbol", 
            "PS_Not", "PS_Bool", "PS_False", "PS_Logic", "PS_Theory", "PS_True", 
            "PS_Sat", "PS_Unsat", "PS_Unknown", "GRW_Exclamation", "GRW_Underscore", 
            "GRW_As", "GRW_Binary", "GRW_Decimal", "GRW_Exists", "GRW_Hexadecimal", 
            "GRW_Forall", "GRW_Let", "GRW_Match", "GRW_Numeral", "GRW_Par", 
            "GRW_String", "GRW_Seed", "GRW_Morph", "GRW_Notation", "GRW_SubstTemplate", 
            "GRW_Method", "GRW_Fuse", "Numeral", "Binary", "HexDecimal", 
            "Decimal", "Colon", "PK_Gen", "PK_Var", "PK_Cons", "PK_Snippet", 
            "PK_Seed", "PK_Free", "PK_Bound", "UndefinedSymbol", "WS" ]

    ruleNames = [ "Comment", "ParOpen", "ParClose", "Semicolon", "String", 
                  "QuotedSymbol", "PS_Not", "PS_Bool", "PS_False", "PS_Logic", 
                  "PS_Theory", "PS_True", "PS_Sat", "PS_Unsat", "PS_Unknown", 
                  "GRW_Exclamation", "GRW_Underscore", "GRW_As", "GRW_Binary", 
                  "GRW_Decimal", "GRW_Exists", "GRW_Hexadecimal", "GRW_Forall", 
                  "GRW_Let", "GRW_Match", "GRW_Numeral", "GRW_Par", "GRW_String", 
                  "GRW_Seed", "GRW_Morph", "GRW_Notation", "GRW_SubstTemplate", 
                  "GRW_Method", "GRW_Fuse", "Numeral", "Binary", "HexDecimal", 
                  "Decimal", "HexDigit", "Colon", "Digit", "Sym", "BinaryDigit", 
                  "PrintableChar", "PrintableCharNoDquote", "PrintableCharNoBackslash", 
                  "EscapedSpace", "WhiteSpaceChar", "PK_Gen", "PK_Var", 
                  "PK_Cons", "PK_Snippet", "PK_Seed", "PK_Free", "PK_Bound", 
                  "UndefinedSymbol", "WS" ]

    grammarFileName = "SMTMR.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


