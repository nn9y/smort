; Generated with: https://github.com/nicdard/fusion-function-generator
; 30 functions (number of subst-template blocks)
; 10 operators per function

(notation c0 :cons)
(notation c1 :cons)
(subst-template :free
	(
		(x (_ BitVec 16)) (y (_ BitVec 20)) (z (_ BitVec 78)) (c0 (_ BitVec 62)) (c1 (_ BitVec 58)) 
	)
	(
		(x ((_ extract 77 62) (bvxor (concat c1 (bvnot y)) z)))
		(y (bvnot ((_ extract 19 0) (bvxor (concat x c0) z))))
		(z (bvxor (concat x c0) (concat c1 (bvnot y))))
	)
)
(subst-template :free
	(
		(x String) (y String) (z String) (c0 (_ BitVec 16)) 
	)
	(
		(x (str.substr (ite (str.contains (str.++ x (ite (< (- (bv2nat c0)) 0) (str.++ "-" (str.from_int (- (- (bv2nat c0))))) (str.from_int (- (bv2nat c0))))) y) z (str.++ x (ite (< (- (bv2nat c0)) 0) (str.++ "-" (str.from_int (- (- (bv2nat c0))))) (str.from_int (- (bv2nat c0)))))) 0 (str.len x)))
		(y (ite (str.contains (str.++ x (ite (< (- (bv2nat c0)) 0) (str.++ "-" (str.from_int (- (- (bv2nat c0))))) (str.from_int (- (bv2nat c0))))) y) y z))
		(z (ite (str.contains (str.++ x (ite (< (- (bv2nat c0)) 0) (str.++ "-" (str.from_int (- (- (bv2nat c0))))) (str.from_int (- (bv2nat c0))))) y) (str.++ x (ite (< (- (bv2nat c0)) 0) (str.++ "-" (str.from_int (- (- (bv2nat c0))))) (str.from_int (- (bv2nat c0))))) y))
	)
)
(subst-template :free
	(
		(x Int) (y Int) (z String) (c0 Int) (c1 Int) 
	)
	(
		(x (- (div (- (ite (= (str.at z 0) "-") (- (str.to_int (str.substr z 1 (str.len z)))) (str.to_int z)) c1) c0) y))
		(y (- (div (- (ite (= (str.at z 0) "-") (- (str.to_int (str.substr z 1 (str.len z)))) (str.to_int z)) c1) c0) x))
		(z (ite (< (+ (* (+ x y) c0) c1) 0) (str.++ "-" (str.from_int (- (+ (* (+ x y) c0) c1)))) (str.from_int (+ (* (+ x y) c0) c1))))
	)
)
(subst-template :free
	(
		(x Int) (y Int) (z Int) (c0 Int) (c1 Int) 
	)
	(
		(x (- c0 (- (- z) (ite (> y c1) y c1))))
		(y (ite (> y c1) (- (- z) (- c0 x)) y))
		(z (- (+ (- c0 x) (ite (> y c1) y c1))))
	)
)
(subst-template :free
	(
		(x Int) (y String) (z String) (c0 Int) 
	)
	(
		(x (ite (= (str.at (str.substr z 0 (str.indexof z (str.++ (ite (< (- c0) 0) (str.++ "-" (str.from_int (- (- c0)))) (str.from_int (- c0))) y) (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))) 0) "-") (- (str.to_int (str.substr (str.substr z 0 (str.indexof z (str.++ (ite (< (- c0) 0) (str.++ "-" (str.from_int (- (- c0)))) (str.from_int (- c0))) y) (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))) 1 (str.len (str.substr z 0 (str.indexof z (str.++ (ite (< (- c0) 0) (str.++ "-" (str.from_int (- (- c0)))) (str.from_int (- c0))) y) (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))))))) (str.to_int (str.substr z 0 (str.indexof z (str.++ (ite (< (- c0) 0) (str.++ "-" (str.from_int (- (- c0)))) (str.from_int (- c0))) y) (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))))))
		(y (str.substr (str.replace z (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) "") (str.len (ite (< (- c0) 0) (str.++ "-" (str.from_int (- (- c0)))) (str.from_int (- c0)))) (str.len y)))
		(z (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) (str.++ (ite (< (- c0) 0) (str.++ "-" (str.from_int (- (- c0)))) (str.from_int (- c0))) y)))
	)
)
(subst-template :free
	(
		(x Int) (y String) (z String) (c0 String) (c1 String) 
	)
	(
		(x (ite (= (str.at (str.substr (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) 0 (str.indexof (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) y (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))) 0) "-") (- (str.to_int (str.substr (str.substr (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) 0 (str.indexof (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) y (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))) 1 (str.len (str.substr (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) 0 (str.indexof (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) y (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))))))) (str.to_int (str.substr (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) 0 (str.indexof (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) y (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x))))))))
		(y (str.substr (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) (str.indexof (str.substr (str.replace z c0 "") 0 (str.indexof (str.replace z c0 "") c1 (str.len (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y)))) y (str.len (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)))) (str.len y)))
		(z (str.++ c0 (str.++ (str.++ (ite (< x 0) (str.++ "-" (str.from_int (- x))) (str.from_int x)) y) c1)))
	)
)
(subst-template :free
	(
		(x (_ BitVec 32)) (y Int) (z Int) (c0 Int) (c1 Int) 
	)
	(
		(x ((_ nat2bv 32) (- z (* c0 (+ y c1)))))
		(y (- (div (- z (bv2nat x)) c0) c1))
		(z (+ (bv2nat x) (* c0 (+ y c1))))
	)
)
(subst-template :free
	(
		(x (_ BitVec 64)) (y (_ BitVec 16)) (z (_ BitVec 64)) (c0 (_ BitVec 48)) 
	)
	(
		(x (bvneg (bvnot (bvxor (bvnot (concat y c0)) (bvnot (bvnot z))))))
		(y ((_ extract 63 48) (bvnot (bvxor (bvnot (bvneg x)) (bvnot (bvnot z))))))
		(z (bvnot (bvnot (bvxor (bvnot (bvneg x)) (bvnot (concat y c0))))))
	)
)
(subst-template :free
	(
		(x Int) (y Int) (z Real) (c0 (_ BitVec 35)) 
	)
	(
		(x (- (div (to_int (- z)) (bv2nat c0)) y))
		(y (- (div (to_int (- z)) (bv2nat c0)) x))
		(z (- (to_real (* (+ x y) (bv2nat c0)))))
	)
)
(subst-template :free
	(
		(x Bool) (y Bool) (z Bool) (c0 Bool) 
	)
	(
		(x (ite (or x (not (not y))) (ite (=> (ite (or x (not (not y))) x (not (not y))) (not c0)) z (ite (or x (not (not y))) x (not (not y)))) x))
		(y (not (not (ite (or x (not (not y))) (not (not y)) (ite (=> (ite (or x (not (not y))) x (not (not y))) (not c0)) z (ite (or x (not (not y))) x (not (not y))))))))
		(z (ite (=> (ite (or x (not (not y))) x (not (not y))) (not c0)) (ite (or x (not (not y))) x (not (not y))) (not c0)))
	)
)
(subst-template :free
	(
		(x Real) (y (_ BitVec 32)) (z Real) (c0 Int) 
	)
	(
		(x (+ z (to_real (+ (- (bv2nat y)) c0))))
		(y ((_ nat2bv 32) (- (- (to_int (- x z)) c0))))
		(z (- x (to_real (+ (- (bv2nat y)) c0))))
	)
)
(subst-template :free
	(
		(x Int) (y Int) (z Int) (c0 (_ BitVec 15)) 
	)
	(
		(x (- z (* (- (bv2nat (bvnot c0))) y)))
		(y (div (- z x) (- (bv2nat (bvnot c0)))))
		(z (+ x (* (- (bv2nat (bvnot c0))) y)))
	)
)
(subst-template :free
	(
		(x String) (y Int) (z String) (c0 String) (c1 Int) 
	)
	(
		(x (str.substr (ite (str.prefixof (str.++ c0 x) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y)))) z (str.++ c0 x)) (str.len c0) (str.len x)))
		(y (div (ite (= (str.at (ite (str.prefixof (str.++ c0 x) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y)))) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y))) z) 0) "-") (- (str.to_int (str.substr (ite (str.prefixof (str.++ c0 x) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y)))) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y))) z) 1 (str.len (ite (str.prefixof (str.++ c0 x) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y)))) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y))) z))))) (str.to_int (ite (str.prefixof (str.++ c0 x) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y)))) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y))) z))) c1))
		(z (ite (str.prefixof (str.++ c0 x) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y)))) (str.++ c0 x) (ite (< (* c1 y) 0) (str.++ "-" (str.from_int (- (* c1 y)))) (str.from_int (* c1 y)))))
	)
)
(subst-template :free
	(
		(x (_ BitVec 8)) (y Int) (z Int) 
	)
	(
		(x (bvneg ((_ nat2bv 8) (- (- (+ z (- y)))))))
		(y (- (- (- (- (bv2nat (bvneg x)))) z)))
		(z (- (- (- (bv2nat (bvneg x)))) (- y)))
	)
)
(notation c2 :cons)
(subst-template :free
	(
		(x (_ BitVec 20)) (y (_ BitVec 32)) (z (_ BitVec 55)) (c0 (_ BitVec 23)) (c2 (_ BitVec 12)) (c1 (_ BitVec 55)) 
	)
	(
		(x ((_ extract 31 12) (bvxor y ((_ extract 31 0) (bvxor c1 (bvneg z))))))
		(y (bvxor (concat x c2) ((_ extract 31 0) (bvxor c1 (bvneg z)))))
		(z (bvneg (bvxor (concat c0 (bvxor (concat x c2) y)) c1)))
	)
)
(subst-template :free
	(
		(x Bool) (y Bool) (z Bool) 
	)
	(
		(x (not (not (not (ite (=> (not (not (not x))) (not (not y))) z (not (not (not x))))))))
		(y (not (not (ite (=> (not (not (not x))) (not (not y))) (not (not y)) z))))
		(z (ite (=> (not (not (not x))) (not (not y))) (not (not (not x))) (not (not y))))
	)
)
(subst-template :free
	(
		(x Int) (y Int) (z Real) (c0 Int) 
	)
	(
		(x (- (- (to_int z) (- (- y))) c0))
		(y (- (- (- (to_int z) (+ c0 x)))))
		(z (to_real (+ (+ c0 x) (- (- y)))))
	)
)
(subst-template :free
	(
		(x Int) (y Real) (z Real) (c0 Real) 
	)
	(
		(x (to_int (- (- c0) (- (- z) y))))
		(y (- (- z) (- (- c0) (to_real x))))
		(z (- (+ (- (- c0) (to_real x)) y)))
	)
)
(subst-template :free
	(
		(x Real) (y Real) (z Real) (c0 Real) (c1 Real) 
	)
	(
		(x (- (/ (- z) (* y c1)) c0))
		(y (/ (/ (- z) (+ x c0)) c1))
		(z (- (* (+ x c0) (* y c1))))
	)
)
(subst-template :free
	(
		(x Int) (y Int) (z Real) (c0 Int) 
	)
	(
		(x (to_int (- z (to_real (+ (- y) c0)))))
		(y (- (- (to_int (- z (to_real x))) c0)))
		(z (+ (to_real x) (to_real (+ (- y) c0))))
	)
)
(subst-template :free
	(
		(x Bool) (y Bool) (z Bool) (c0 Bool) (c1 Bool) 
	)
	(
		(x (xor (ite (distinct (not (xor y c0)) c1) (not (xor y c0)) c1) z))
		(y (xor c0 (not (ite (distinct (not (xor y c0)) c1) (xor x z) (not (xor y c0))))))
		(z (xor x (ite (distinct (not (xor y c0)) c1) (not (xor y c0)) c1)))
	)
)
(subst-template :free
	(
		(x Real) (y Real) (z Real) (c0 (_ BitVec 14)) 
	)
	(
		(x (- (ite (> (to_real (bv2nat c0)) (+ x y)) (+ x y) (- z)) y))
		(y (- (ite (> (to_real (bv2nat c0)) (+ x y)) (+ x y) (- z)) x))
		(z (- (ite (> (to_real (bv2nat c0)) (+ x y)) (to_real (bv2nat c0)) (+ x y))))
	)
)
(subst-template :free
	(
		(x Real) (y (_ BitVec 16)) (z Real) (c0 Real) 
	)
	(
		(x (/ (ite (<= (* x c0) (to_real (bv2nat y))) (- z) (* x c0)) c0))
		(y ((_ nat2bv 16) (to_int (ite (<= (* x c0) (to_real (bv2nat y))) (to_real (bv2nat y)) (- z)))))
		(z (- (ite (<= (* x c0) (to_real (bv2nat y))) (* x c0) (to_real (bv2nat y)))))
	)
)
(subst-template :free
	(
		(x (_ BitVec 1)) (y (_ BitVec 1)) (z (_ BitVec 10)) (c0 (_ BitVec 9)) (c2 (_ BitVec 8)) (c1 (_ BitVec 9)) 
	)
	(
		(x ((_ extract 8 8) (bvxor c1 (bvxor c0 (bvnot ((_ extract 9 1) z))))))
		(y ((_ extract 0 0) z))
		(z (concat (bvnot (bvxor c0 (bvxor (concat x c2) c1))) y))
	)
)
(subst-template :free
	(
		(x (_ BitVec 8)) (y (_ BitVec 32)) (z (_ BitVec 32)) (c0 (_ BitVec 24)) 
	)
	(
		(x ((_ extract 31 24) (bvnot (ite (distinct (bvnot (concat x c0)) (bvnot (bvneg y))) (bvnot (bvnot z)) (bvnot (concat x c0))))))
		(y (bvneg (bvnot (ite (distinct (bvnot (concat x c0)) (bvnot (bvneg y))) (bvnot (bvneg y)) (bvnot (bvnot z))))))
		(z (bvnot (bvnot (ite (distinct (bvnot (concat x c0)) (bvnot (bvneg y))) (bvnot (concat x c0)) (bvnot (bvneg y))))))
	)
)
(subst-template :free
	(
		(x Real) (y (_ BitVec 32)) (z Real) 
	)
	(
		(x (+ z (- (- (to_real (bv2nat (bvneg y)))))))
		(y (bvneg ((_ nat2bv 32) (to_int (- (- (- x z)))))))
		(z (- x (- (- (to_real (bv2nat (bvneg y)))))))
	)
)
(subst-template :free
	(
		(x Int) (y Int) (z Int) (c0 Int) (c1 (_ BitVec 10)) 
	)
	(
		(x (ite (<= x y) (ite (>= (ite (<= x y) x y) (ite (< c0 (bv2nat c1)) c0 (bv2nat c1))) z (ite (<= x y) x y)) x))
		(y (ite (<= x y) y (ite (>= (ite (<= x y) x y) (ite (< c0 (bv2nat c1)) c0 (bv2nat c1))) z (ite (<= x y) x y))))
		(z (ite (>= (ite (<= x y) x y) (ite (< c0 (bv2nat c1)) c0 (bv2nat c1))) (ite (<= x y) x y) (ite (< c0 (bv2nat c1)) c0 (bv2nat c1))))
	)
)
(subst-template :free
	(
		(x Int) (y (_ BitVec 20)) (z Int) 
	)
	(
		(x (ite (<= x (bv2nat (bvnot (bvnot (bvnot (bvnot y)))))) z x))
		(y (bvnot (bvnot (bvnot (bvnot ((_ nat2bv 20) (ite (<= x (bv2nat (bvnot (bvnot (bvnot (bvnot y)))))) (bv2nat (bvnot (bvnot (bvnot (bvnot y))))) z)))))))
		(z (ite (<= x (bv2nat (bvnot (bvnot (bvnot (bvnot y)))))) x (bv2nat (bvnot (bvnot (bvnot (bvnot y)))))))
	)
)
(subst-template :free
	(
		(x (_ BitVec 16)) (y Int) (z Int) 
	)
	(
		(x (bvnot (bvneg (bvnot ((_ nat2bv 16) (ite (< (bv2nat (bvnot (bvneg (bvnot x)))) y) (- z) (bv2nat (bvnot (bvneg (bvnot x))))))))))
		(y (ite (< (bv2nat (bvnot (bvneg (bvnot x)))) y) y (- z)))
		(z (- (ite (< (bv2nat (bvnot (bvneg (bvnot x)))) y) (bv2nat (bvnot (bvneg (bvnot x)))) y)))
	)
)
(subst-template :free
	(
		(x Int) (y Real) (z Real) (c0 Real) (c1 Real) 
	)
	(
		(x (to_int (/ z (ite (>= (ite (>= c0 c1) c0 c1) y) (ite (>= c0 c1) c0 c1) y))))
		(y (ite (>= (ite (>= c0 c1) c0 c1) y) y (/ z (to_real x))))
		(z (* (to_real x) (ite (>= (ite (>= c0 c1) c0 c1) y) (ite (>= c0 c1) c0 c1) y)))
	)
)
